
Printing isolate this:
OK
	(mode: ic3po)
	(reuse: 1)
	(opt: 1)
	(const: 1)
	(wires: 1)
	(using z3 4.8.10.0 with seed 0)
@     0s  Reading from file results/consensus_epr_seq/consensus_epr_seq.vmt
	(found sort dependency: node -> quorum)
-----------------------------------------------------------------

Action inputs:
	ext:send_vote: set([V__fml:dst, V__fml:src])
	ext:become_leader: set([V__fml:n, V__fml:q])
	ext:send_request_vote: set([V__fml:dst, V__fml:src])
	ext:next_phase4: set([])
	ext:recv_vote: set([V__fml:sender, V__fml:n])
	ext:decide: set([V__fml:n, V__fml:v])
	ext:next_phase1: set([])
	ext:next_phase3: set([])
	ext:next_phase2: set([])

Action definitions:
	ext:send_vote: {}
	ext:become_leader: {}
	ext:send_request_vote: {}
	ext:next_phase4: {}
	ext:recv_vote: {}
	ext:decide: {}
	ext:next_phase1: {}
	ext:next_phase3: {}
	ext:next_phase2: {}

Action preconditions:

	ext:send_vote:
		(__curr_phase = phase_sendVote)
		~__voted(V__fml:src)
		__vote_request_msg(V__fml:dst, V__fml:src)

	ext:become_leader:
		(__curr_phase = phase_becomeLeader)
		(forall N . (member(N, V__fml:q) -> __votes(V__fml:n, N)))

	ext:send_request_vote:
		(__curr_phase = phase_sendRequestVote)

	ext:next_phase4:
		(__curr_phase = phase_becomeLeader)

	ext:recv_vote:
		(__curr_phase = phase_recvVote)
		__vote_msg(V__fml:sender, V__fml:n)

	ext:decide:
		(forall V . ~__decided(V__fml:n, V))
		(__curr_phase = phase_decide)
		__leader(V__fml:n)

	ext:next_phase1:
		(__curr_phase = phase_sendRequestVote)

	ext:next_phase3:
		(__curr_phase = phase_recvVote)

	ext:next_phase2:
		(__curr_phase = phase_sendVote)

Action postconditions:

	ext:send_vote:
		(forall X0, X1 . (~vote_request_msg(X0, X1) | __vote_request_msg(X0, X1) | (X0 = V__fml:src)))
		(forall X0, X1 . (~vote_request_msg(X0, X1) | __vote_request_msg(X0, X1) | (X1 = V__fml:dst)))
		(forall X0, X1 . (vote_request_msg(X0, X1) | ~__vote_request_msg(X0, X1) | (X0 = V__fml:src)))
		(forall X0, X1 . (vote_request_msg(X0, X1) | ~__vote_request_msg(X0, X1) | (X1 = V__fml:dst)))
		(forall V0, V119 . (vote_msg(V0, V119) <-> (((V0 = V__fml:src) & (V119 = V__fml:dst)) ? True : __vote_msg(V0, V119))))
		(forall V0 . (voted(V0) <-> ((V0 = V__fml:src) ? True : __voted(V0))))

	ext:become_leader:
		(forall V0 . (leader(V0) <-> ((V0 = V__fml:n) ? True : __leader(V0))))

	ext:send_request_vote:
		(forall V0, V121 . (vote_request_msg(V0, V121) <-> (((V0 = V__fml:src) & (V121 = V__fml:dst)) ? True : __vote_request_msg(V0, V121))))

	ext:next_phase4:
		(curr_phase = phase_decide)

	ext:recv_vote:
		(forall V120, V0 . (votes(V0, V120) <-> (((V0 = V__fml:n) & (V120 = V__fml:sender)) ? True : __votes(V0, V120))))

	ext:decide:
		(forall V1, V0 . (decided(V0, V1) <-> (((V0 = V__fml:n) & (V1 = V__fml:v)) ? True : __decided(V0, V1))))

	ext:next_phase1:
		(curr_phase = phase_sendVote)

	ext:next_phase3:
		(curr_phase = phase_becomeLeader)

	ext:next_phase2:
		(curr_phase = phase_recvVote)

Update map:
	votes ->  ext:recv_vote
	leader ->  ext:become_leader
	curr_phase ->  ext:next_phase4 ext:next_phase3 ext:next_phase2 ext:next_phase1
	vote_request_msg ->  ext:send_vote ext:send_vote ext:send_vote ext:send_vote ext:send_request_vote
	vote_msg ->  ext:send_vote
	voted ->  ext:send_vote
	decided ->  ext:decide

stratifying state variables:

stratifying axioms:
	skolem arc: quorum -> node

stratifying action ext:send_vote:

stratifying action ext:become_leader:

stratifying action ext:recv_vote:

stratifying action ext:send_request_vote:

stratifying action ext:decide:

stratifying action ext:next_phase4:

stratifying action ext:next_phase3:

stratifying action ext:next_phase2:

stratifying action ext:next_phase1:

stratifying property:
    pos:
    neg:
	(epr: True)

stratifying helpers:

Arcs:
	quorum -> node

EPR: True
-----------------------------------------------------------------
	(gen: prefer_epr)
-----------------------------------------------------------------
	(found #9 actions)
adding #4 noops to action ext:send_vote
	noop(votes)
	noop(leader)
	noop(curr_phase)
	noop(decided)
adding #6 noops to action ext:become_leader
	noop(votes)
	noop(curr_phase)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
	noop(decided)
adding #6 noops to action ext:recv_vote
	noop(leader)
	noop(curr_phase)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
	noop(decided)
adding #6 noops to action ext:send_request_vote
	noop(votes)
	noop(leader)
	noop(curr_phase)
	noop(vote_msg)
	noop(voted)
	noop(decided)
adding #6 noops to action ext:decide
	noop(votes)
	noop(leader)
	noop(curr_phase)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
adding #6 noops to action ext:next_phase4
	noop(votes)
	noop(leader)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
	noop(decided)
adding #6 noops to action ext:next_phase3
	noop(votes)
	noop(leader)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
	noop(decided)
adding #6 noops to action ext:next_phase2
	noop(votes)
	noop(leader)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
	noop(decided)
adding #6 noops to action ext:next_phase1
	noop(votes)
	noop(leader)
	noop(vote_request_msg)
	noop(vote_msg)
	noop(voted)
	noop(decided)
-----------------------------------------------------------------
Init #1
	((forall V0, V116 . ~__vote_request_msg(V0, V116)) & (forall V0 . ~__voted(V0)) & (forall V0, V117 . ~__vote_msg(V0, V117)) & (forall V118, V0 . ~__votes(V0, V118)) & (forall V0 . ~__leader(V0)) & (forall V1, V0 . ~__decided(V0, V1)) & (__curr_phase = phase_sendRequestVote))
		with variables frozenset([__votes, __leader, phase_sendRequestVote, __vote_request_msg, __vote_msg, __voted, __decided, __curr_phase])

Axioms #11
	~(phase_sendRequestVote = phase_sendVote)
		with variables frozenset([phase_sendVote, phase_sendRequestVote])
	~(phase_sendRequestVote = phase_recvVote)
		with variables frozenset([phase_sendRequestVote, phase_recvVote])
	~(phase_sendRequestVote = phase_becomeLeader)
		with variables frozenset([phase_sendRequestVote, phase_becomeLeader])
	~(phase_sendRequestVote = phase_decide)
		with variables frozenset([phase_sendRequestVote, phase_decide])
	~(phase_sendVote = phase_recvVote)
		with variables frozenset([phase_sendVote, phase_recvVote])
	~(phase_sendVote = phase_becomeLeader)
		with variables frozenset([phase_sendVote, phase_becomeLeader])
	~(phase_sendVote = phase_decide)
		with variables frozenset([phase_sendVote, phase_decide])
	~(phase_recvVote = phase_becomeLeader)
		with variables frozenset([phase_becomeLeader, phase_recvVote])
	~(phase_recvVote = phase_decide)
		with variables frozenset([phase_recvVote, phase_decide])
	~(phase_becomeLeader = phase_decide)
		with variables frozenset([phase_becomeLeader, phase_decide])
	(forall Q1, Q2 . (exists N . (member(N, Q1) & member(N, Q2))))
		with variables frozenset([member])

Actions #10
	0:	ext:send_vote (en: en_ext:send_vote)	(((forall V0, V119 . (...(..., ...) <-> (... ? ... : ...))) & (forall V0 . (...(...) <-> (... ? ... : ...))) & (__curr_phase = phase_sendVote) & ~__voted(V__fml:src) & __vote_request_msg(V__fml:dst, V__fml:src) & (forall X0, X1 . (~... | ...(..., ...) | (... = ...))) & (forall X0, X1 . (~... | ...(..., ...) | (... = ...))) & (forall X0, X1 . (...(..., ...) | ~... | (... = ...))) & (forall X0, X1 . (...(..., ...) | ~... | (... = ...)))) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_sendVote, V__fml:dst, V__fml:src])
	1:	ext:become_leader (en: en_ext:become_leader)	(((forall V0 . (...(...) <-> (... ? ... : ...))) & (__curr_phase = phase_becomeLeader) & (forall N . (...(..., ...) -> ...(..., ...)))) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_becomeLeader, member, V__fml:n, V__fml:q])
	2:	ext:recv_vote (en: en_ext:recv_vote)	(((forall V120, V0 . (...(..., ...) <-> (... ? ... : ...))) & (__curr_phase = phase_recvVote) & __vote_msg(V__fml:sender, V__fml:n)) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, V__fml:sender, phase_recvVote, V__fml:n])
	3:	ext:send_request_vote (en: en_ext:send_request_vote)	(((forall V0, V121 . (...(..., ...) <-> (... ? ... : ...))) & (__curr_phase = phase_sendRequestVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_sendRequestVote, V__fml:dst, V__fml:src])
	4:	ext:decide (en: en_ext:decide)	(((forall V1, V0 . (...(..., ...) <-> (... ? ... : ...))) & (__curr_phase = phase_decide) & __leader(V__fml:n) & (forall V . ~...(..., ...))) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_decide, V__fml:n, V__fml:v])
	5:	ext:next_phase4 (en: en_ext:next_phase4)	(((curr_phase = phase_decide) & (__curr_phase = phase_becomeLeader)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_becomeLeader, phase_decide])
	6:	ext:next_phase3 (en: en_ext:next_phase3)	(((curr_phase = phase_becomeLeader) & (__curr_phase = phase_recvVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_becomeLeader, phase_recvVote])
	7:	ext:next_phase2 (en: en_ext:next_phase2)	(((curr_phase = phase_recvVote) & (__curr_phase = phase_sendVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_recvVote, phase_sendVote])
	8:	ext:next_phase1 (en: en_ext:next_phase1)	(((curr_phase = phase_sendVote) & (__curr_phase = phase_sendRequestVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided, phase_sendVote, phase_sendRequestVote])
	9:	noop (en: en_noop)	((forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))
		with variables frozenset([__votes, __leader, __curr_phase, __vote_request_msg, __vote_msg, __voted, __decided, votes, leader, curr_phase, vote_request_msg, vote_msg, voted, decided])

Properties #1
	(forall V1, V2, N1, N2 . ((__decided(N1, V1) & __decided(N2, V2)) -> (V1 = V2)))
		with variables frozenset([__decided])

Variables #26
	__votes of type node -> node -> Bool
	__leader of type node -> Bool
	__curr_phase of type phase
	__vote_request_msg of type node -> node -> Bool
	__vote_msg of type node -> node -> Bool
	__voted of type node -> Bool
	__decided of type node -> value -> Bool
	votes of type node -> node -> Bool
	leader of type node -> Bool
	curr_phase of type phase
	vote_request_msg of type node -> node -> Bool
	vote_msg of type node -> node -> Bool
	voted of type node -> Bool
	decided of type node -> value -> Bool
	V__fml:sender of type node
	phase_becomeLeader of type phase
	phase_recvVote of type phase
	phase_decide of type phase
	phase_sendVote of type phase
	phase_sendRequestVote of type phase
	member of type node -> quorum -> Bool
	V__fml:v of type value
	V__fml:n of type node
	V__fml:dst of type node
	V__fml:src of type node
	V__fml:q of type quorum

State variables #13
	__vote_msg of type node -> node -> Bool
	phase_becomeLeader of type phase
	phase_recvVote of type phase
	__votes of type node -> node -> Bool
	__leader of type node -> Bool
	__curr_phase of type phase
	__vote_request_msg of type node -> node -> Bool
	phase_decide of type phase
	__voted of type node -> Bool
	__decided of type node -> value -> Bool
	phase_sendVote of type phase
	phase_sendRequestVote of type phase
	member of type node -> quorum -> Bool

Nex state variables #13
	phase_becomeLeader of type phase
	phase_recvVote of type phase
	phase_decide of type phase
	phase_sendVote of type phase
	phase_sendRequestVote of type phase
	member of type node -> quorum -> Bool
	votes of type node -> node -> Bool
	leader of type node -> Bool
	curr_phase of type phase
	vote_request_msg of type node -> node -> Bool
	vote_msg of type node -> node -> Bool
	voted of type node -> Bool
	decided of type node -> value -> Bool

Global variables #6
	phase_becomeLeader of type phase
	phase_recvVote of type phase
	phase_decide of type phase
	phase_sendVote of type phase
	phase_sendRequestVote of type phase
	member of type node -> quorum -> Bool

Ordered variables #0

Nex to pre #7
	votes <- __votes
	leader <- __leader
	curr_phase <- __curr_phase
	vote_request_msg <- __vote_request_msg
	vote_msg <- __vote_msg
	voted <- __voted
	decided <- __decided

Pre to nex #7
	__votes -> votes
	__leader -> leader
	__curr_phase -> curr_phase
	__vote_request_msg -> vote_request_msg
	__vote_msg -> vote_msg
	__voted -> voted
	__decided -> decided

Other variables #6
	V__fml:sender of type node
	V__fml:dst of type node
	V__fml:src of type node
	V__fml:n of type node
	V__fml:q of type quorum
	V__fml:v of type value

Axiom variables #6
	phase_becomeLeader
	phase_recvVote
	phase_decide
	phase_sendVote
	phase_sendRequestVote
	member

Predicates #0

Helpers #0

Inferences #0

Definitions #0

Trel:
((en_ext:send_vote -> (((forall V0, V119 . (vote_msg(V0, V119) <-> (((V0 = V__fml:src) & (V119 = V__fml:dst)) ? True : __vote_msg(V0, V119)))) & (forall V0 . (voted(V0) <-> ((V0 = V__fml:src) ? True : __voted(V0)))) & (__curr_phase = phase_sendVote) & ~__voted(V__fml:src) & __vote_request_msg(V__fml:dst, V__fml:src) & (forall X0, X1 . (~vote_request_msg(X0, X1) | __vote_request_msg(X0, X1) | (X0 = V__fml:src))) & (forall X0, X1 . (~vote_request_msg(X0, X1) | __vote_request_msg(X0, X1) | (X1 = V__fml:dst))) & (forall X0, X1 . (vote_request_msg(X0, X1) | ~__vote_request_msg(X0, X1) | (X0 = V__fml:src))) & (forall X0, X1 . (vote_request_msg(X0, X1) | ~__vote_request_msg(X0, X1) | (X1 = V__fml:dst)))) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:become_leader -> (((forall V0 . (leader(V0) <-> ((V0 = V__fml:n) ? True : __leader(V0)))) & (__curr_phase = phase_becomeLeader) & (forall N . (member(N, V__fml:q) -> __votes(V__fml:n, N)))) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:recv_vote -> (((forall V120, V0 . (votes(V0, V120) <-> (((V0 = V__fml:n) & (V120 = V__fml:sender)) ? True : __votes(V0, V120)))) & (__curr_phase = phase_recvVote) & __vote_msg(V__fml:sender, V__fml:n)) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:send_request_vote -> (((forall V0, V121 . (vote_request_msg(V0, V121) <-> (((V0 = V__fml:src) & (V121 = V__fml:dst)) ? True : __vote_request_msg(V0, V121)))) & (__curr_phase = phase_sendRequestVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:decide -> (((forall V1, V0 . (decided(V0, V1) <-> (((V0 = V__fml:n) & (V1 = V__fml:v)) ? True : __decided(V0, V1)))) & (__curr_phase = phase_decide) & __leader(V__fml:n) & (forall V . ~__decided(V__fml:n, V))) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))))) & (en_ext:next_phase4 -> (((curr_phase = phase_decide) & (__curr_phase = phase_becomeLeader)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:next_phase3 -> (((curr_phase = phase_becomeLeader) & (__curr_phase = phase_recvVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:next_phase2 -> (((curr_phase = phase_recvVote) & (__curr_phase = phase_sendVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:next_phase1 -> (((curr_phase = phase_sendVote) & (__curr_phase = phase_sendRequestVote)) & (forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_noop -> ((forall 1:node, 2:node . (__votes(1:node, 2:node) <-> votes(1:node, 2:node))) & (forall 1:node . (__leader(1:node) <-> leader(1:node))) & (__curr_phase = curr_phase) & (forall 1:node, 2:node . (__vote_request_msg(1:node, 2:node) <-> vote_request_msg(1:node, 2:node))) & (forall 1:node, 2:node . (__vote_msg(1:node, 2:node) <-> vote_msg(1:node, 2:node))) & (forall 1:node . (__voted(1:node) <-> voted(1:node))) & (forall 1:node, 2:value . (__decided(1:node, 2:value) <-> decided(1:node, 2:value))))) & (en_ext:send_vote | en_ext:become_leader | en_ext:recv_vote | en_ext:send_request_vote | en_ext:decide | en_ext:next_phase4 | en_ext:next_phase3 | en_ext:next_phase2 | en_ext:next_phase1 | en_noop) & (~en_ext:send_vote | ~en_ext:become_leader) & (~en_ext:send_vote | ~en_ext:recv_vote) & (~en_ext:send_vote | ~en_ext:send_request_vote) & (~en_ext:send_vote | ~en_ext:decide) & (~en_ext:send_vote | ~en_ext:next_phase4) & (~en_ext:send_vote | ~en_ext:next_phase3) & (~en_ext:send_vote | ~en_ext:next_phase2) & (~en_ext:send_vote | ~en_ext:next_phase1) & (~en_ext:send_vote | ~en_noop) & (~en_ext:become_leader | ~en_ext:recv_vote) & (~en_ext:become_leader | ~en_ext:send_request_vote) & (~en_ext:become_leader | ~en_ext:decide) & (~en_ext:become_leader | ~en_ext:next_phase4) & (~en_ext:become_leader | ~en_ext:next_phase3) & (~en_ext:become_leader | ~en_ext:next_phase2) & (~en_ext:become_leader | ~en_ext:next_phase1) & (~en_ext:become_leader | ~en_noop) & (~en_ext:recv_vote | ~en_ext:send_request_vote) & (~en_ext:recv_vote | ~en_ext:decide) & (~en_ext:recv_vote | ~en_ext:next_phase4) & (~en_ext:recv_vote | ~en_ext:next_phase3) & (~en_ext:recv_vote | ~en_ext:next_phase2) & (~en_ext:recv_vote | ~en_ext:next_phase1) & (~en_ext:recv_vote | ~en_noop) & (~en_ext:send_request_vote | ~en_ext:decide) & (~en_ext:send_request_vote | ~en_ext:next_phase4) & (~en_ext:send_request_vote | ~en_ext:next_phase3) & (~en_ext:send_request_vote | ~en_ext:next_phase2) & (~en_ext:send_request_vote | ~en_ext:next_phase1) & (~en_ext:send_request_vote | ~en_noop) & (~en_ext:decide | ~en_ext:next_phase4) & (~en_ext:decide | ~en_ext:next_phase3) & (~en_ext:decide | ~en_ext:next_phase2) & (~en_ext:decide | ~en_ext:next_phase1) & (~en_ext:decide | ~en_noop) & (~en_ext:next_phase4 | ~en_ext:next_phase3) & (~en_ext:next_phase4 | ~en_ext:next_phase2) & (~en_ext:next_phase4 | ~en_ext:next_phase1) & (~en_ext:next_phase4 | ~en_noop) & (~en_ext:next_phase3 | ~en_ext:next_phase2) & (~en_ext:next_phase3 | ~en_ext:next_phase1) & (~en_ext:next_phase3 | ~en_noop) & (~en_ext:next_phase2 | ~en_ext:next_phase1) & (~en_ext:next_phase2 | ~en_noop) & (~en_ext:next_phase1 | ~en_noop))
-----------------------------------------------------------------
(enumsort) node <-> node:e0:
	[ NODE0, NODE1, ] <-> [ n0, n1, ]
(enumsort) quorum <-> quorum:e0:
	[ QUORUM0, QUORUM1, ] <-> [ q0, q1, ]
(enumsort) value <-> value:e0:
	[ VALUE0, VALUE1, ] <-> [ v0, v1, ]
	dep_height[q0] = 0
	dep_height[q1] = 1
	dep_height[n0] = 100
	dep_height[n1] = 101
	dep_height[v0] = 200
	dep_height[v1] = 201
(use_wires: False)

Checking property...

@     5s  Storing init values:
@     5s  Init -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(one of the initial states)
	(curr_phase = Q:phase2)
	(phase_becomeLeader = Q:phase3)
	(phase_decide = Q:phase4)
	(phase_recvVote = Q:phase1)
	(phase_sendRequestVote = Q:phase2)
	(phase_sendVote = Q:phase0)
	member(n0, q0)
	member(n0, q1)
	~decided(n0, v0)
	~decided(n0, v1)
	~decided(n1, v0)
	~decided(n1, v1)
	~leader(n0)
	~leader(n1)
	~vote_msg(n0, n0)
	~vote_msg(n0, n1)
	~vote_msg(n1, n0)
	~vote_msg(n1, n1)
	~vote_request_msg(n0, n0)
	~vote_request_msg(n0, n1)
	~vote_request_msg(n1, n0)
	~vote_request_msg(n1, n1)
	~voted(n0)
	~voted(n1)
	~votes(n0, n0)
	~votes(n0, n1)
	~votes(n1, n0)
	~votes(n1, n1)
	~member(n1, q0)
	~member(n1, q1)

@     5s  F[0] /\ !P -> UNSAT
@     5s  F[0] /\ T /\ !P+ -> UNSAT
Frames: #1
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
@     5s  
Adding frame 1...
@     5s  F[1] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[1])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     5s  F[0] /\ T /\ C+ ?
@     5s  	Ans. UNSAT
@     5s  F[1] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4)))
(relations)
	curr_phase:e0
	phase_decide:e0
(cube: std)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e0 = phase_decide:e0)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4)))
(learnt sym-boosted clause)
	~(curr_phase:e0 = phase_decide:e0)
---------------------------
(clause-type: univ)	~(curr_phase = phase_decide)
@     5s  is global clause? No
@     5s  Learning in F[1]: ~(curr_phase = phase_decide)
@     5s  F[1] /\ T /\ !P+ -> UNSAT
Frames: #2
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #1
		~(curr_phase = phase_decide)
@     5s  
Adding frame 2...
Trying forwarding F[1]
@     5s  F[2] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[2])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     5s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     5s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     5s  F[0] /\ T /\ C+ ?
@     5s  	Ans. UNSAT
@     5s  F[1] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(phase_becomeLeader:e0 = Q:phase4)
	(curr_phase:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_becomeLeader:e0 = Q:phase4)))
(relations)
	curr_phase:e0
	phase_becomeLeader:e0
(cube: std)
	(phase_becomeLeader:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_becomeLeader:e0
(cube eq)
	(curr_phase:e0 = phase_becomeLeader:e0)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e0 = phase_becomeLeader:e0)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_becomeLeader:e0 = Q:phase4)))
(learnt sym-boosted clause)
	~(curr_phase:e0 = phase_becomeLeader:e0)
---------------------------
(clause-type: univ)	~(curr_phase = phase_becomeLeader)
@     5s  is global clause? No
@     5s  Learning in F[1]: ~(curr_phase = phase_becomeLeader)
@     5s  F[1] /\ T /\ C+ ?
@     5s  	Ans. UNSAT
@     5s  F[2] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4)))
(relations)
	curr_phase:e0
	phase_decide:e0
(cube: std)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e0 = phase_decide:e0)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4)))
(learnt sym-boosted clause)
	~(curr_phase:e0 = phase_decide:e0)
---------------------------
(clause-type: univ)	~(curr_phase = phase_decide)
@     5s  is global clause? No
@     5s  Learning in F[2]: ~(curr_phase = phase_decide)
@     5s  F[2] /\ T /\ !P+ -> UNSAT
Frames: #3
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #1
		~(curr_phase = phase_becomeLeader)
	F[2]: #1
		~(curr_phase = phase_decide)
@     5s  
Adding frame 3...
Trying forwarding F[1]
Trying forwarding F[2]
@     5s  F[3] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[3])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     5s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     6s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     6s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     6s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     6s  F[0] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[1] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(curr_phase:e0 = Q:phase0)
	(phase_recvVote:e0 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e0 = Q:phase0) | ~(phase_recvVote:e0 = Q:phase0)))
(relations)
	curr_phase:e0
	phase_recvVote:e0
(cube: std)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	(curr_phase:e0 = phase_recvVote:e0)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e0 = phase_recvVote:e0)
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e0 = Q:phase0) | ~(phase_recvVote:e0 = Q:phase0)))
(learnt sym-boosted clause)
	~(curr_phase:e0 = phase_recvVote:e0)
---------------------------
(clause-type: univ)	~(curr_phase = phase_recvVote)
@     6s  is global clause? No
@     6s  Learning in F[1]: ~(curr_phase = phase_recvVote)
@     6s  F[1] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[2] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(phase_becomeLeader:e0 = Q:phase4)
	(curr_phase:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_becomeLeader:e0 = Q:phase4)))
(relations)
	curr_phase:e0
	phase_becomeLeader:e0
(cube: std)
	(phase_becomeLeader:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_becomeLeader:e0
(cube eq)
	(curr_phase:e0 = phase_becomeLeader:e0)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e0 = phase_becomeLeader:e0)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_becomeLeader:e0 = Q:phase4)))
(learnt sym-boosted clause)
	~(curr_phase:e0 = phase_becomeLeader:e0)
---------------------------
(clause-type: univ)	~(curr_phase = phase_becomeLeader)
@     6s  is global clause? No
@     6s  Learning in F[2]: ~(curr_phase = phase_becomeLeader)
@     6s  F[2] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[3] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4)))
(relations)
	curr_phase:e0
	phase_decide:e0
(cube: std)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e0 = phase_decide:e0)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4)))
(learnt sym-boosted clause)
	~(curr_phase:e0 = phase_decide:e0)
---------------------------
(clause-type: univ)	~(curr_phase = phase_decide)
@     6s  is global clause? No
@     6s  Learning in F[3]: ~(curr_phase = phase_decide)
@     6s  F[3] /\ T /\ !P+ -> UNSAT
Frames: #4
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #1
		~(curr_phase = phase_recvVote)
	F[2]: #1
		~(curr_phase = phase_becomeLeader)
	F[3]: #1
		~(curr_phase = phase_decide)
@     6s  
Adding frame 4...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
@     6s  F[4] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[4])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     6s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     6s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     6s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     6s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     6s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@     6s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     6s  F[0] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[1] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@     6s  is global clause? No
@     6s  Learning in F[1]: (forall N0 . ~leader(N0))
@     6s  F[1] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[2] unsat core #1 	(ucsz: 3 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@     6s  is global clause? No
@     6s  Learning in F[2]: (forall N0 . ~leader(N0))
@     6s  F[2] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[3] unsat core #1 	(ucsz: 3 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@     6s  is global clause? No
@     6s  Learning in F[3]: (forall N0 . ~leader(N0))
@     6s  F[3] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[4] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(cube: std)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     6s  is global clause? No
@     6s  Learning in F[4]: (forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     6s  F[4] /\ T /\ !P+ -> UNSAT
Frames: #5
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #1
		~(curr_phase = phase_recvVote)
	F[2]: #1
		~(curr_phase = phase_becomeLeader)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N0 . ~leader(N0))
	F[4]: #1
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     6s  
Adding frame 5...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
@     6s  F[5] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     6s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     6s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     6s  F[3] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[4] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1))
(relations)
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@     6s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@     6s  is global clause? No
@     6s  Learning in F[4]: (forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@     6s  F[4] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[5] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	leader(n1)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~leader(n1)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@     6s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE1)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ leader(NODE1), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ leader(V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #1
	leader(V:node:e0:) -> [ NODE1, NODE0, ]
(partition) #1 node:e0: -> { NODE1, NODE0, | }
	#0 singles, #1 multiples (out of #1 cells)
(boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~leader(n1)))
(learnt sym-boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(clause-type: epr)	((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@     6s  is global clause? No
@     6s  Learning in F[5]: ((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@     6s  F[5] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     6s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     6s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     6s  F[3] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[4] unsat core #4 	(ucsz: 7 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	member(n0, q0)
	member(n0, q1)
	~votes(n0, n0)
(clause)
	(~leader(n0) | ~member(n0, q0) | ~member(n0, q1) | votes(n0, n0))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e0: -> [ QUORUM0, QUORUM1, ]
(cube: std)
	leader(NODE0)
	~votes(NODE0, NODE0)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
(antecedent reduction)
@     6s  antecedent: 2 -> 2

qv2cubes #2
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #2
	QUORUM0 -> [ member(NODE0, V:quorum:e0:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e0:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e0:) -> [ QUORUM0, QUORUM1, ]
(partition) #1 quorum:e0: -> { QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
(non-epr version)
	(forall NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
(epr-reduction) -> UNSAT
(boosted clause)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n0, q0) | ~member(n0, q1) | votes(n0, n0))
(learnt sym-boosted clause)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
---------------------------
(clause-type: epr)	(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     6s  is global clause? Yes
@     6s  Learning in F[5]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     6s  F[4] /\ T /\ C+ ?
@     6s  	Ans. UNSAT
@     6s  F[5] unsat core #4 	(ucsz: 14 -> 12 -> 10 -> 9 -> 4 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	member(n0, q0)
	member(n0, q1)
	~votes(n0, n0)
(clause)
	(~leader(n0) | ~member(n0, q0) | ~member(n0, q1) | votes(n0, n0))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e0: -> [ QUORUM0, QUORUM1, ]
(cube: std)
	leader(NODE0)
	~votes(NODE0, NODE0)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
(antecedent reduction)
@     6s  antecedent: 2 -> 2

qv2cubes #2
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #2
	QUORUM0 -> [ member(NODE0, V:quorum:e0:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e0:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e0:) -> [ QUORUM0, QUORUM1, ]
(partition) #1 quorum:e0: -> { QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
(non-epr version)
	(forall NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
(epr-reduction) -> UNSAT
(boosted clause)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n0, q0) | ~member(n0, q1) | votes(n0, n0))
(learnt sym-boosted clause)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
---------------------------
(clause-type: epr)	(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     6s  is global clause? Yes
@     6s  Learning in F[5]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     6s  F[5] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     6s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     6s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     6s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     6s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     6s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     6s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     6s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@     7s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     7s  F[0] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[1] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n0)
(clause)
	~votes(n0, n0)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(original clause)
	~votes(n0, n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~votes(N0, N0))
@     7s  is global clause? No
@     7s  Learning in F[1]: (forall N0 . ~votes(N0, N0))
@     7s  F[1] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[2] unsat core #1 	(ucsz: 3 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n0)
(clause)
	~votes(n0, n0)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(original clause)
	~votes(n0, n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~votes(N0, N0))
@     7s  is global clause? No
@     7s  Learning in F[2]: (forall N0 . ~votes(N0, N0))
@     7s  F[2] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[3] unsat core #3 	(ucsz: 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	votes(n0, n0)
	(phase_becomeLeader:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_becomeLeader:e0 = Q:phase2) | ~votes(n0, n0)))
(relations)
	votes
	curr_phase:e0
	phase_becomeLeader:e0
(cube: std)
	(phase_becomeLeader:e0 = phase:i0)
	votes(NODE0, NODE0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_becomeLeader:e0
(cube eq)
	(curr_phase:e0 = phase_becomeLeader:e0)
	votes(NODE0, NODE0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~(curr_phase:e0 = phase_becomeLeader:e0) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_becomeLeader:e0 = Q:phase2) | ~votes(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~(curr_phase:e0 = phase_becomeLeader:e0) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N0)))
@     7s  is global clause? No
@     7s  Learning in F[3]: (forall N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N0)))
@     7s  F[3] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[4] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	votes(n0, n0)
(clause)
	(~leader(n0) | ~votes(n0, n0))
(relations)
	votes
	leader
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(~leader(n0) | ~votes(n0, n0))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~votes(N0, N0)))
@     7s  is global clause? No
@     7s  Learning in F[4]: (forall N0 . (leader(N0) -> ~votes(N0, N0)))
@     7s  F[4] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[5] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	votes(n0, n0)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~votes(n0, n0)))
(relations)
	votes
	curr_phase:e0
	leader
	phase_decide:e0
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	votes(NODE0, NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~votes(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> (votes(N0, N0) -> ~(curr_phase = phase_decide))))
@     7s  is global clause? No
@     7s  Learning in F[5]: (forall N0 . (leader(N0) -> (votes(N0, N0) -> ~(curr_phase = phase_decide))))
@     7s  F[5] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     7s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     7s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     7s  F[3] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[4] unsat core #2 	(ucsz: 7 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	~votes(n0, n1)
(clause)
	(~leader(n0) | votes(n0, n1))
(relations)
	votes
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	~votes(NODE0, NODE1)
(antecedent reduction)
@     7s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ ~votes(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ ~votes(NODE0, V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ~votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	~votes(NODE0, V:node:e0:) -> [ NODE1, ]
	(leader(V:node:e0:) & ~votes(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | (NODE0 = NODE1) | votes(NODE0, NODE1)))
---------------------------
(original clause)
	(~leader(n0) | votes(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | (NODE0 = NODE1) | votes(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (leader(N0) -> ((N0 = N1) | votes(N0, N1))))
@     7s  is global clause? No
@     7s  Learning in F[4]: (forall N1, N0 . (leader(N0) -> ((N0 = N1) | votes(N0, N1))))
@     7s  F[4] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[5] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	~votes(n0, n1)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | votes(n0, n1)))
(relations)
	votes
	curr_phase:e0
	leader
	phase_decide:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	~votes(NODE0, NODE1)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@     7s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	~votes(NODE0, NODE1)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ ~votes(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ ~votes(NODE0, V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ~votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	~votes(NODE0, V:node:e0:) -> [ NODE1, ]
	(leader(V:node:e0:) & ~votes(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~leader(NODE0) | (NODE0 = NODE1) | votes(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | votes(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~leader(NODE0) | (NODE0 = NODE1) | votes(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (((curr_phase = phase_decide) & leader(N0)) -> ((N0 = N1) | votes(N0, N1))))
@     7s  is global clause? No
@     7s  Learning in F[5]: (forall N1, N0 . (((curr_phase = phase_decide) & leader(N0)) -> ((N0 = N1) | votes(N0, N1))))
@     7s  F[5] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     7s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     7s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     7s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     7s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     7s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     7s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     7s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@     7s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     7s  F[0] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[1] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n1)
(clause)
	~votes(n0, n1)
(relations)
	votes
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
(antecedent reduction)
@     7s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(original clause)
	~votes(n0, n1)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~votes(N0, N1))
@     7s  is global clause? No
@     7s  Learning in F[1]: (forall N1, N0 . ~votes(N0, N1))
@     7s  F[1] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[2] unsat core #1 	(ucsz: 3 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n1)
(clause)
	~votes(n0, n1)
(relations)
	votes
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
(antecedent reduction)
@     7s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(original clause)
	~votes(n0, n1)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~votes(N0, N1))
@     7s  is global clause? No
@     7s  Learning in F[2]: (forall N1, N0 . ~votes(N0, N1))
@     7s  F[2] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[3] unsat core #3 	(ucsz: 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_becomeLeader:e0 = Q:phase2)
	votes(n0, n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_becomeLeader:e0 = Q:phase2) | ~votes(n0, n1)))
(relations)
	votes
	curr_phase:e0
	phase_becomeLeader:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	(phase_becomeLeader:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@     7s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_becomeLeader:e0
(cube eq)
	votes(NODE0, NODE1)
	(curr_phase:e0 = phase_becomeLeader:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	votes(NODE0, V:node:e0:) -> [ NODE1, ]
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_becomeLeader:e0) | ~votes(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_becomeLeader:e0 = Q:phase2) | ~votes(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_becomeLeader:e0) | ~votes(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
@     7s  is global clause? No
@     7s  Learning in F[3]: (forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
@     7s  F[3] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[4] unsat core #1 	(ucsz: 4 -> 2 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@     7s  is global clause? No
@     7s  Learning in F[4]: (forall N0 . ~leader(N0))
@     7s  F[4] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[5] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(cube: std)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     7s  is global clause? No
@     7s  Learning in F[5]: (forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     7s  F[5] /\ T /\ !P+ -> UNSAT
Frames: #6
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #1
		~(curr_phase = phase_recvVote)
	F[2]: #2
		~(curr_phase = phase_becomeLeader)
		(forall N1, N0 . ~votes(N0, N1))
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
	F[4]: #1
		(forall N0 . ~leader(N0))
	F[5]: #2
		(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     7s  
Adding frame 6...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Forwarded #1 to F[6]
@     7s  Learning in F[6]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     7s  Learning in F[6]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     7s  F[6] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     7s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     7s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     7s  F[4] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[5] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	~votes(n0, n1)
	member(n1, q0)
	member(n1, q1)
(clause)
	(~leader(n0) | ~member(n1, q0) | ~member(n1, q1) | votes(n0, n1))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e0: -> [ QUORUM0, QUORUM1, ]
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	~votes(NODE0, NODE1)
	member(NODE1, QUORUM1)
	member(NODE1, QUORUM0)
(antecedent reduction)
@     7s  antecedent: 4 -> 2 (reduced)
	removed: NODE1
	removed: NODE0

qv2cubes #2
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE1, QUORUM1), ]
qv2ucubes #2
	QUORUM0 -> [ member(NODE1, V:quorum:e0:), ]
	QUORUM1 -> [ member(NODE1, V:quorum:e0:), ]
ucubes2qv #1
	member(NODE1, V:quorum:e0:) -> [ QUORUM0, QUORUM1, ]
(partition) #1 quorum:e0: -> { QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
qv2cubes #2
	NODE1 -> [ ~votes(NODE0, NODE1), member(NODE1, QUORUM0), ]
	NODE0 -> [ leader(NODE0), ~votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ member(V:node:e0:, QUORUM0), ~votes(NODE0, V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ~votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(member(V:node:e0:, QUORUM0) & ~votes(NODE0, V:node:e0:)) -> [ NODE1, ]
	(leader(V:node:e0:) & ~votes(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
(non-epr version)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
(epr-reduction) -> UNSAT
(boosted clause)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n1, q0) | ~member(n1, q1) | votes(n0, n1))
(learnt sym-boosted clause)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
---------------------------
(clause-type: epr)	(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     7s  is global clause? Yes
@     7s  Learning in F[6]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     7s  F[5] /\ T /\ C+ ?
@     7s  	Ans. UNSAT
@     7s  F[6] unsat core #4 	(ucsz: 8 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	~votes(n0, n1)
	member(n1, q0)
	member(n1, q1)
(clause)
	(~leader(n0) | ~member(n1, q0) | ~member(n1, q1) | votes(n0, n1))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e0: -> [ QUORUM0, QUORUM1, ]
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	~votes(NODE0, NODE1)
	member(NODE1, QUORUM1)
	member(NODE1, QUORUM0)
(antecedent reduction)
@     7s  antecedent: 4 -> 2 (reduced)
	removed: NODE1
	removed: NODE0

qv2cubes #2
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE1, QUORUM1), ]
qv2ucubes #2
	QUORUM0 -> [ member(NODE1, V:quorum:e0:), ]
	QUORUM1 -> [ member(NODE1, V:quorum:e0:), ]
ucubes2qv #1
	member(NODE1, V:quorum:e0:) -> [ QUORUM0, QUORUM1, ]
(partition) #1 quorum:e0: -> { QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
qv2cubes #2
	NODE1 -> [ ~votes(NODE0, NODE1), member(NODE1, QUORUM0), ]
	NODE0 -> [ leader(NODE0), ~votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ member(V:node:e0:, QUORUM0), ~votes(NODE0, V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ~votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(member(V:node:e0:, QUORUM0) & ~votes(NODE0, V:node:e0:)) -> [ NODE1, ]
	(leader(V:node:e0:) & ~votes(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
(non-epr version)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
(epr-reduction) -> UNSAT
(boosted clause)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n1, q0) | ~member(n1, q1) | votes(n0, n1))
(learnt sym-boosted clause)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE1))))
---------------------------
(clause-type: epr)	(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     8s  is global clause? Yes
@     8s  Learning in F[6]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     8s  F[6] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     8s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     8s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     8s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     8s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     8s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[2] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[3] unsat core #2 	(ucsz: 8 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	~vote_msg(n1, n0)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_msg(NODE1, NODE0)
(antecedent reduction)
@     8s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE1, V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_msg(V:node:e0:, NODE0)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_msg(NODE1, V:node:e0:)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  is global clause? Yes
@     8s  Learning in F[6]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  F[3] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[4] unsat core #2 	(ucsz: 10 -> 8 -> 6 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	~vote_msg(n1, n0)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_msg(NODE1, NODE0)
(antecedent reduction)
@     8s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE1, V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_msg(V:node:e0:, NODE0)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_msg(NODE1, V:node:e0:)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  is global clause? Yes
@     8s  Learning in F[6]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  F[4] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[5] unsat core #2 	(ucsz: 5 -> 3 -> 2 -> 2)
(minimal unsat core)
	~vote_msg(n1, n0)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_msg(NODE1, NODE0)
(antecedent reduction)
@     8s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE1, V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_msg(V:node:e0:, NODE0)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_msg(NODE1, V:node:e0:)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  is global clause? Yes
@     8s  Learning in F[6]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  F[5] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[6] unsat core #2 	(ucsz: 9 -> 7 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	~vote_msg(n1, n0)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_msg(NODE1, NODE0)
(antecedent reduction)
@     8s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE1, V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_msg(V:node:e0:, NODE0)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_msg(NODE1, V:node:e0:)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(~votes(n0, n1) | vote_msg(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  is global clause? Yes
@     8s  Learning in F[6]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     8s  F[6] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     8s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     8s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     8s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     8s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     8s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n0
		V__fml:n -> n0
@     8s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false			--> modified
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@     8s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[0] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[1] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	vote_msg(n0, n0)
(clause)
	~vote_msg(n0, n0)
(relations)
	vote_msg
(cube: std)
	vote_msg(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~vote_msg(NODE0, NODE0))
---------------------------
(original clause)
	~vote_msg(n0, n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~vote_msg(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~vote_msg(N0, N0))
@     8s  is global clause? No
@     8s  Learning in F[1]: (forall N0 . ~vote_msg(N0, N0))
@     8s  F[1] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[2] unsat core #3 	(ucsz: 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase2)
	vote_msg(n0, n0)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n0, n0)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
(cube: std)
	vote_msg(NODE0, NODE0)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	vote_msg(NODE0, NODE0)
	(curr_phase:e0 = phase_recvVote:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~vote_msg(NODE0, NODE0) | ~(curr_phase:e0 = phase_recvVote:e0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~vote_msg(NODE0, NODE0) | ~(curr_phase:e0 = phase_recvVote:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (vote_msg(N0, N0) -> ~(curr_phase = phase_recvVote)))
@     8s  is global clause? No
@     8s  Learning in F[2]: (forall N0 . (vote_msg(N0, N0) -> ~(curr_phase = phase_recvVote)))
@     8s  F[2] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[3] unsat core #1 	(ucsz: 6 -> 2 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n0)
(clause)
	~votes(n0, n0)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(original clause)
	~votes(n0, n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~votes(N0, N0))
@     8s  is global clause? No
@     8s  Learning in F[3]: (forall N0 . ~votes(N0, N0))
@     8s  F[3] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[4] unsat core #4 	(ucsz: 5 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase0)
	~(Q:phase0 = Q:phase2)
	votes(n0, n0)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n0) | (Q:phase0 = Q:phase2)))
(relations)
	votes
	phase_recvVote:e0
	curr_phase:e0
(cube: std)
	votes(NODE0, NODE0)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	~(phase:i1 = phase:i0)

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	~(phase_recvVote:e0 = curr_phase:e0)
	votes(NODE0, NODE0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . ((phase_recvVote:e0 = curr_phase:e0) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n0) | (Q:phase0 = Q:phase2)))
(learnt sym-boosted clause)
	(forall NODE0 . ((phase_recvVote:e0 = curr_phase:e0) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
@     8s  is global clause? No
@     8s  Learning in F[4]: (forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
@     8s  F[4] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[5] unsat core #2 	(ucsz: 8 -> 6 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	votes(n0, n0)
(clause)
	(~leader(n0) | ~votes(n0, n0))
(relations)
	votes
	leader
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(~leader(n0) | ~votes(n0, n0))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~votes(N0, N0)))
@     8s  is global clause? No
@     8s  Learning in F[5]: (forall N0 . (leader(N0) -> ~votes(N0, N0)))
@     8s  F[5] /\ T /\ C+ ?
@     8s  	Ans. UNSAT
@     8s  F[6] unsat core #4 	(ucsz: 13 -> 10 -> 8 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	votes(n0, n0)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~votes(n0, n0)))
(relations)
	votes
	curr_phase:e0
	leader
	phase_decide:e0
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	votes(NODE0, NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~votes(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> (votes(N0, N0) -> ~(curr_phase = phase_decide))))
@     8s  is global clause? No
@     8s  Learning in F[6]: (forall N0 . (leader(N0) -> (votes(N0, N0) -> ~(curr_phase = phase_decide))))
@     8s  F[6] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     8s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     8s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     8s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     8s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     8s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@     8s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@     8s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     8s  F[0] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[1] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	vote_msg(n1, n0)
(clause)
	~vote_msg(n1, n0)
(relations)
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~vote_msg(NODE1, NODE0))
---------------------------
(original clause)
	~vote_msg(n1, n0)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~vote_msg(NODE1, NODE0))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~vote_msg(N1, N0))
@     9s  is global clause? No
@     9s  Learning in F[1]: (forall N1, N0 . ~vote_msg(N1, N0))
@     9s  F[1] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[2] unsat core #3 	(ucsz: 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	vote_msg(n1, n0)
	(phase_recvVote:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	(curr_phase:e0 = phase_recvVote:e0)
	vote_msg(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	vote_msg(V:node:e0:, NODE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
@     9s  is global clause? No
@     9s  Learning in F[2]: (forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
@     9s  F[2] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[3] unsat core #1 	(ucsz: 5 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n1)
(clause)
	~votes(n0, n1)
(relations)
	votes
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(original clause)
	~votes(n0, n1)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~votes(N0, N1))
@     9s  is global clause? No
@     9s  Learning in F[3]: (forall N1, N0 . ~votes(N0, N1))
@     9s  F[3] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[4] unsat core #4 	(ucsz: 5 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase0)
	~(Q:phase0 = Q:phase2)
	votes(n0, n1)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | (Q:phase0 = Q:phase2)))
(relations)
	votes
	phase_recvVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	~(phase:i1 = phase:i0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	votes(NODE0, NODE1)
	~(phase_recvVote:e0 = curr_phase:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	votes(NODE0, V:node:e0:) -> [ NODE1, ]
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | (Q:phase0 = Q:phase2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> (phase_recvVote = curr_phase)))
@     9s  is global clause? No
@     9s  Learning in F[4]: (forall N1, N0 . (votes(N0, N1) -> (phase_recvVote = curr_phase)))
@     9s  F[4] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[5] unsat core #1 	(ucsz: 8 -> 5 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@     9s  is global clause? No
@     9s  Learning in F[5]: (forall N0 . ~leader(N0))
@     9s  F[5] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[6] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(cube: std)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     9s  is global clause? No
@     9s  Learning in F[6]: (forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@     9s  F[6] /\ T /\ !P+ -> UNSAT
Frames: #7
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
		~(curr_phase = phase_becomeLeader)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ~votes(N0, N1))
	F[4]: #1
		(forall N1, N0 . (votes(N0, N1) -> (phase_recvVote = curr_phase)))
	F[5]: #1
		(forall N0 . ~leader(N0))
	F[6]: #3
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     9s  
Adding frame 7...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Forwarded #2 to F[7]
@     9s  Learning in F[7]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     9s  Learning in F[7]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     9s  Learning in F[7]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@     9s  Learning in F[7]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@     9s  Learning in F[7]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@     9s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[7])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     9s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     9s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     9s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     9s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     9s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     9s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     9s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@     9s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     9s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@     9s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     9s  F[1] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[2] unsat core #2 	(ucsz: 7 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	~voted(n1)
(clause)
	(~vote_msg(n1, n0) | voted(n1))
(relations)
	voted
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~voted(NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ ~voted(NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~voted(V:node:e0:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	(vote_msg(V:node:e0:, NODE0) & ~voted(V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | voted(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  is global clause? Yes
@     9s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  F[2] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[3] unsat core #2 	(ucsz: 10 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	~voted(n1)
(clause)
	(~vote_msg(n1, n0) | voted(n1))
(relations)
	voted
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~voted(NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ ~voted(NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~voted(V:node:e0:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	(vote_msg(V:node:e0:, NODE0) & ~voted(V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | voted(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  is global clause? Yes
@     9s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  F[3] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[4] unsat core #2 	(ucsz: 9 -> 8 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	~voted(n1)
(clause)
	(~vote_msg(n1, n0) | voted(n1))
(relations)
	voted
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~voted(NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ ~voted(NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~voted(V:node:e0:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	(vote_msg(V:node:e0:, NODE0) & ~voted(V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | voted(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  is global clause? Yes
@     9s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  F[4] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[5] unsat core #2 	(ucsz: 9 -> 6 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	~voted(n1)
(clause)
	(~vote_msg(n1, n0) | voted(n1))
(relations)
	voted
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~voted(NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ ~voted(NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~voted(V:node:e0:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	(vote_msg(V:node:e0:, NODE0) & ~voted(V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | voted(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  is global clause? Yes
@     9s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  F[5] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[6] unsat core #2 	(ucsz: 5 -> 3 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	~voted(n1)
(clause)
	(~vote_msg(n1, n0) | voted(n1))
(relations)
	voted
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~voted(NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ ~voted(NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~voted(V:node:e0:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	(vote_msg(V:node:e0:, NODE0) & ~voted(V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | voted(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | voted(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  is global clause? Yes
@     9s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@     9s  F[6] /\ T /\ C+ ?
@     9s  	Ans. UNSAT
@     9s  F[7] unsat core #2 	(ucsz: 10 -> 8 -> 6 -> 4 -> 2 -> 2)
(minimal unsat core)
	~voted(n1)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | voted(n1))
(relations)
	votes
	voted
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~voted(NODE1)
(antecedent reduction)
@     9s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~voted(NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~voted(V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~voted(V:node:e0:)) -> [ NODE1, ]
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | voted(NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | voted(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | voted(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@     9s  is global clause? No
@     9s  Learning in F[7]: (forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@     9s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[7])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@     9s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@     9s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@     9s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@     9s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     9s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@     9s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@     9s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n0
		V__fml:n -> n0
@     9s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = false			--> modified
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    10s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    10s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    10s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:send_vote
	en: en_ext:send_vote:e0 with value True
	inputs:
actionName ext:send_vote
		V__fml:src -> n0
		V__fml:dst -> n0
@    10s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false			--> modified
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true			--> modified
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false			--> modified
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase1 versus Q:phase2
	phase_recvVote = Q:phase1
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase3 versus Q:phase1
	phase_sendRequestVote = Q:phase3
	Conflicting assignment in global condition for phase_sendVote: Q:phase2 versus Q:phase3
	phase_sendVote = Q:phase2

@    10s  F[0] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[1] unsat core #4 	(ucsz: 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~(Q:phase2 = Q:phase3)
	(phase_sendRequestVote:e0 = Q:phase3)
	vote_request_msg(n0, n0)
(clause)
	(forall Q:phase2, Q:phase3 . (~(curr_phase:e0 = Q:phase2) | ~(phase_sendRequestVote:e0 = Q:phase3) | ~vote_request_msg(n0, n0) | (Q:phase2 = Q:phase3)))
(relations)
	vote_request_msg
	phase_sendRequestVote:e0
	curr_phase:e0
(cube: std)
	~(phase:i0 = phase:i1)
	vote_request_msg(NODE0, NODE0)
	(phase_sendRequestVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i1 -> phase_sendRequestVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	vote_request_msg(NODE0, NODE0)
	~(curr_phase:e0 = phase_sendRequestVote:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~vote_request_msg(NODE0, NODE0) | (curr_phase:e0 = phase_sendRequestVote:e0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase3 . (~(curr_phase:e0 = Q:phase2) | ~(phase_sendRequestVote:e0 = Q:phase3) | ~vote_request_msg(n0, n0) | (Q:phase2 = Q:phase3)))
(learnt sym-boosted clause)
	(forall NODE0 . (~vote_request_msg(NODE0, NODE0) | (curr_phase:e0 = phase_sendRequestVote:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (vote_request_msg(N0, N0) -> (curr_phase = phase_sendRequestVote)))
@    10s  is global clause? No
@    10s  Learning in F[1]: (forall N0 . (vote_request_msg(N0, N0) -> (curr_phase = phase_sendRequestVote)))
@    10s  F[1] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[2] unsat core #1 	(ucsz: 6 -> 4 -> 1 -> 1)
(minimal unsat core)
	vote_msg(n0, n0)
(clause)
	~vote_msg(n0, n0)
(relations)
	vote_msg
(cube: std)
	vote_msg(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~vote_msg(NODE0, NODE0))
---------------------------
(original clause)
	~vote_msg(n0, n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~vote_msg(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~vote_msg(N0, N0))
@    10s  is global clause? No
@    10s  Learning in F[2]: (forall N0 . ~vote_msg(N0, N0))
@    10s  F[2] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[3] unsat core #3 	(ucsz: 7 -> 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase2)
	vote_msg(n0, n0)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n0, n0)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
(cube: std)
	vote_msg(NODE0, NODE0)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	vote_msg(NODE0, NODE0)
	(curr_phase:e0 = phase_recvVote:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~vote_msg(NODE0, NODE0) | ~(curr_phase:e0 = phase_recvVote:e0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~vote_msg(NODE0, NODE0) | ~(curr_phase:e0 = phase_recvVote:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (vote_msg(N0, N0) -> ~(curr_phase = phase_recvVote)))
@    10s  is global clause? No
@    10s  Learning in F[3]: (forall N0 . (vote_msg(N0, N0) -> ~(curr_phase = phase_recvVote)))
@    10s  F[3] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[4] unsat core #1 	(ucsz: 8 -> 2 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n0)
(clause)
	~votes(n0, n0)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(original clause)
	~votes(n0, n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~votes(N0, N0))
@    10s  is global clause? No
@    10s  Learning in F[4]: (forall N0 . ~votes(N0, N0))
@    10s  F[4] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[5] unsat core #4 	(ucsz: 5 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase0)
	~(Q:phase0 = Q:phase2)
	votes(n0, n0)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n0) | (Q:phase0 = Q:phase2)))
(relations)
	votes
	phase_recvVote:e0
	curr_phase:e0
(cube: std)
	votes(NODE0, NODE0)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	~(phase:i1 = phase:i0)

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	~(phase_recvVote:e0 = curr_phase:e0)
	votes(NODE0, NODE0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . ((phase_recvVote:e0 = curr_phase:e0) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n0) | (Q:phase0 = Q:phase2)))
(learnt sym-boosted clause)
	(forall NODE0 . ((phase_recvVote:e0 = curr_phase:e0) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
@    10s  is global clause? No
@    10s  Learning in F[5]: (forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
@    10s  F[5] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[6] unsat core #2 	(ucsz: 12 -> 10 -> 9 -> 7 -> 2 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	votes(n0, n0)
(clause)
	(~leader(n0) | ~votes(n0, n0))
(relations)
	votes
	leader
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(~leader(n0) | ~votes(n0, n0))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~votes(N0, N0)))
@    10s  is global clause? No
@    10s  Learning in F[6]: (forall N0 . (leader(N0) -> ~votes(N0, N0)))
@    10s  F[6] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[7] unsat core #4 	(ucsz: 12 -> 6 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	votes(n0, n0)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~votes(n0, n0)))
(relations)
	votes
	curr_phase:e0
	leader
	phase_decide:e0
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	votes(NODE0, NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~votes(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> (votes(N0, N0) -> ~(curr_phase = phase_decide))))
@    10s  is global clause? No
@    10s  Learning in F[7]: (forall N0 . (leader(N0) -> (votes(N0, N0) -> ~(curr_phase = phase_decide))))
@    10s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[7])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    10s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    10s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    10s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    10s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    10s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    10s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    10s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@    10s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    10s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    10s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    10s  F[1] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[2] unsat core #2 	(ucsz: 7 -> 4 -> 3 -> 2 -> 2)
(minimal unsat core)
	~vote_request_msg(n0, n1)
	vote_msg(n1, n0)
(clause)
	(~vote_msg(n1, n0) | vote_request_msg(n0, n1))
(relations)
	vote_request_msg
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    10s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	(vote_msg(V:node:e0:, NODE0) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> vote_request_msg(N0, N1)))
@    10s  is global clause? No
@    10s  Learning in F[2]: (forall N1, N0 . (vote_msg(N1, N0) -> vote_request_msg(N0, N1)))
@    10s  F[2] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[3] unsat core #4 	(ucsz: 8 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	vote_msg(n1, n0)
	(phase_recvVote:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	~vote_request_msg(NODE0, NODE1)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    10s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	(curr_phase:e0 = phase_recvVote:e0)
	vote_msg(NODE1, NODE0)
	~vote_request_msg(NODE0, NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ ~vote_request_msg(NODE0, NODE1), vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, V:node:e0:), vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ~vote_request_msg(V:node:e0:, NODE1), ]
ucubes2qv #2
	(vote_msg(V:node:e0:, NODE0) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> vote_request_msg(N0, N1)))
@    10s  is global clause? No
@    10s  Learning in F[3]: (forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> vote_request_msg(N0, N1)))
@    10s  F[3] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[4] unsat core #2 	(ucsz: 8 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	~vote_request_msg(n0, n1)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
(antecedent reduction)
@    10s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> vote_request_msg(N0, N1)))
@    10s  is global clause? No
@    10s  Learning in F[4]: (forall N1, N0 . (votes(N0, N1) -> vote_request_msg(N0, N1)))
@    10s  F[4] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[5] unsat core #5 	(ucsz: 12 -> 8 -> 7 -> 5 -> 5)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	(phase_recvVote:e0 = Q:phase0)
	~(Q:phase0 = Q:phase2)
	votes(n0, n1)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(relations)
	votes
	vote_request_msg
	phase_recvVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	~(phase:i1 = phase:i0)
(antecedent reduction)
@    10s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
	~(phase_recvVote:e0 = curr_phase:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    10s  is global clause? No
@    10s  Learning in F[5]: (forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    10s  F[5] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[6] unsat core #2 	(ucsz: 7 -> 6 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	~vote_request_msg(n0, n1)
(clause)
	(~leader(n0) | vote_request_msg(n0, n1))
(relations)
	leader
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	~vote_request_msg(NODE0, NODE1)
(antecedent reduction)
@    10s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), leader(V:node:e0:), ]
ucubes2qv #2
	(leader(V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
	~vote_request_msg(NODE0, V:node:e0:) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~leader(n0) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (leader(N0) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    10s  is global clause? No
@    10s  Learning in F[6]: (forall N1, N0 . (leader(N0) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    10s  F[6] /\ T /\ C+ ?
@    10s  	Ans. UNSAT
@    10s  F[7] unsat core #4 	(ucsz: 12 -> 10 -> 8 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	~vote_request_msg(n0, n1)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | vote_request_msg(n0, n1)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	~vote_request_msg(NODE0, NODE1)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    10s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	~vote_request_msg(NODE0, NODE1)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), leader(V:node:e0:), ]
ucubes2qv #2
	(leader(V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
	~vote_request_msg(NODE0, V:node:e0:) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~leader(NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~leader(NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (((curr_phase = phase_decide) & leader(N0)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    10s  is global clause? No
@    10s  Learning in F[7]: (forall N1, N0 . (((curr_phase = phase_decide) & leader(N0)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    10s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[7])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    10s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    10s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    11s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    11s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    11s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@    11s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    11s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[1] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[2] unsat core #2 	(ucsz: 8 -> 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	vote_request_msg(n0, n0)
(clause)
	(~vote_msg(n1, n0) | ~vote_request_msg(n0, n0))
(relations)
	vote_request_msg
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_request_msg(NODE0, NODE0)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_request_msg(NODE0, NODE0), vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), vote_request_msg(V:node:e0:, V:node:e0:), ]
ucubes2qv #2
	(vote_msg(NODE1, V:node:e0:) & vote_request_msg(V:node:e0:, V:node:e0:)) -> [ NODE0, ]
	vote_msg(V:node:e0:, NODE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_request_msg(n0, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> ~vote_request_msg(N0, N0)))
@    11s  is global clause? No
@    11s  Learning in F[2]: (forall N1, N0 . (vote_msg(N1, N0) -> ~vote_request_msg(N0, N0)))
@    11s  F[2] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[3] unsat core #4 	(ucsz: 8 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	vote_msg(n1, n0)
	(phase_recvVote:e0 = Q:phase2)
	vote_request_msg(n0, n0)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0) | ~vote_request_msg(n0, n0)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_request_msg(NODE0, NODE0)
	vote_msg(NODE1, NODE0)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	vote_request_msg(NODE0, NODE0)
	(curr_phase:e0 = phase_recvVote:e0)
	vote_msg(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_request_msg(NODE0, NODE0), vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), vote_request_msg(V:node:e0:, V:node:e0:), ]
ucubes2qv #2
	(vote_msg(NODE1, V:node:e0:) & vote_request_msg(V:node:e0:, V:node:e0:)) -> [ NODE0, ]
	vote_msg(V:node:e0:, NODE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0) | ~vote_request_msg(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((curr_phase = phase_recvVote) -> (vote_msg(N1, N0) -> ~vote_request_msg(N0, N0))))
@    11s  is global clause? No
@    11s  Learning in F[3]: (forall N1, N0 . ((curr_phase = phase_recvVote) -> (vote_msg(N1, N0) -> ~vote_request_msg(N0, N0))))
@    11s  F[3] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[4] unsat core #2 	(ucsz: 8 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_request_msg(n0, n0)
	votes(n0, n1)
(clause)
	(~vote_request_msg(n0, n0) | ~votes(n0, n1))
(relations)
	votes
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_request_msg(NODE0, NODE0)
	votes(NODE0, NODE1)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ]
	NODE0 -> [ vote_request_msg(NODE0, NODE0), votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), vote_request_msg(V:node:e0:, V:node:e0:), ]
ucubes2qv #2
	votes(NODE0, V:node:e0:) -> [ NODE1, ]
	(vote_request_msg(V:node:e0:, V:node:e0:) & votes(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_request_msg(NODE0, NODE0) | ~votes(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_request_msg(n0, n0) | ~votes(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_request_msg(NODE0, NODE0) | ~votes(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_request_msg(N0, N0) -> ~votes(N0, N1)))
@    11s  is global clause? No
@    11s  Learning in F[4]: (forall N1, N0 . (vote_request_msg(N0, N0) -> ~votes(N0, N1)))
@    11s  F[4] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[5] unsat core #5 	(ucsz: 8 -> 7 -> 5 -> 5)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~(Q:phase0 = Q:phase2)
	vote_request_msg(n0, n0)
	(phase_recvVote:e0 = Q:phase0)
	votes(n0, n1)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~vote_request_msg(n0, n0) | ~votes(n0, n1) | (Q:phase0 = Q:phase2)))
(relations)
	votes
	vote_request_msg
	phase_recvVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_request_msg(NODE0, NODE0)
	~(phase:i1 = phase:i0)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	votes(NODE0, NODE1)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	vote_request_msg(NODE0, NODE0)
	votes(NODE0, NODE1)
	~(phase_recvVote:e0 = curr_phase:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ]
	NODE0 -> [ vote_request_msg(NODE0, NODE0), votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), vote_request_msg(V:node:e0:, V:node:e0:), ]
ucubes2qv #2
	votes(NODE0, V:node:e0:) -> [ NODE1, ]
	(vote_request_msg(V:node:e0:, V:node:e0:) & votes(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_request_msg(NODE0, NODE0) | ~votes(NODE0, NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~vote_request_msg(n0, n0) | ~votes(n0, n1) | (Q:phase0 = Q:phase2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_request_msg(NODE0, NODE0) | ~votes(NODE0, NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
@    11s  is global clause? No
@    11s  Learning in F[5]: (forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
@    11s  F[5] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[6] unsat core #2 	(ucsz: 7 -> 6 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	vote_request_msg(n0, n0)
(clause)
	(~leader(n0) | ~vote_request_msg(n0, n0))
(relations)
	leader
	vote_request_msg
(cube: std)
	leader(NODE0)
	vote_request_msg(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(original clause)
	(~leader(n0) | ~vote_request_msg(n0, n0))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~vote_request_msg(N0, N0)))
@    11s  is global clause? No
@    11s  Learning in F[6]: (forall N0 . (leader(N0) -> ~vote_request_msg(N0, N0)))
@    11s  F[6] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[7] unsat core #4 	(ucsz: 13 -> 10 -> 8 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	vote_request_msg(n0, n0)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~vote_request_msg(n0, n0)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
	vote_request_msg
(cube: std)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
	vote_request_msg(NODE0, NODE0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
	vote_request_msg(NODE0, NODE0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0) | ~vote_request_msg(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0) | ~vote_request_msg(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ((curr_phase = phase_decide) -> ~vote_request_msg(N0, N0))))
@    11s  is global clause? No
@    11s  Learning in F[7]: (forall N0 . (leader(N0) -> ((curr_phase = phase_decide) -> ~vote_request_msg(N0, N0))))
@    11s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[7])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    11s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    11s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    11s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    11s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    11s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@    11s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    11s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    11s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:send_vote
	en: en_ext:send_vote:e0 with value True
	inputs:
actionName ext:send_vote
		V__fml:src -> n1
		V__fml:dst -> n0
@    11s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false			--> modified
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false			--> modified
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase1 versus Q:phase2
	phase_recvVote = Q:phase1
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase3 versus Q:phase1
	phase_sendRequestVote = Q:phase3
	Conflicting assignment in global condition for phase_sendVote: Q:phase2 versus Q:phase3
	phase_sendVote = Q:phase2

@    11s  F[0] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[1] unsat core #4 	(ucsz: 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~(Q:phase2 = Q:phase3)
	(phase_sendRequestVote:e0 = Q:phase3)
	vote_request_msg(n0, n1)
(clause)
	(forall Q:phase2, Q:phase3 . (~(curr_phase:e0 = Q:phase2) | ~(phase_sendRequestVote:e0 = Q:phase3) | ~vote_request_msg(n0, n1) | (Q:phase2 = Q:phase3)))
(relations)
	vote_request_msg
	phase_sendRequestVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~(phase:i0 = phase:i1)
	(phase_sendRequestVote:e0 = phase:i1)
	vote_request_msg(NODE0, NODE1)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i1 -> phase_sendRequestVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	~(curr_phase:e0 = phase_sendRequestVote:e0)
	vote_request_msg(NODE0, NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ vote_request_msg(V:node:e0:, NODE1), ]
ucubes2qv #2
	vote_request_msg(NODE0, V:node:e0:) -> [ NODE1, ]
	vote_request_msg(V:node:e0:, NODE1) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_request_msg(NODE0, NODE1) | (curr_phase:e0 = phase_sendRequestVote:e0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase3 . (~(curr_phase:e0 = Q:phase2) | ~(phase_sendRequestVote:e0 = Q:phase3) | ~vote_request_msg(n0, n1) | (Q:phase2 = Q:phase3)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_request_msg(NODE0, NODE1) | (curr_phase:e0 = phase_sendRequestVote:e0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
@    11s  is global clause? No
@    11s  Learning in F[1]: (forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
@    11s  F[1] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[2] unsat core #1 	(ucsz: 6 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	vote_msg(n1, n0)
(clause)
	~vote_msg(n1, n0)
(relations)
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~vote_msg(NODE1, NODE0))
---------------------------
(original clause)
	~vote_msg(n1, n0)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~vote_msg(NODE1, NODE0))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~vote_msg(N1, N0))
@    11s  is global clause? No
@    11s  Learning in F[2]: (forall N1, N0 . ~vote_msg(N1, N0))
@    11s  F[2] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[3] unsat core #3 	(ucsz: 7 -> 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	vote_msg(n1, n0)
	(phase_recvVote:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	(curr_phase:e0 = phase_recvVote:e0)
	vote_msg(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ vote_msg(NODE1, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	vote_msg(NODE1, V:node:e0:) -> [ NODE0, ]
	vote_msg(V:node:e0:, NODE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
@    11s  is global clause? No
@    11s  Learning in F[3]: (forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
@    11s  F[3] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[4] unsat core #1 	(ucsz: 8 -> 7 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n1)
(clause)
	~votes(n0, n1)
(relations)
	votes
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(original clause)
	~votes(n0, n1)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~votes(N0, N1))
@    11s  is global clause? No
@    11s  Learning in F[4]: (forall N1, N0 . ~votes(N0, N1))
@    11s  F[4] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    11s  F[5] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	(phase_becomeLeader:e0 = Q:phase2)
	votes(n0, n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_becomeLeader:e0 = Q:phase2) | ~votes(n0, n1)))
(relations)
	votes
	curr_phase:e0
	phase_becomeLeader:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	(phase_becomeLeader:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    11s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_becomeLeader:e0
(cube eq)
	votes(NODE0, NODE1)
	(curr_phase:e0 = phase_becomeLeader:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	votes(NODE0, V:node:e0:) -> [ NODE1, ]
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_becomeLeader:e0) | ~votes(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_becomeLeader:e0 = Q:phase2) | ~votes(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_becomeLeader:e0) | ~votes(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
@    11s  is global clause? No
@    11s  Learning in F[5]: (forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
@    11s  F[5] /\ T /\ C+ ?
@    11s  	Ans. UNSAT
@    12s  F[6] unsat core #1 	(ucsz: 6 -> 5 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@    12s  is global clause? No
@    12s  Learning in F[6]: (forall N0 . ~leader(N0))
@    12s  F[6] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[7] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	leader(n0)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(cube: std)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~leader(n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~leader(NODE0) | ~(curr_phase:e0 = phase_decide:e0)))
---------------------------
(clause-type: univ)	(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@    12s  is global clause? No
@    12s  Learning in F[7]: (forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
@    12s  F[7] /\ T /\ !P+ -> UNSAT
Frames: #8
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
	F[2]: #2
		(forall N1, N0 . ~vote_msg(N1, N0))
		~(curr_phase = phase_becomeLeader)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
	F[4]: #1
		(forall N1, N0 . ~votes(N0, N1))
	F[5]: #4
		(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
		(forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
		(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
		(forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
	F[6]: #1
		(forall N0 . ~leader(N0))
	F[7]: #6
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    12s  
Adding frame 8...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Trying forwarding F[7]
Forwarded #5 to F[8]
@    12s  Learning in F[8]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    12s  Learning in F[8]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    12s  Learning in F[8]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    12s  Learning in F[8]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    12s  Learning in F[8]: (forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    12s  Learning in F[8]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    12s  Learning in F[8]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    12s  Learning in F[8]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    12s  Learning in F[8]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    12s  F[8] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[8])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    12s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    12s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    12s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    12s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    12s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    12s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    12s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n0
		V__fml:n -> n0
@    12s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = false			--> modified
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    12s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    12s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    12s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:send_vote
	en: en_ext:send_vote:e0 with value True
	inputs:
actionName ext:send_vote
		V__fml:src -> n0
		V__fml:dst -> n0
@    12s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false			--> modified
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true			--> modified
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false			--> modified
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase1 versus Q:phase2
	phase_recvVote = Q:phase1
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase3 versus Q:phase1
	phase_sendRequestVote = Q:phase3
	Conflicting assignment in global condition for phase_sendVote: Q:phase2 versus Q:phase3
	phase_sendVote = Q:phase2

@    12s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase1
	en: en_ext:next_phase1:e0 with value True
	inputs:
actionName ext:next_phase1
@    12s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = true
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase3
	phase_sendVote = Q:phase2

@    12s  F[0] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[1] unsat core #1 	(ucsz: 3 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[1]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[1] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[2] unsat core #1 	(ucsz: 7 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[2]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[2] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[3] unsat core #1 	(ucsz: 6 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[3]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[3] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[4] unsat core #1 	(ucsz: 7 -> 3 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[4]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[4] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[5] unsat core #1 	(ucsz: 7 -> 1 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[5]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[5] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[6] unsat core #1 	(ucsz: 5 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[6]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[6] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[7] unsat core #1 	(ucsz: 5 -> 3 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[7]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[7] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[8] unsat core #1 	(ucsz: 7 -> 5 -> 1 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    12s  is global clause? No
@    12s  Learning in F[8]: (forall V0, N0 . ~decided(N0, V0))
@    12s  F[8] /\ T /\ !P+ -> UNSAT
Frames: #9
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
	F[2]: #2
		(forall N1, N0 . ~vote_msg(N1, N0))
		~(curr_phase = phase_becomeLeader)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
	F[4]: #1
		(forall N1, N0 . ~votes(N0, N1))
	F[5]: #4
		(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
		(forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
		(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
		(forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
	F[6]: #1
		(forall N0 . ~leader(N0))
	F[7]: #1
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
	F[8]: #6
		(forall V0, N0 . ~decided(N0, V0))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    12s  
Adding frame 9...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Trying forwarding F[7]
Trying forwarding F[8]
Forwarded #5 to F[9]
@    12s  Learning in F[9]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    12s  Learning in F[9]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    12s  Learning in F[9]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    12s  Learning in F[9]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    12s  Learning in F[9]: (forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    12s  Learning in F[9]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    12s  Learning in F[9]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    12s  Learning in F[9]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    12s  Learning in F[9]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    12s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[9])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    12s  F[8] /\ T /\ C+ ?
@    12s  	Ans. UNSAT
@    12s  F[9] unsat core #2 	(ucsz: 12 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	decided(n1, v0)
	~leader(n1)
(clause)
	(~decided(n1, v0) | leader(n1))
(relations)
	leader
	decided
(cube: std)
	~leader(NODE0)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . (leader(NODE0) | ~decided(NODE0, VALUE0)))
---------------------------
(original clause)
	(~decided(n1, v0) | leader(n1))
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . (leader(NODE0) | ~decided(NODE0, VALUE0)))
---------------------------
(clause-type: univ)	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    12s  is global clause? Yes
@    12s  Learning in F[9]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    12s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = true
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = true
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[9])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = true
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = true
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    12s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n1
@    12s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = true
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = true
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    12s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    12s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = true
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = true
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    13s  F[6] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[7] unsat core #2 	(ucsz: 6 -> 4 -> 3 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1))
(relations)
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    13s  is global clause? No
@    13s  Learning in F[7]: (forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    13s  F[7] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[8] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	leader(n1)
	(curr_phase:e0 = Q:phase2)
	(phase_decide:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE1)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ leader(NODE1), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ leader(V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #1
	leader(V:node:e0:) -> [ NODE1, NODE0, ]
(partition) #1 node:e0: -> { NODE1, NODE0, | }
	#0 singles, #1 multiples (out of #1 cells)
(boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1)))
(learnt sym-boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(clause-type: epr)	((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@    13s  is global clause? No
@    13s  Learning in F[8]: ((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@    13s  F[8] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[9] unsat core #2 	(ucsz: 7 -> 5 -> 4 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	decided(n1, v1)
(clause)
	(~decided(n1, v1) | ~leader(n0))
(relations)
	leader
	decided
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	decided(NODE1, VALUE0)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ decided(NODE1, VALUE0), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ decided(V:node:e0:, VALUE0), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #2
	leader(V:node:e0:) -> [ NODE0, ]
	decided(V:node:e0:, VALUE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~decided(n1, v1) | ~leader(n0))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    13s  is global clause? No
@    13s  Learning in F[9]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    13s  F[9] /\ T /\ !P+ -> UNSAT
Frames: #10
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
	F[2]: #2
		(forall N1, N0 . ~vote_msg(N1, N0))
		~(curr_phase = phase_becomeLeader)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
	F[4]: #1
		(forall N1, N0 . ~votes(N0, N1))
	F[5]: #4
		(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
		(forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
		(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
		(forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
	F[6]: #1
		(forall N0 . ~leader(N0))
	F[7]: #2
		(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
	F[8]: #2
		((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
		(forall V0, N0 . ~decided(N0, V0))
	F[9]: #7
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    13s  
Adding frame 10...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Trying forwarding F[7]
Trying forwarding F[8]
Trying forwarding F[9]
Forwarded #6 to F[10]
@    13s  Learning in F[10]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    13s  Learning in F[10]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    13s  Learning in F[10]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    13s  Learning in F[10]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    13s  Learning in F[10]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    13s  Learning in F[10]: (forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    13s  Learning in F[10]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    13s  Learning in F[10]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    13s  Learning in F[10]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    13s  Learning in F[10]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    13s  Learning in F[10]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    13s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[10])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    13s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n1
@    13s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    13s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    13s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    13s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    13s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    13s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n1
@    13s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    13s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    13s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    13s  F[4] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[5] unsat core #2 	(ucsz: 10 -> 8 -> 3 -> 3 -> 2 -> 2)
(minimal unsat core)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | ~votes(n1, n1))
(relations)
	votes
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    13s  is global clause? No
@    13s  Learning in F[5]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    13s  F[5] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[6] unsat core #5 	(ucsz: 6 -> 5 -> 5)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~(Q:phase0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase0)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2)))
(relations)
	votes
	phase_recvVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	~(phase:i1 = phase:i0)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	~(phase_recvVote:e0 = curr_phase:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
	(votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase))))
@    13s  is global clause? No
@    13s  Learning in F[6]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase))))
@    13s  F[6] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[7] unsat core #3 	(ucsz: 7 -> 6 -> 3 -> 3)
(minimal unsat core)
	leader(n1)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1))
(relations)
	votes
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ leader(NODE1), votes(NODE0, NODE1), votes(NODE1, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), leader(V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(leader(V:node:e0:) & votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:)) -> [ NODE1, ]
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    13s  is global clause? No
@    13s  Learning in F[7]: (forall N1, N0 . ((leader(N1) & votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    13s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n1
@    13s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    13s  F[6] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[7] unsat core #3 	(ucsz: 14 -> 12 -> 10 -> 8 -> 7 -> 3 -> 3 -> 3)
(minimal unsat core)
	leader(n0)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~leader(n0) | ~votes(n0, n1) | ~votes(n1, n1))
(relations)
	votes
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	votes(NODE1, NODE1)
	votes(NODE0, NODE1)
(antecedent reduction)
@    13s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), ]
	NODE0 -> [ leader(NODE0), votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(leader(V:node:e0:) & votes(V:node:e0:, NODE1)) -> [ NODE0, ]
	(votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~votes(n0, n1) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    13s  is global clause? No
@    13s  Learning in F[7]: (forall N1, N0 . ((leader(N0) & votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    13s  F[7] /\ T /\ C+ ?
@    13s  	Ans. UNSAT
@    13s  F[8] unsat core #2 	(ucsz: 12 -> 10 -> 9 -> 6 -> 3 -> 3 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1))
(relations)
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    14s  is global clause? No
@    14s  Learning in F[8]: (forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    14s  F[8] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    14s  F[9] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	leader(n1)
	(curr_phase:e0 = Q:phase2)
	(phase_decide:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE1)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ leader(NODE1), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ leader(V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #1
	leader(V:node:e0:) -> [ NODE1, NODE0, ]
(partition) #1 node:e0: -> { NODE1, NODE0, | }
	#0 singles, #1 multiples (out of #1 cells)
(boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1)))
(learnt sym-boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(clause-type: epr)	((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@    14s  is global clause? No
@    14s  Learning in F[9]: ((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@    14s  F[9] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    14s  F[10] unsat core #4 	(ucsz: 11 -> 7 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	decided(n1, v1)
	(curr_phase:e0 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~decided(n1, v1) | ~leader(n0)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
	decided
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	decided(NODE1, VALUE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE0)
	decided(NODE1, VALUE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ decided(NODE1, VALUE0), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ decided(V:node:e0:, VALUE0), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #2
	leader(V:node:e0:) -> [ NODE0, ]
	decided(V:node:e0:, VALUE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase4) | ~decided(n1, v1) | ~leader(n0)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    14s  is global clause? No
@    14s  Learning in F[10]: (forall N1, V0, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    14s  F[10] /\ T /\ !P+ -> UNSAT
Frames: #11
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
	F[2]: #2
		(forall N1, N0 . ~vote_msg(N1, N0))
		~(curr_phase = phase_becomeLeader)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
	F[4]: #1
		(forall N1, N0 . ~votes(N0, N1))
	F[5]: #5
		(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
		(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
		(forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
		(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
		(forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
	F[6]: #2
		(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase))))
		(forall N0 . ~leader(N0))
	F[7]: #3
		(forall N1, N0 . ((leader(N1) & votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
		(forall N1, N0 . ((leader(N0) & votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
	F[8]: #2
		(forall V0, N0 . ~decided(N0, V0))
		(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
	F[9]: #2
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
	F[10]: #7
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
		(forall N1, V0, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    14s  
Adding frame 11...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Trying forwarding F[7]
Trying forwarding F[8]
Trying forwarding F[9]
Trying forwarding F[10]
Forwarded #6 to F[11]
@    14s  Learning in F[11]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    14s  Learning in F[11]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    14s  Learning in F[11]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    14s  Learning in F[11]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    14s  Learning in F[11]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    14s  Learning in F[11]: (forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    14s  Learning in F[11]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    14s  Learning in F[11]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    14s  Learning in F[11]: (exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    14s  Learning in F[11]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    14s  Learning in F[11]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    14s  F[11] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[11])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    14s  F[10] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n1
@    14s  	Ans. SAT
(cube in F[10])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    14s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    14s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    14s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n1
@    14s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    14s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@    14s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n1
@    14s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false			--> modified
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    14s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[2] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    14s  F[3] unsat core #2 	(ucsz: 8 -> 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	~vote_request_msg(n0, n1)
	vote_msg(n1, n0)
(clause)
	(~vote_msg(n1, n0) | vote_request_msg(n0, n1))
(relations)
	vote_request_msg
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	(vote_msg(V:node:e0:, NODE0) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  is global clause? No
@    14s  Learning in F[3]: (forall N1, N0 . (vote_msg(N1, N0) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  F[3] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    14s  F[4] unsat core #4 	(ucsz: 12 -> 10 -> 4 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	vote_msg(n1, n0)
	(phase_recvVote:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1)))
(relations)
	curr_phase:e0
	vote_msg
	phase_recvVote:e0
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	~vote_request_msg(NODE0, NODE1)
	(phase_recvVote:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_recvVote:e0
(cube eq)
	(curr_phase:e0 = phase_recvVote:e0)
	vote_msg(NODE1, NODE0)
	~vote_request_msg(NODE0, NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, NODE1), vote_msg(NODE1, NODE0), ]
	NODE0 -> [ ~vote_request_msg(NODE0, NODE1), vote_msg(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ ~vote_request_msg(NODE0, V:node:e0:), vote_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e0:), ~vote_request_msg(V:node:e0:, NODE1), ]
ucubes2qv #2
	(vote_msg(V:node:e0:, NODE0) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase2) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_recvVote:e0) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  is global clause? No
@    14s  Learning in F[4]: (forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  F[4] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    14s  F[5] unsat core #3 	(ucsz: 9 -> 5 -> 3 -> 3)
(minimal unsat core)
	~vote_request_msg(n0, n1)
	vote_msg(n1, n0)
	votes(n1, n1)
(clause)
	(~vote_msg(n1, n0) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE1, NODE1)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ votes(NODE1, NODE1), vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ vote_msg(V:node:e0:, NODE0), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), vote_msg(NODE1, V:node:e0:), ]
ucubes2qv #2
	(vote_msg(V:node:e0:, NODE0) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e0:) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  is global clause? No
@    14s  Learning in F[5]: (forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n1
@    14s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = false			--> modified
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    14s  F[4] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    14s  F[5] unsat core #2 	(ucsz: 9 -> 5 -> 3 -> 2 -> 2)
(minimal unsat core)
	~vote_request_msg(n0, n1)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
(antecedent reduction)
@    14s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  is global clause? No
@    14s  Learning in F[5]: (forall N1, N0 . (votes(N0, N1) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    14s  F[5] /\ T /\ C+ ?
@    14s  	Ans. UNSAT
@    15s  F[6] unsat core #3 	(ucsz: 10 -> 9 -> 3 -> 3 -> 3)
(minimal unsat core)
	~vote_request_msg(n0, n1)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	~vote_request_msg(NODE0, NODE1)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[6]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  F[6] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[7] unsat core #6 	(ucsz: 9 -> 6 -> 6)
(minimal unsat core)
	(phase_recvVote:e0 = Q:phase0)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	votes(n0, n1)
	votes(n1, n1)
	~(Q:phase0 = Q:phase2)
(clause)
	(forall Q:phase0, Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(relations)
	votes
	vote_request_msg
	phase_recvVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	(curr_phase:e0 = phase:i1)
	(phase_recvVote:e0 = phase:i0)
	~(phase:i0 = phase:i1)
	~vote_request_msg(NODE0, NODE1)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e0
	phase:i0 -> phase_recvVote:e0
(cube eq)
	~(phase_recvVote:e0 = curr_phase:e0)
	votes(NODE1, NODE1)
	~vote_request_msg(NODE0, NODE1)
	votes(NODE0, NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase0, Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[7]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    15s  F[7] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[8] unsat core #7 	(ucsz: 8 -> 7 -> 7)
(minimal unsat core)
	(phase_recvVote:e0 = Q:phase0)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	votes(n0, n1)
	leader(n1)
	votes(n1, n1)
	~(Q:phase0 = Q:phase2)
(clause)
	(forall Q:phase0, Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(relations)
	votes
	vote_request_msg
	phase_recvVote:e0
	curr_phase:e0
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	(curr_phase:e0 = phase:i1)
	~vote_request_msg(NODE0, NODE1)
	~(phase:i0 = phase:i1)
	(phase_recvVote:e0 = phase:i0)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e0
	phase:i0 -> phase_recvVote:e0
(cube eq)
	leader(NODE1)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	~vote_request_msg(NODE0, NODE1)
	~(phase_recvVote:e0 = curr_phase:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ leader(NODE1), votes(NODE0, NODE1), votes(NODE1, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), leader(V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(leader(V:node:e0:) & votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase0, Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[8]: (forall N1, N0 . ((leader(N1) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    15s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n1
@    15s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    15s  F[7] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[8] unsat core #7 	(ucsz: 8 -> 7 -> 7)
(minimal unsat core)
	(phase_recvVote:e0 = Q:phase0)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	votes(n0, n1)
	leader(n0)
	votes(n1, n1)
	~(Q:phase0 = Q:phase2)
(clause)
	(forall Q:phase0, Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~leader(n0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(relations)
	votes
	vote_request_msg
	phase_recvVote:e0
	curr_phase:e0
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	votes(NODE1, NODE1)
	(curr_phase:e0 = phase:i1)
	~vote_request_msg(NODE0, NODE1)
	votes(NODE0, NODE1)
	~(phase:i0 = phase:i1)
	(phase_recvVote:e0 = phase:i0)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e0
	phase:i0 -> phase_recvVote:e0
(cube eq)
	~(phase_recvVote:e0 = curr_phase:e0)
	votes(NODE1, NODE1)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
	leader(NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ~vote_request_msg(NODE0, NODE1), leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), leader(V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(leader(V:node:e0:) & votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
	(votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase0, Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~leader(n0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[8]: (forall N1, N0 . ((leader(N0) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    15s  F[8] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[9] unsat core #5 	(ucsz: 9 -> 8 -> 5 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	leader(n1)
	~vote_request_msg(n0, n1)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~leader(n0) | ~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(relations)
	votes
	leader
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
	votes(NODE1, NODE1)
	~vote_request_msg(NODE0, NODE1)
	votes(NODE0, NODE1)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ leader(NODE1), votes(NODE0, NODE1), votes(NODE1, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), leader(V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), leader(V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(leader(V:node:e0:) & votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(leader(V:node:e0:) & votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | ~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE0) | ~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[9]: (forall N1, N0 . ((leader(N0) & leader(N1) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  F[9] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[10] unsat core #7 	(ucsz: 15 -> 13 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	(phase_decide:e0 = Q:phase2)
	(curr_phase:e0 = Q:phase2)
	~vote_request_msg(n0, n1)
	votes(n0, n1)
	leader(n0)
	leader(n1)
	votes(n1, n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1)))
(relations)
	votes
	vote_request_msg
	curr_phase:e0
	leader
	phase_decide:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
	votes(NODE1, NODE1)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE1)
	leader(NODE0)
	votes(NODE1, NODE1)
	(curr_phase:e0 = phase_decide:e0)
	votes(NODE0, NODE1)
	~vote_request_msg(NODE0, NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ leader(NODE1), votes(NODE0, NODE1), votes(NODE1, NODE1), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), leader(V:node:e0:), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), leader(V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(leader(V:node:e0:) & votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(leader(V:node:e0:) & votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~leader(NODE0) | ~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1) | ~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e0 = phase_decide:e0) | ~leader(NODE0) | ~leader(NODE1) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (((curr_phase = phase_decide) & leader(N0) & leader(N1) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[10]: (forall N1, N0 . (((curr_phase = phase_decide) & leader(N0) & leader(N1) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  F[10] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    15s  	Ans. SAT
(cube in F[10])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    15s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    15s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    15s  F[8] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[9] unsat core #4 	(ucsz: 5 -> 4 -> 4)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	decided(n1, v1)
	~(Q:phase2 = Q:phase4)
	(phase_decide:e0 = Q:phase4)
(clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase4) | ~decided(n1, v1) | (Q:phase2 = Q:phase4)))
(relations)
	decided
	curr_phase:e0
	phase_decide:e0
(cube: std)
	(phase_decide:e0 = phase:i1)
	~(phase:i0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	decided(NODE0, VALUE0)

(eq map)
	phase:i1 -> phase_decide:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	~(curr_phase:e0 = phase_decide:e0)
	decided(NODE0, VALUE0)
(qvars eq)
	VALUE0
	NODE0
(antecedent eq)
(boosted clause)
	(forall VALUE0, NODE0 . ((curr_phase:e0 = phase_decide:e0) | ~decided(NODE0, VALUE0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase4) | ~decided(n1, v1) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ((curr_phase:e0 = phase_decide:e0) | ~decided(NODE0, VALUE0)))
---------------------------
(clause-type: univ)	(forall V0, N0 . (decided(N0, V0) -> (curr_phase = phase_decide)))
@    15s  is global clause? Yes
@    15s  Learning in F[11]: (forall V0, N0 . (decided(N0, V0) -> (curr_phase = phase_decide)))
@    15s  F[9] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[10] unsat core #4 	(ucsz: 16 -> 14 -> 9 -> 8 -> 6 -> 4 -> 4)
(minimal unsat core)
	decided(n1, v1)
	(curr_phase:e0 = Q:phase4)
	~(Q:phase2 = Q:phase4)
	(phase_decide:e0 = Q:phase2)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase2) | ~decided(n1, v1) | (Q:phase2 = Q:phase4)))
(relations)
	decided
	curr_phase:e0
	phase_decide:e0
(cube: std)
	(phase_decide:e0 = phase:i1)
	~(phase:i1 = phase:i0)
	(curr_phase:e0 = phase:i0)
	decided(NODE0, VALUE0)

(eq map)
	phase:i1 -> phase_decide:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	~(phase_decide:e0 = curr_phase:e0)
	decided(NODE0, VALUE0)
(qvars eq)
	VALUE0
	NODE0
(antecedent eq)
(boosted clause)
	(forall VALUE0, NODE0 . ((phase_decide:e0 = curr_phase:e0) | ~decided(NODE0, VALUE0)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e0 = Q:phase4) | ~(phase_decide:e0 = Q:phase2) | ~decided(n1, v1) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ((phase_decide:e0 = curr_phase:e0) | ~decided(NODE0, VALUE0)))
---------------------------
(clause-type: univ)	(forall V0, N0 . (decided(N0, V0) -> (phase_decide = curr_phase)))
@    15s  is global clause? Yes
@    15s  Learning in F[11]: (forall V0, N0 . (decided(N0, V0) -> (phase_decide = curr_phase)))
@    15s  F[10] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[11] unsat core #5 	(ucsz: 16 -> 14 -> 12 -> 11 -> 9 -> 8 -> 5 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	decided(n1, v1)
	~vote_request_msg(n0, n1)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~decided(n1, v1) | ~leader(n0) | ~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(relations)
	votes
	decided
	leader
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	votes(NODE1, NODE1)
	~vote_request_msg(NODE0, NODE1)
	decided(NODE1, VALUE0)
	votes(NODE0, NODE1)
(antecedent reduction)
@    15s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), decided(NODE1, VALUE0), ~vote_request_msg(NODE0, NODE1), ]
	NODE0 -> [ leader(NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), decided(V:node:e0:, VALUE0), ~vote_request_msg(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e0:, NODE1), leader(V:node:e0:), votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	(decided(V:node:e0:, VALUE0) & votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE0, V:node:e0:)) -> [ NODE1, ]
	(leader(V:node:e0:) & votes(V:node:e0:, NODE1) & ~vote_request_msg(V:node:e0:, NODE1)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~decided(n1, v1) | ~leader(n0) | ~votes(n0, n1) | ~votes(n1, n1) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  is global clause? No
@    15s  Learning in F[11]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0) & votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    15s  F[11] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = true
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = true
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[11])
	curr_phase = Q:phase4
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = true
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = true
	voted(n1) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n1, n0) = true
	votes(n1, n1) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n1, q0) = false
	member(n1, q1) = false
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    15s  F[10] /\ T /\ C+ ?
@    15s  	Ans. UNSAT
@    15s  F[11] unsat core #5 	(ucsz: 16 -> 14 -> 12 -> 10 -> 9 -> 7 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	decided(n1, v1)
	~vote_request_msg(n1, n0)
	votes(n0, n0)
	votes(n1, n0)
(clause)
	(~decided(n1, v1) | ~leader(n0) | ~votes(n0, n0) | ~votes(n1, n0) | vote_request_msg(n1, n0))
(relations)
	votes
	decided
	leader
	vote_request_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	votes(NODE0, NODE0)
	~vote_request_msg(NODE1, NODE0)
	votes(NODE1, NODE0)
	decided(NODE1, VALUE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ ~vote_request_msg(NODE1, NODE0), votes(NODE1, NODE0), decided(NODE1, VALUE0), ]
	NODE0 -> [ leader(NODE0), votes(NODE0, NODE0), ~vote_request_msg(NODE1, NODE0), votes(NODE1, NODE0), ]
qv2ucubes #2
	NODE1 -> [ votes(V:node:e0:, NODE0), decided(V:node:e0:, VALUE0), ~vote_request_msg(V:node:e0:, NODE0), ]
	NODE0 -> [ ~vote_request_msg(NODE1, V:node:e0:), votes(NODE1, V:node:e0:), leader(V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
ucubes2qv #2
	(decided(V:node:e0:, VALUE0) & votes(V:node:e0:, NODE0) & ~vote_request_msg(V:node:e0:, NODE0)) -> [ NODE1, ]
	(leader(V:node:e0:) & votes(NODE1, V:node:e0:) & votes(V:node:e0:, V:node:e0:) & ~vote_request_msg(NODE1, V:node:e0:)) -> [ NODE0, ]
(partition) #2 node:e0: -> { NODE1, | NODE0, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(~decided(n1, v1) | ~leader(n0) | ~votes(n0, n0) | ~votes(n1, n0) | vote_request_msg(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE0) | (NODE0 = NODE1) | vote_request_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0) & votes(N0, N0) & votes(N1, N0)) -> ((N0 = N1) | vote_request_msg(N1, N0))))
@    16s  is global clause? No
@    16s  Learning in F[11]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0) & votes(N0, N0) & votes(N1, N0)) -> ((N0 = N1) | vote_request_msg(N1, N0))))
@    16s  F[11] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v1
		V__fml:n -> n0
(cube in !P)
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

(cube in F[11])
	curr_phase = Q:phase4
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase3
	phase_decide = Q:phase4
	phase_recvVote = Q:phase1
	phase_sendRequestVote = Q:phase2
	phase_sendVote = Q:phase0

@    16s  F[10] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e0 with value True
	inputs:
actionName ext:decide
		V__fml:v -> v0
		V__fml:n -> n1
@    16s  	Ans. SAT
(cube in F[10])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase3
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase4
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase1
	phase_recvVote = Q:phase0
	Conflicting assignment in global condition for phase_sendRequestVote: Q:phase1 versus Q:phase2
	phase_sendRequestVote = Q:phase1
	Conflicting assignment in global condition for phase_sendVote: Q:phase3 versus Q:phase0
	phase_sendVote = Q:phase3

@    16s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e0 with value True
	inputs:
actionName ext:next_phase4
@    16s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = true
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n0
@    16s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e0 with value True
	inputs:
actionName ext:become_leader
		V__fml:q -> q0
		V__fml:n -> n1
@    16s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e0 with value True
	inputs:
actionName ext:next_phase3
@    16s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n0
@    16s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = true
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e0 with value True
	inputs:
actionName ext:recv_vote
		V__fml:sender -> n1
		V__fml:n -> n1
@    16s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false			--> modified
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e0 with value True
	inputs:
actionName ext:next_phase2
@    16s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	leader(n0) = false
	leader(n1) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	voted(n0) = false
	voted(n1) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n1, q0) = true
	member(n1, q1) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    16s  F[2] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[3] unsat core #2 	(ucsz: 7 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	vote_msg(n1, n1)
(clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(relations)
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[3]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  F[3] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[4] unsat core #2 	(ucsz: 10 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	vote_msg(n1, n1)
(clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(relations)
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[4]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  F[4] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[5] unsat core #2 	(ucsz: 10 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	vote_msg(n1, n1)
(clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(relations)
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[5]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  F[5] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[6] unsat core #2 	(ucsz: 10 -> 2 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	vote_msg(n1, n1)
(clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(relations)
	vote_msg
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	vote_msg(NODE1, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_msg(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[6]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    16s  F[6] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[7] unsat core #2 	(ucsz: 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(~votes(n0, n1) | ~votes(n1, n1))
(relations)
	votes
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[7]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    16s  F[7] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[8] unsat core #5 	(ucsz: 6 -> 5 -> 5)
(minimal unsat core)
	(curr_phase:e0 = Q:phase2)
	~(Q:phase0 = Q:phase2)
	(phase_recvVote:e0 = Q:phase0)
	votes(n1, n1)
	votes(n0, n1)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2)))
(relations)
	votes
	phase_recvVote:e0
	curr_phase:e0
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	(phase_recvVote:e0 = phase:i1)
	(curr_phase:e0 = phase:i0)
	~(phase:i1 = phase:i0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_recvVote:e0
	phase:i0 -> curr_phase:e0
(cube eq)
	votes(NODE0, NODE1)
	votes(NODE1, NODE1)
	~(phase_recvVote:e0 = curr_phase:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE1, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #2
	NODE1 -> [ votes(NODE0, V:node:e0:), votes(V:node:e0:, V:node:e0:), ]
	NODE0 -> [ votes(V:node:e0:, NODE1), ]
ucubes2qv #2
	votes(V:node:e0:, NODE1) -> [ NODE0, ]
	(votes(NODE0, V:node:e0:) & votes(V:node:e0:, V:node:e0:)) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e0 = Q:phase2) | ~(phase_recvVote:e0 = Q:phase0) | ~votes(n0, n1) | ~votes(n1, n1) | (Q:phase0 = Q:phase2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | (phase_recvVote:e0 = curr_phase:e0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase))))
@    16s  is global clause? No
@    16s  Learning in F[8]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase))))
@    16s  F[8] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[9] unsat core #2 	(ucsz: 8 -> 7 -> 6 -> 3 -> 3 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1))
(relations)
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[9]: (forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    16s  F[9] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[10] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	leader(n1)
	(curr_phase:e0 = Q:phase2)
	(phase_decide:e0 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1)))
(relations)
	phase_decide:e0
	curr_phase:e0
	leader
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE1)
	leader(NODE0)
	(phase_decide:e0 = phase:i0)
	(curr_phase:e0 = phase:i0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e0
(cube eq)
	leader(NODE1)
	leader(NODE0)
	(curr_phase:e0 = phase_decide:e0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e0:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
qv2cubes #2
	NODE1 -> [ leader(NODE1), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ leader(V:node:e0:), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #1
	leader(V:node:e0:) -> [ NODE1, NODE0, ]
(partition) #1 node:e0: -> { NODE1, NODE0, | }
	#0 singles, #1 multiples (out of #1 cells)
(boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e0 = Q:phase2) | ~(phase_decide:e0 = Q:phase2) | ~leader(n0) | ~leader(n1)))
(learnt sym-boosted clause)
	(~(curr_phase:e0 = phase_decide:e0) | (exists NODE0 . ~leader(NODE0)))
---------------------------
(clause-type: epr)	((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@    16s  is global clause? No
@    16s  Learning in F[10]: ((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
@    16s  F[10] /\ T /\ C+ ?
@    16s  	Ans. UNSAT
@    16s  F[11] unsat core #2 	(ucsz: 13 -> 11 -> 9 -> 8 -> 6 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	decided(n1, v0)
	leader(n0)
(clause)
	(~decided(n1, v0) | ~leader(n0))
(relations)
	leader
	decided
(fullsorts)
	node:e0: -> [ NODE0, NODE1, ]
(cube: std)
	leader(NODE0)
	decided(NODE1, VALUE0)
(antecedent reduction)
@    16s  antecedent: 2 -> 2

qv2cubes #2
	NODE1 -> [ decided(NODE1, VALUE0), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #2
	NODE1 -> [ decided(V:node:e0:, VALUE0), ]
	NODE0 -> [ leader(V:node:e0:), ]
ucubes2qv #2
	leader(V:node:e0:) -> [ NODE0, ]
	decided(V:node:e0:, VALUE0) -> [ NODE1, ]
(partition) #2 node:e0: -> { NODE0, | NODE1, | }
	#2 singles, #0 multiples (out of #2 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~decided(n1, v0) | ~leader(n0))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    16s  is global clause? No
@    16s  Learning in F[11]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    16s  F[11] /\ T /\ !P+ -> UNSAT
Frames: #12
	F[0]: #1
		((forall N0_2, N0 . ~vote_request_msg(N0_2, N0)) & (forall N0_2 . ~voted(N0_2)) & (forall N0_2, N0_3 . ~vote_msg(N0_2, N0_3)) & (forall N0_1, N0_2 . ~votes(N0_2, N0_1)) & (forall N0_2 . ~leader(N0_2)) & (forall V0, N0_2 . ~decided(N0_2, V0)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . (vote_request_msg(N0, N1) -> (curr_phase = phase_sendRequestVote)))
	F[2]: #2
		(forall N1, N0 . ~vote_msg(N1, N0))
		~(curr_phase = phase_becomeLeader)
	F[3]: #3
		~(curr_phase = phase_decide)
		(forall N1, N0 . (vote_msg(N1, N0) -> ((N0 = N1) | vote_request_msg(N0, N1))))
		(forall N1, N0 . ((curr_phase = phase_recvVote) -> ~vote_msg(N1, N0)))
	F[4]: #2
		(forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
		(forall N1, N0 . ~votes(N0, N1))
	F[5]: #6
		(forall N1, N0 . ((curr_phase = phase_becomeLeader) -> ~votes(N0, N1)))
		(forall N1, N0 . ((vote_request_msg(N0, N0) & votes(N0, N1)) -> (phase_recvVote = curr_phase)))
		(forall N0 . (votes(N0, N0) -> (phase_recvVote = curr_phase)))
		(forall N1, N0 . (votes(N0, N1) -> ((N0 = N1) | vote_request_msg(N0, N1))))
		(forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
		(forall N1, N0 . (votes(N0, N1) -> ((phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
	F[6]: #2
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall N0 . ~leader(N0))
	F[7]: #2
		(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
		(forall N0 . (leader(N0) -> ~(curr_phase = phase_decide)))
	F[8]: #2
		(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> ((N0 = N1) | (phase_recvVote = curr_phase))))
		(forall V0, N0 . ~decided(N0, V0))
	F[9]: #1
		(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
	F[10]: #1
		((curr_phase = phase_decide) -> (exists N0 . ~leader(N0)))
	F[11]: #8
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
		(forall V0, N0 . (decided(N0, V0) -> (phase_decide = curr_phase)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
@    17s  
Adding frame 12...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Forwarded #1 to F[6]
@    17s  Learning in F[6]: (forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
Trying forwarding F[6]
Forwarded #2 to F[7]
@    17s  Learning in F[7]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    17s  Learning in F[7]: (forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
Trying forwarding F[7]
Forwarded #3 to F[8]
@    17s  Learning in F[8]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    17s  Learning in F[8]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    17s  Learning in F[8]: (forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
Trying forwarding F[8]
Forwarded #3 to F[9]
@    17s  Learning in F[9]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    17s  Learning in F[9]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    17s  Learning in F[9]: (forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
Trying forwarding F[9]
Forwarded #4 to F[10]
@    17s  Learning in F[10]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    17s  Learning in F[10]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
@    17s  Learning in F[10]: (forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    17s  Learning in F[10]: (forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
@    17s  F[9] converged!
Explored 13 frames
@    17s  -------------------------------------------------
### Invariant: #13
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [other5]	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
invariant [other3]	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
invariant [other1]	(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
invariant [global3]	(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
invariant [other4]	(forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
invariant [other6]	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
invariant [global7]	(forall V0, N0 . (decided(N0, V0) -> (phase_decide = curr_phase)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [global2]	(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [prop1]	(forall V0, V0_2, N0_1, N0 . ((decided(N0_1, V0) & decided(N0, V0_2)) -> (V0 = V0_2)))
invariant [other2]	(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
###


Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> UNSAT
Checking Init /\ !Inv:
	#1 global4 -> UNSAT
	#2 other5 -> UNSAT
	#3 other3 -> UNSAT
	#4 other1 -> UNSAT
	#5 global3 -> UNSAT
	#6 global7 -> UNSAT
	#7 other4 -> UNSAT
	#8 global5_1 -> UNSAT
	#9 global2 -> UNSAT
	#10 other6 -> UNSAT
	#11 prop1  (property) -> UNSAT
	#12 other2 -> UNSAT
	#13 global5 -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 global4 -> UNSAT
	#2 other5 -> UNSAT
	#3 other3 -> UNSAT
	#4 other1 -> UNSAT
	#5 global3 -> UNSAT
	#6 global7 -> UNSAT
	#7 other4 -> UNSAT
	#8 global5_1 -> UNSAT
	#9 global2 -> UNSAT
	#10 other6 -> UNSAT
	#11 prop1  (property) -> UNSAT
	#12 other2 -> UNSAT
	#13 global5 -> UNSAT
	Inv_all /\ T /\ !Inv+: passed

Finite sorts: #3
	node -> node:e0: -> [`node:e0:0`, `node:e0:1`]
	quorum -> quorum:e0: -> [`quorum:e0:0`, `quorum:e0:1`]
	value -> value:e0: -> [`value:e0:0`, `value:e0:1`]

Invariant is a proof certificate
@    17s  -------------------------------------------------
--> The system is safe!
raw invariant [prop1] (cost: 4, 4F, 0E) 	(forall V1:e0, V2:e0, N1:e0, N2:e0 . ((__decided:e0(N1:e0, V1:e0) & __decided:e0(N2:e0, V2:e0)) -> (V1:e0 = V2:e0)))
raw invariant [global4] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__votes:e0(Q:node:e0:0, Q:node:e0:1) & ~...(..., ...)))
raw invariant [other5] (cost: 3, 3F, 0E) 	~(exists Q:node:e0:1, Q:value:e0:0, Q:node:e0:0 . (__decided:e0(Q:node:e0:1, Q:value:e0:0) & __leader:e0(Q:node:e0:0) & ~(... = ...)))
raw invariant [other3] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__vote_msg:e0(Q:node:e0:1, Q:node:e0:1) & __vote_msg:e0(Q:node:e0:1, Q:node:e0:0) & ~(... = ...)))
raw invariant [other1] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__leader:e0(Q:node:e0:1) & __leader:e0(Q:node:e0:0) & ~(... = ...)))
raw invariant [global3] (cost: 3, 2F, 1E) 	~(forall Q:quorum:e0:0 . (exists Q:node:e0:1, Q:node:e0:0 . (...(...) & ...(..., ...) & ~...)))
raw invariant [other4] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__vote_msg:e0(Q:node:e0:1, Q:node:e0:0) & __votes:e0(Q:node:e0:1, Q:node:e0:1) & ~(... = ...) & ~...(..., ...)))
raw invariant [other6] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__votes:e0(Q:node:e0:0, Q:node:e0:1) & __votes:e0(Q:node:e0:1, Q:node:e0:1) & ~(... = ...)))
raw invariant [global7] (cost: 2, 2F, 0E) 	~(exists Q:value:e0:0, Q:node:e0:0 . (~(... = ...) & __decided:e0(Q:node:e0:0, Q:value:e0:0)))
raw invariant [global5_1] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__vote_msg:e0(Q:node:e0:1, Q:node:e0:0) & ~...(...)))
raw invariant [global2] (cost: 2, 1F, 1E) 	~(forall Q:quorum:e0:0 . (exists Q:node:e0:0 . (...(...) & ...(..., ...) & ~...)))
raw invariant [global5] (cost: 2, 2F, 0E) 	~(exists Q:value:e0:0, Q:node:e0:0 . (~...(...) & __decided:e0(Q:node:e0:0, Q:value:e0:0)))
raw invariant [other2] (cost: 2, 2F, 0E) 	~(exists Q:node:e0:1, Q:node:e0:0 . (__votes:e0(Q:node:e0:0, Q:node:e0:1) & ~...(...)))
@    17s  Minimizing certificate of size 13
@    17s  	prop1	(cost: 4) -> property
@    17s  	other5	(cost: 3) -> remove
@    17s  	global3	(cost: 3) -> add
@    17s  	global4	(cost: 2) -> add
@    17s  	other3	(cost: 2) -> add
@    17s  	other1	(cost: 2) -> remove
@    17s  	other4	(cost: 2) -> remove
@    17s  	other6	(cost: 2) -> remove
@    17s  	global7	(cost: 2) -> remove
@    18s  	global5_1	(cost: 2) -> add
@    18s  	global2	(cost: 2) -> remove
@    18s  	global5	(cost: 2) -> add
@    18s  	other2	(cost: 2) -> remove
	Minimized certificate: 13 -> 6
@    18s  -------------------------------------------------
### Proof certificate (required): #6
invariant [prop1]	(forall V0, V0_2, N0_1, N0 . ((decided(N0_1, V0) & decided(N0, V0_2)) -> (V0 = V0_2)))
invariant [global3]	(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [other3]	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
###

### Optional invariants: #7
invariant [other5_optional]	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
invariant [other1_optional]	(forall N1, N0 . ((leader(N1) & leader(N0)) -> (N0 = N1)))
invariant [other4_optional]	(forall N1, N0 . ((vote_msg(N1, N0) & votes(N1, N1)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
invariant [other6_optional]	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N1)) -> (N0 = N1)))
invariant [global7_optional]	(forall V0, N0 . (decided(N0, V0) -> (phase_decide = curr_phase)))
invariant [global2_optional]	(exists Q0 . (forall N0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
invariant [other2_optional]	(forall N1, N0 . (votes(N0, N1) -> voted(N1)))
###

	random:	0
	scalls:	929
	scalls-finite:	929
	scalls-infinite:	0
	scalls-finite-full:	0
	cti:	118
	cubes:	119
	subsumed-calls:	1164
	subsumed-subset:	30
	subsumed-varintersect-c:	1066
	subsumed-varintersect-e:	0
	subsumed-query-sat:	57
	subsumed-query-unsat:	11
	subsumed-eq:	87
	unsat-core:	189
	sz-unsat-core-avg:	5.24
	sz-unsat-min-avg:	2.10
	sz-cube-avg:	40.00
	antecedent-reduction-sum:	64
	antecedent-total-sum:	146
	antecedent-reduction-avg:	0.44
	antecedent-calls:	71
	antecedent-calls-reduced:	32
	antecedent-scalls:	211
	time-q-max-finite-ms:	18
	time-q-max-finite-core-ms:	0
	time-q-max-infinite-ms:	0
	time-q-max-infinite-core-ms:	0
	time-cti-bad-sat:	0
	time-cti-bad-unsat:	0
	time-cti-sat:	3
	time-cti-unsat:	4
	time-forward:	1
	time-antecedent:	1
	time-subsume:	0
	time-subsume-query:	0
	time-inv-check-finite:	0
	time-inv-check-infinite:	0
	time-inv-reuse:	0
	time-minimize:	1
	time-qf:	0
	time-sum:	11
@    18s  -------------------------------------------------
@    18s  -------------------------------------------------
sort: node <-> unbounded
sort: quorum <-> unbounded
sort: value <-> unbounded
(use_wires: False)
@    18s  (finite convergence checks)
@    18s  (performing finite convergence checks for node)
(enumsort) node <-> node:e1:
	[ NODE0, NODE1, NODE2, ] <-> [ n0, n1, n2, ]
(enumsort) quorum <-> quorum:e1:
	[ QUORUM0, QUORUM1, QUORUM2, ] <-> [ q0, q1, q2, ]
(enumsort) value <-> value:e1:
	[ VALUE0, VALUE1, ] <-> [ v0, v1, ]
	dep_height[q0] = 0
	dep_height[q1] = 1
	dep_height[q2] = 2
	dep_height[v0] = 100
	dep_height[v1] = 101
	dep_height[n0] = 200
	dep_height[n1] = 201
	dep_height[n2] = 202
(use_wires: False)
@    18s  -------------------------------------------------
### Invariant: #6
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [other3]	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [global3]	(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
invariant [prop1]	(forall V1_1, V1, N1, N1_2 . ((decided(N1, V1_1) & decided(N1_2, V1)) -> (V1_1 = V1)))
###


Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> SAT
Checking Init /\ !Inv:
	#1 global5_1 -> UNSAT
	#2 other3 -> UNSAT
	#3 global5 -> UNSAT
	#4 global4 -> UNSAT
	#5 global3 -> UNSAT
	#6 prop1  (property) -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 global5_1 -> UNSAT
	#2 other3 -> UNSAT
	#3 global5 -> UNSAT
	#4 global4 -> UNSAT
	#5 global3 -> SAT
	#6 prop1  (property) -> SAT
	Inv_all /\ T /\ !Inv+: 2 failed

Finite sorts: #3
	node -> node:e1: -> [`node:e1:0`, `node:e1:1`, `node:e1:2`]
	quorum -> quorum:e1: -> [`quorum:e1:0`, `quorum:e1:1`, `quorum:e1:2`]
	value -> value:e1: -> [`value:e1:0`, `value:e1:1`]

Invariant is not a proof certificate
@    18s  -------------------------------------------------
@    18s  (extended |node| to 3)
@    18s  (finite convergence checks failed for node)
(enumsort) node <-> node:e2:
	[ NODE0, NODE1, NODE2, ] <-> [ n0, n1, n2, ]
(enumsort) quorum <-> quorum:e2:
	[ QUORUM0, QUORUM1, QUORUM2, ] <-> [ q0, q1, q2, ]
(enumsort) value <-> value:e2:
	[ VALUE0, VALUE1, ] <-> [ v0, v1, ]
	dep_height[q0] = 0
	dep_height[q1] = 1
	dep_height[q2] = 2
	dep_height[n0] = 100
	dep_height[n1] = 101
	dep_height[n2] = 102
	dep_height[v0] = 200
	dep_height[v1] = 201
(use_wires: False)
sort: node <-> unbounded
sort: quorum <-> unbounded
sort: value <-> unbounded
(use_wires: False)
@    18s  -------------------------------------------------
### Checking reusability of clauses: #5
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [other3]	(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [global3]	(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
###

Checking Init /\ !Inv:
	#1 global5_1 -> UNSAT
	#2 global4 -> UNSAT
	#3 other3 -> UNSAT
	#4 global5 -> UNSAT
	#5 global3 -> UNSAT
	Init /\ !Inv: passed
Checking Init /\ T /\ !Inv+:
	#1 global5_1 -> UNSAT
	#2 global4 -> UNSAT
	#3 other3 -> UNSAT
	#4 global5 -> UNSAT
	#5 global3 -> UNSAT
	Init /\ T /\ !Inv+: passed

Finite sorts: #0

Reusable: 5 -> 5 (0 + 0 failed)
All clauses reusable
@    18s  -------------------------------------------------
	random:	0
	scalls:	953
	scalls-finite:	943
	scalls-infinite:	10
	scalls-finite-full:	0
	cti:	118
	cubes:	119
	subsumed-calls:	1164
	subsumed-subset:	30
	subsumed-varintersect-c:	1066
	subsumed-varintersect-e:	0
	subsumed-query-sat:	57
	subsumed-query-unsat:	11
	subsumed-eq:	87
	unsat-core:	189
	sz-unsat-core-avg:	5.24
	sz-unsat-min-avg:	2.10
	sz-cube-avg:	40.00
	antecedent-reduction-sum:	64
	antecedent-total-sum:	146
	antecedent-reduction-avg:	0.44
	antecedent-calls:	71
	antecedent-calls-reduced:	32
	antecedent-scalls:	211
	time-q-max-finite-ms:	18
	time-q-max-finite-core-ms:	0
	time-q-max-infinite-ms:	5
	time-q-max-infinite-core-ms:	0
	time-cti-bad-sat:	0
	time-cti-bad-unsat:	0
	time-cti-sat:	3
	time-cti-unsat:	4
	time-forward:	1
	time-antecedent:	1
	time-subsume:	0
	time-subsume-query:	0
	time-inv-check-finite:	0
	time-inv-check-infinite:	0
	time-inv-reuse:	0
	time-minimize:	1
	time-qf:	0
	time-sum:	11
@    18s  -------------------------------------------------
@    18s  -------------------------------------------------
@    18s  (incremental SymIC3)
	dep_height[q0] = 0
	dep_height[q1] = 1
	dep_height[q2] = 2
	dep_height[n0] = 100
	dep_height[n1] = 101
	dep_height[n2] = 102
	dep_height[v0] = 200
	dep_height[v1] = 201
(use_wires: False)

Checking property...

@    18s  Storing init values:
@    18s  Init -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(one of the initial states)
	(curr_phase = Q:phase1)
	(phase_becomeLeader = Q:phase4)
	(phase_decide = Q:phase0)
	(phase_recvVote = Q:phase2)
	(phase_sendRequestVote = Q:phase1)
	(phase_sendVote = Q:phase3)
	member(n0, q0)
	member(n0, q1)
	member(n0, q2)
	~decided(n0, v0)
	~decided(n0, v1)
	~decided(n1, v0)
	~decided(n1, v1)
	~decided(n2, v0)
	~decided(n2, v1)
	~leader(n0)
	~leader(n1)
	~leader(n2)
	~vote_msg(n0, n0)
	~vote_msg(n0, n1)
	~vote_msg(n0, n2)
	~vote_msg(n1, n0)
	~vote_msg(n1, n1)
	~vote_msg(n1, n2)
	~vote_msg(n2, n0)
	~vote_msg(n2, n1)
	~vote_msg(n2, n2)
	~vote_request_msg(n0, n0)
	~vote_request_msg(n0, n1)
	~vote_request_msg(n0, n2)
	~vote_request_msg(n1, n0)
	~vote_request_msg(n1, n1)
	~vote_request_msg(n1, n2)
	~vote_request_msg(n2, n0)
	~vote_request_msg(n2, n1)
	~vote_request_msg(n2, n2)
	~voted(n0)
	~voted(n1)
	~voted(n2)
	~votes(n0, n0)
	~votes(n0, n1)
	~votes(n0, n2)
	~votes(n1, n0)
	~votes(n1, n1)
	~votes(n1, n2)
	~votes(n2, n0)
	~votes(n2, n1)
	~votes(n2, n2)
	~member(n1, q0)
	~member(n1, q1)
	~member(n1, q2)
	~member(n2, q0)
	~member(n2, q1)
	~member(n2, q2)

@    18s  F[0] /\ !P -> UNSAT
@    18s  F[0] /\ T /\ !P+ -> UNSAT
Frames: #1
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
@    18s  
Adding frame 1...
@    18s  Is F[0] -> other3? -> UNSAT
@    18s  Is other3 inductive? -> SAT
@    18s  Is F[0] /\ T -> other3+? -> UNSAT
@    18s  Learning in F[1]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    18s  Is F[0] -> global5? -> UNSAT
@    18s  Is global5 inductive? -> UNSAT
@    18s  Is F[0] -> global5_1? -> UNSAT
@    18s  Is global5_1 inductive? -> UNSAT
@    18s  Is F[0] -> global3? -> UNSAT
@    18s  Is global3 inductive? -> SAT
@    18s  Is F[0] /\ T -> global3+? -> UNSAT
@    18s  Learning in F[1]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
@    18s  Is F[0] -> global4? -> UNSAT
@    18s  Is global4 inductive? -> UNSAT
Seeded 5 (global: 3, init: 2) helpers out of 5
@    18s  Learning in F[1]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    18s  Learning in F[1]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    18s  Learning in F[1]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    18s  F[1] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[1])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    18s  F[0] /\ T /\ C+ ?
@    18s  	Ans. UNSAT
@    18s  F[1] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0)))
(relations)
	curr_phase:e3
	phase_decide:e3
(cube: std)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	(curr_phase:e3 = phase_decide:e3)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e3 = phase_decide:e3)
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0)))
(learnt sym-boosted clause)
	~(curr_phase:e3 = phase_decide:e3)
---------------------------
(clause-type: univ)	~(curr_phase = phase_decide)
@    18s  is global clause? No
@    18s  Learning in F[1]: ~(curr_phase = phase_decide)
@    18s  F[1] /\ T /\ !P+ -> UNSAT
Frames: #2
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #6
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
		~(curr_phase = phase_decide)
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    18s  
Adding frame 2...
Trying forwarding F[1]
Forwarded #4 to F[2]
@    18s  Learning in F[2]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    18s  Learning in F[2]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    18s  Learning in F[2]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    18s  Learning in F[2]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    18s  Learning in F[2]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    18s  Learning in F[2]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    18s  Learning in F[2]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    18s  F[2] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[2])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    18s  F[1] /\ T /\ C+ ?
@    18s  	Ans. UNSAT
@    18s  F[2] unsat core #5 	(ucsz: 9 -> 8 -> 5 -> 5)
(minimal unsat core)
	member(n0, q1)
	member(n0, q2)
	~votes(n0, n0)
	leader(n0)
	member(n0, q0)
(clause)
	(~leader(n0) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n0, n0))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	~votes(NODE0, NODE0)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
	leader(NODE0)
(antecedent reduction)
@    19s  antecedent: 3 -> 3

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM0, QUORUM1, ]
(partition) #1 quorum:e2: -> { QUORUM2, QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
(non-epr version)
	(forall NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n0, n0))
(learnt sym-boosted clause)
	(forall NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~member(NODE0, QUORUM0) | votes(NODE0, NODE0))))
---------------------------
(clause-type: non-epr)	(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    19s  is global clause? Yes
@    19s  Learning in F[2]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    19s  F[2] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[2])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    19s  F[1] /\ T /\ C+ ?
@    19s  	Ans. UNSAT
@    19s  F[2] unsat core #6 	(ucsz: 10 -> 6 -> 6)
(minimal unsat core)
	~votes(n0, n0)
	~votes(n0, n1)
	member(n0, q1)
	member(n0, q2)
	member(n1, q0)
	leader(n0)
(clause)
	(~leader(n0) | ~member(n0, q1) | ~member(n0, q2) | ~member(n1, q0) | votes(n0, n0) | votes(n0, n1))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	~votes(NODE0, NODE0)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM1)
	leader(NODE0)
	~votes(NODE0, NODE1)
	member(NODE1, QUORUM0)
(antecedent reduction)
@    19s  antecedent: 5 -> 3 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE1, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #2
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM1, ]
	member(NODE1, V:quorum:e2:) -> [ QUORUM0, ]
(partition) #2 quorum:e2: -> { QUORUM2, QUORUM1, | QUORUM0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	QUORUM0:
		member(NODE1, QUORUM0)
ucmulti:
	member(NODE0, QUORUM1)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: quorum -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> quorum)? False
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM1 . (forall NODE1, QUORUM0, NODE0 . ((~(QUORUM0 = QUORUM1) & ~member(NODE0, QUORUM1)) | ~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
(non-epr version)
	(forall NODE1, QUORUM0, NODE0 . (exists QUORUM1 . ((~(QUORUM0 = QUORUM1) & ~member(NODE0, QUORUM1)) | ~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE1, QUORUM0, NODE0 . (exists QUORUM1 . ((~(QUORUM0 = QUORUM1) & ~member(NODE0, QUORUM1)) | ~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n0, q1) | ~member(n0, q2) | ~member(n1, q0) | votes(n0, n0) | votes(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, QUORUM0, NODE0 . (exists QUORUM1 . ((~(QUORUM0 = QUORUM1) & ~member(NODE0, QUORUM1)) | ~leader(NODE0) | ~member(NODE1, QUORUM0) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
---------------------------
(clause-type: non-epr)	(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    19s  is global clause? Yes
@    19s  Learning in F[2]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    19s  F[2] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[2])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    19s  F[1] /\ T /\ C+ ?
@    19s  	Ans. UNSAT
@    19s  F[2] unsat core #6 	(ucsz: 10 -> 9 -> 6 -> 6)
(minimal unsat core)
	member(n2, q0)
	member(n2, q1)
	~votes(n0, n0)
	member(n0, q2)
	~votes(n0, n2)
	leader(n0)
(clause)
	(~leader(n0) | ~member(n0, q2) | ~member(n2, q0) | ~member(n2, q1) | votes(n0, n0) | votes(n0, n2))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	member(NODE1, QUORUM1)
	~votes(NODE0, NODE0)
	member(NODE0, QUORUM2)
	leader(NODE0)
	~votes(NODE0, NODE1)
	member(NODE1, QUORUM0)
(antecedent reduction)
@    19s  antecedent: 5 -> 3 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE1, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE1, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE1, V:quorum:e2:), ]
ucubes2qv #2
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, ]
	member(NODE1, V:quorum:e2:) -> [ QUORUM0, QUORUM1, ]
(partition) #2 quorum:e2: -> { QUORUM2, | QUORUM0, QUORUM1, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	QUORUM2:
		member(NODE0, QUORUM2)
ucmulti:
	member(NODE1, QUORUM0)
	(epr check: forward)	allowed(arc: quorum -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> quorum)? False
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall QUORUM2, NODE1, NODE0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE0, QUORUM2) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
(non-epr version)
	(forall QUORUM2, NODE1, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE0, QUORUM2) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall QUORUM2, NODE1, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE0, QUORUM2) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n0, q2) | ~member(n2, q0) | ~member(n2, q1) | votes(n0, n0) | votes(n0, n2))
(learnt sym-boosted clause)
	(forall QUORUM2, NODE1, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE0, QUORUM2) | votes(NODE0, NODE0) | votes(NODE0, NODE1))))
---------------------------
(clause-type: non-epr)	(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    19s  is global clause? Yes
@    19s  Learning in F[2]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    19s  F[2] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[2])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    19s  F[1] /\ T /\ C+ ?
@    19s  	Ans. UNSAT
@    19s  F[2] unsat core #3 	(ucsz: 12 -> 11 -> 8 -> 5 -> 4 -> 3 -> 3)
(minimal unsat core)
	~votes(n1, n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | votes(n1, n2))
(relations)
	votes
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	leader(NODE1)
	~votes(NODE1, NODE2)
	leader(NODE0)
(antecedent reduction)
@    19s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~votes(NODE1, NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~votes(NODE1, V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	~votes(NODE1, V:node:e2:) -> [ NODE2, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	leader(V:node:e2:) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE1, NODE2)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
@    19s  is global clause? No
@    19s  Learning in F[2]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
@    19s  F[2] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[2])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    19s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    19s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    19s  F[0] /\ T /\ C+ ?
@    19s  	Ans. UNSAT
@    19s  F[1] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(curr_phase:e3 = Q:phase4)
	(phase_becomeLeader:e3 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e3 = Q:phase4) | ~(phase_becomeLeader:e3 = Q:phase4)))
(relations)
	curr_phase:e3
	phase_becomeLeader:e3
(cube: std)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	(phase_becomeLeader:e3 = curr_phase:e3)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(phase_becomeLeader:e3 = curr_phase:e3)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e3 = Q:phase4) | ~(phase_becomeLeader:e3 = Q:phase4)))
(learnt sym-boosted clause)
	~(phase_becomeLeader:e3 = curr_phase:e3)
---------------------------
(clause-type: univ)	~(phase_becomeLeader = curr_phase)
@    19s  is global clause? No
@    19s  Learning in F[1]: ~(phase_becomeLeader = curr_phase)
@    19s  F[1] /\ T /\ C+ ?
@    19s  	Ans. UNSAT
@    19s  F[2] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0)))
(relations)
	curr_phase:e3
	phase_decide:e3
(cube: std)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	(curr_phase:e3 = phase_decide:e3)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e3 = phase_decide:e3)
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0)))
(learnt sym-boosted clause)
	~(curr_phase:e3 = phase_decide:e3)
---------------------------
(clause-type: univ)	~(curr_phase = phase_decide)
@    19s  is global clause? No
@    19s  Learning in F[2]: ~(curr_phase = phase_decide)
@    19s  F[2] /\ T /\ !P+ -> UNSAT
Frames: #3
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(phase_becomeLeader = curr_phase)
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
	F[2]: #8
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		~(curr_phase = phase_decide)
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    19s  
Adding frame 3...
Trying forwarding F[1]
Forwarded #1 to F[2]
@    20s  Learning in F[2]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
Trying forwarding F[2]
Forwarded #5 to F[3]
@    20s  Learning in F[3]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    20s  Learning in F[3]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
@    20s  Learning in F[3]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    20s  Learning in F[3]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    20s  Learning in F[3]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    20s  Learning in F[3]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    20s  Learning in F[3]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    20s  Learning in F[3]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    20s  Learning in F[3]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    20s  Learning in F[3]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    20s  Learning in F[3]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    20s  F[3] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = false
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[3])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = false
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    20s  F[2] /\ T /\ C+ ?
@    20s  	Ans. UNSAT
@    20s  F[3] unsat core #7 	(ucsz: 11 -> 10 -> 8 -> 7 -> 7)
(minimal unsat core)
	member(n2, q0)
	(phase_decide:e3 = Q:phase0)
	member(n2, q2)
	member(n0, q1)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
	leader(n2)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~leader(n0) | ~leader(n2) | ~member(n0, q1) | ~member(n2, q0) | ~member(n2, q2)))
(relations)
	member
	curr_phase:e3
	leader
	phase_decide:e3
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	member(NODE1, QUORUM2)
	member(NODE0, QUORUM1)
	(curr_phase:e3 = phase:i0)
	(phase_decide:e3 = phase:i0)
	member(NODE1, QUORUM0)
	leader(NODE0)
	leader(NODE1)
(antecedent reduction)
@    20s  antecedent: 5 -> 5

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	member(NODE1, QUORUM2)
	member(NODE0, QUORUM1)
	leader(NODE0)
	member(NODE1, QUORUM0)
	(phase_decide:e3 = curr_phase:e3)
	leader(NODE1)
(qvars eq)
	NODE0
	NODE1
	QUORUM0
	QUORUM1
	QUORUM2
(antecedent eq)
	quorum:e2:
	-> ~(QUORUM0 = QUORUM1)
	-> ~(QUORUM0 = QUORUM2)
	-> ~(QUORUM1 = QUORUM2)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
qv2cubes #3
	QUORUM2 -> [ member(NODE1, QUORUM2), ]
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE1, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE1, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #2
	member(NODE0, V:quorum:e2:) -> [ QUORUM1, ]
	member(NODE1, V:quorum:e2:) -> [ QUORUM2, QUORUM0, ]
(partition) #2 quorum:e2: -> { QUORUM1, | QUORUM2, QUORUM0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	QUORUM1:
		member(NODE0, QUORUM1)
ucmulti:
	member(NODE1, QUORUM0)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: quorum -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> quorum)? False
(epr reduced)
	(~(phase_decide:e3 = curr_phase:e3) | (exists QUORUM0 . (forall NODE1, QUORUM1, NODE0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM1) | (NODE0 = NODE1)))))
(non-epr version)
	(~(phase_decide:e3 = curr_phase:e3) | (forall NODE1, QUORUM1, NODE0 . (exists QUORUM0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM1) | (NODE0 = NODE1)))))
	Both verions not allowed!
(epr-reduction) -> UNSAT
(boosted clause)
	(~(phase_decide:e3 = curr_phase:e3) | (exists QUORUM0 . (forall NODE1, QUORUM1, NODE0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM1) | (NODE0 = NODE1)))))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~leader(n0) | ~leader(n2) | ~member(n0, q1) | ~member(n2, q0) | ~member(n2, q2)))
(learnt sym-boosted clause)
	(~(phase_decide:e3 = curr_phase:e3) | (exists QUORUM0 . (forall NODE1, QUORUM1, NODE0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM1) | (NODE0 = NODE1)))))
---------------------------
(clause-type: epr)	((phase_decide = curr_phase) -> (exists Q0 . (forall N1, Q1, N0 . ((((Q1 = Q0) | member(N1, Q0)) & leader(N0) & leader(N1) & member(N0, Q1)) -> (N0 = N1)))))
@    20s  is global clause? No
@    20s  Learning in F[3]: ((phase_decide = curr_phase) -> (exists Q0 . (forall N1, Q1, N0 . ((((Q1 = Q0) | member(N1, Q0)) & leader(N0) & leader(N1) & member(N0, Q1)) -> (N0 = N1)))))
@    20s  F[3] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[3])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    20s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    20s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    20s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    20s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    20s  F[0] /\ T /\ C+ ?
@    20s  	Ans. UNSAT
@    20s  F[1] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(curr_phase:e3 = Q:phase0)
	(phase_recvVote:e3 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_recvVote:e3 = Q:phase0)))
(relations)
	curr_phase:e3
	phase_recvVote:e3
(cube: std)
	(phase_recvVote:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)

(eq map)
	phase:i0 -> phase_recvVote:e3
(cube eq)
	(curr_phase:e3 = phase_recvVote:e3)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e3 = phase_recvVote:e3)
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_recvVote:e3 = Q:phase0)))
(learnt sym-boosted clause)
	~(curr_phase:e3 = phase_recvVote:e3)
---------------------------
(clause-type: univ)	~(curr_phase = phase_recvVote)
@    20s  is global clause? No
@    20s  Learning in F[1]: ~(curr_phase = phase_recvVote)
@    20s  F[1] /\ T /\ C+ ?
@    20s  	Ans. UNSAT
@    20s  F[2] unsat core #2 	(ucsz: 2 -> 2)
(minimal unsat core)
	(curr_phase:e3 = Q:phase4)
	(phase_becomeLeader:e3 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e3 = Q:phase4) | ~(phase_becomeLeader:e3 = Q:phase4)))
(relations)
	curr_phase:e3
	phase_becomeLeader:e3
(cube: std)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	(phase_becomeLeader:e3 = curr_phase:e3)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(phase_becomeLeader:e3 = curr_phase:e3)
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e3 = Q:phase4) | ~(phase_becomeLeader:e3 = Q:phase4)))
(learnt sym-boosted clause)
	~(phase_becomeLeader:e3 = curr_phase:e3)
---------------------------
(clause-type: univ)	~(phase_becomeLeader = curr_phase)
@    20s  is global clause? No
@    20s  Learning in F[2]: ~(phase_becomeLeader = curr_phase)
@    20s  F[2] /\ T /\ C+ ?
@    20s  	Ans. UNSAT
@    20s  F[3] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0)))
(relations)
	curr_phase:e3
	phase_decide:e3
(cube: std)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	(curr_phase:e3 = phase_decide:e3)
(qvars eq)
(antecedent eq)
(boosted clause)
	~(curr_phase:e3 = phase_decide:e3)
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0)))
(learnt sym-boosted clause)
	~(curr_phase:e3 = phase_decide:e3)
---------------------------
(clause-type: univ)	~(curr_phase = phase_decide)
@    20s  is global clause? No
@    20s  Learning in F[3]: ~(curr_phase = phase_decide)
@    20s  F[3] /\ T /\ !P+ -> UNSAT
Frames: #4
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #1
		~(curr_phase = phase_recvVote)
	F[2]: #2
		~(phase_becomeLeader = curr_phase)
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
	F[3]: #9
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		~(curr_phase = phase_decide)
		(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    20s  
Adding frame 4...
Trying forwarding F[1]
Trying forwarding F[2]
Forwarded #1 to F[3]
@    21s  Learning in F[3]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
Trying forwarding F[3]
Forwarded #5 to F[4]
@    21s  Learning in F[4]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    21s  Learning in F[4]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
@    21s  Learning in F[4]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    21s  Learning in F[4]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    21s  Learning in F[4]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    21s  Learning in F[4]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    21s  Learning in F[4]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    21s  Learning in F[4]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    21s  Learning in F[4]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    21s  Learning in F[4]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    21s  Learning in F[4]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    21s  F[4] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[4])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    21s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    21s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[1] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    21s  	Ans. SAT
(cube in F[1])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[0] /\ T /\ C+ ?
@    21s  	Ans. UNSAT
@    21s  F[1] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	vote_msg(n1, n0)
(clause)
	~vote_msg(n1, n0)
(relations)
	vote_msg
(cube: std)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    21s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~vote_msg(NODE1, NODE0))
---------------------------
(original clause)
	~vote_msg(n1, n0)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~vote_msg(NODE1, NODE0))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~vote_msg(N1, N0))
@    21s  is global clause? No
@    21s  Learning in F[1]: (forall N1, N0 . ~vote_msg(N1, N0))
@    21s  F[1] /\ T /\ C+ ?
@    21s  	Ans. UNSAT
@    21s  F[2] unsat core #3 	(ucsz: 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	(curr_phase:e3 = Q:phase0)
	(phase_recvVote:e3 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_recvVote:e3 = Q:phase0) | ~vote_msg(n1, n0)))
(relations)
	curr_phase:e3
	vote_msg
	phase_recvVote:e3
(cube: std)
	vote_msg(NODE1, NODE0)
	(phase_recvVote:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
(antecedent reduction)
@    21s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_recvVote:e3
(cube eq)
	(curr_phase:e3 = phase_recvVote:e3)
	vote_msg(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~(curr_phase:e3 = phase_recvVote:e3)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_recvVote:e3 = Q:phase0) | ~vote_msg(n1, n0)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~(curr_phase:e3 = phase_recvVote:e3)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
@    21s  is global clause? No
@    21s  Learning in F[2]: (forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
@    21s  F[2] /\ T /\ C+ ?
@    21s  	Ans. UNSAT
@    21s  F[3] unsat core #3 	(ucsz: 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	(curr_phase:e3 = Q:phase4)
	(phase_becomeLeader:e3 = Q:phase4)
(clause)
	(forall Q:phase4 . (~(curr_phase:e3 = Q:phase4) | ~(phase_becomeLeader:e3 = Q:phase4) | ~vote_msg(n1, n0)))
(relations)
	curr_phase:e3
	vote_msg
	phase_becomeLeader:e3
(cube: std)
	vote_msg(NODE1, NODE0)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    21s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	(phase_becomeLeader:e3 = curr_phase:e3)
	vote_msg(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE1, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~vote_msg(NODE1, NODE0)))
---------------------------
(original clause)
	(forall Q:phase4 . (~(curr_phase:e3 = Q:phase4) | ~(phase_becomeLeader:e3 = Q:phase4) | ~vote_msg(n1, n0)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~vote_msg(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
@    21s  is global clause? No
@    21s  Learning in F[3]: (forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
@    21s  F[3] /\ T /\ C+ ?
@    21s  	Ans. UNSAT
@    21s  F[4] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~vote_msg(n1, n0)))
(relations)
	curr_phase:e3
	phase_decide:e3
	vote_msg
(cube: std)
	vote_msg(NODE1, NODE0)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
(antecedent reduction)
@    21s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	vote_msg(NODE1, NODE0)
	(curr_phase:e3 = phase_decide:e3)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~(curr_phase:e3 = phase_decide:e3)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~vote_msg(n1, n0)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~(curr_phase:e3 = phase_decide:e3)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
@    21s  is global clause? No
@    21s  Learning in F[4]: (forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
@    21s  F[4] /\ T /\ !P+ -> UNSAT
Frames: #5
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		~(phase_becomeLeader = curr_phase)
	F[3]: #3
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
		(exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
	F[4]: #9
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
		(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    21s  
Adding frame 5...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Forwarded #1 to F[4]
@    21s  Learning in F[4]: (exists Q0 . (forall N1, N0 . ((leader(N0) & member(N1, Q0)) -> votes(N0, N1))))
Trying forwarding F[4]
Forwarded #5 to F[5]
@    21s  Learning in F[5]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    21s  Learning in F[5]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
@    21s  Learning in F[5]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    21s  Learning in F[5]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    21s  Learning in F[5]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    21s  Learning in F[5]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    21s  Learning in F[5]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    21s  Learning in F[5]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    21s  Learning in F[5]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    21s  Learning in F[5]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    21s  Learning in F[5]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    21s  F[5] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[5])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    21s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    21s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    21s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    21s  F[1] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[2] unsat core #1 	(ucsz: 5 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	leader(n1)
(clause)
	~leader(n1)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n1)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@    22s  is global clause? No
@    22s  Learning in F[2]: (forall N0 . ~leader(N0))
@    22s  F[2] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[3] unsat core #1 	(ucsz: 5 -> 1 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@    22s  is global clause? No
@    22s  Learning in F[3]: (forall N0 . ~leader(N0))
@    22s  F[3] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[4] unsat core #1 	(ucsz: 4 -> 2 -> 1 -> 1)
(minimal unsat core)
	leader(n0)
(clause)
	~leader(n0)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n0)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@    22s  is global clause? No
@    22s  Learning in F[4]: (forall N0 . ~leader(N0))
@    22s  F[4] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[5] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~leader(n0)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
(cube: std)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~leader(n0)))
(learnt sym-boosted clause)
	(forall NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . ((curr_phase = phase_decide) -> ~leader(N0)))
@    22s  is global clause? No
@    22s  Learning in F[5]: (forall N0 . ((curr_phase = phase_decide) -> ~leader(N0)))
@    22s  F[5] /\ T /\ !P+ -> UNSAT
Frames: #6
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		~(phase_becomeLeader = curr_phase)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
	F[4]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
		(forall N0 . ~leader(N0))
	F[5]: #9
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall N0 . ((curr_phase = phase_decide) -> ~leader(N0)))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    22s  
Adding frame 6...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Forwarded #7 to F[6]
@    22s  Learning in F[6]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    22s  Learning in F[6]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    22s  Learning in F[6]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    22s  Learning in F[6]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    22s  Learning in F[6]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    22s  Learning in F[6]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    22s  Learning in F[6]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    22s  Learning in F[6]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    22s  Learning in F[6]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    22s  Learning in F[6]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    22s  Learning in F[6]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    22s  Learning in F[6]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    22s  Learning in F[6]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    22s  F[6] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[6])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    22s  F[5] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[6] unsat core #6 	(ucsz: 7 -> 6 -> 6)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase4)
	~votes(n1, n2)
	~(Q:phase0 = Q:phase4)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase0 = Q:phase4) | votes(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	~votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    22s  antecedent: 3 -> 3

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	~votes(NODE1, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~votes(NODE1, NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~votes(NODE1, V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	~votes(NODE1, V:node:e2:) -> [ NODE2, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	leader(V:node:e2:) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | (curr_phase:e3 = phase_becomeLeader:e3) | votes(NODE1, NODE2)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase0 = Q:phase4) | votes(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | (curr_phase:e3 = phase_becomeLeader:e3) | votes(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | votes(N1, N2))))
@    22s  is global clause? No
@    22s  Learning in F[6]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | votes(N1, N2))))
@    22s  F[6] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[6])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    22s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    22s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    22s  F[4] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[5] unsat core #1 	(ucsz: 7 -> 4 -> 2 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    22s  is global clause? No
@    22s  Learning in F[5]: (forall V0, N0 . ~decided(N0, V0))
@    22s  F[5] /\ T /\ C+ ?
@    22s  	Ans. UNSAT
@    22s  F[6] unsat core #1 	(ucsz: 6 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	decided(n1, v1)
(clause)
	~decided(n1, v1)
(relations)
	decided
(cube: std)
	decided(NODE0, VALUE0)

(boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(original clause)
	~decided(n1, v1)
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . ~decided(NODE0, VALUE0))
---------------------------
(clause-type: univ)	(forall V0, N0 . ~decided(N0, V0))
@    22s  is global clause? No
@    22s  Learning in F[6]: (forall V0, N0 . ~decided(N0, V0))
@    22s  F[6] /\ T /\ !P+ -> UNSAT
Frames: #7
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		~(phase_becomeLeader = curr_phase)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
	F[4]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
		(forall N0 . ~leader(N0))
	F[5]: #2
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N1, N2))))
		(forall N0 . ((curr_phase = phase_decide) -> ~leader(N0)))
	F[6]: #8
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | votes(N1, N2))))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall V0, N0 . ~decided(N0, V0))
		(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    22s  
Adding frame 7...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Forwarded #6 to F[7]
@    23s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    23s  Learning in F[7]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    23s  Learning in F[7]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    23s  Learning in F[7]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    23s  Learning in F[7]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    23s  Learning in F[7]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    23s  Learning in F[7]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    23s  Learning in F[7]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    23s  Learning in F[7]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    23s  Learning in F[7]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    23s  Learning in F[7]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    23s  Learning in F[7]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    23s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = false
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[7])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = false
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    23s  F[6] /\ T /\ C+ ?
@    23s  	Ans. UNSAT
@    23s  F[7] unsat core #3 	(ucsz: 12 -> 10 -> 9 -> 4 -> 3 -> 3)
(minimal unsat core)
	decided(n2, v1)
	~votes(n0, n1)
	leader(n0)
(clause)
	(~decided(n2, v1) | ~leader(n0) | votes(n0, n1))
(relations)
	votes
	leader
	decided
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE2, VALUE0)
	~votes(NODE0, NODE1)
	leader(NODE0)
(antecedent reduction)
@    23s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~votes(NODE0, NODE1), ]
	NODE2 -> [ decided(NODE2, VALUE0), ]
	NODE0 -> [ ~votes(NODE0, NODE1), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(NODE0, V:node:e2:), ]
	NODE2 -> [ decided(V:node:e2:, VALUE0), ]
	NODE0 -> [ leader(V:node:e2:), ~votes(V:node:e2:, NODE1), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE1)) -> [ NODE0, ]
	decided(V:node:e2:, VALUE0) -> [ NODE2, ]
	~votes(NODE0, V:node:e2:) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE2, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE1)))
---------------------------
(original clause)
	(~decided(n2, v1) | ~leader(n0) | votes(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE2, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . ((decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N1))))
@    23s  is global clause? No
@    23s  Learning in F[7]: (forall N1, V0, N2, N0 . ((decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N1))))
@    23s  F[7] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[7])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    23s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    23s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    23s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    23s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    23s  F[4] /\ T /\ C+ ?
@    23s  	Ans. UNSAT
@    23s  F[5] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1))
(relations)
	leader
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    23s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    23s  is global clause? No
@    23s  Learning in F[5]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    23s  F[5] /\ T /\ C+ ?
@    23s  	Ans. UNSAT
@    23s  F[6] unsat core #5 	(ucsz: 6 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	~(Q:phase2 = Q:phase4)
	(phase_becomeLeader:e3 = Q:phase4)
	leader(n1)
	(curr_phase:e3 = Q:phase2)
(clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
(cube: std)
	~(phase:i0 = phase:i1)
	(phase_becomeLeader:e3 = phase:i1)
	leader(NODE1)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    23s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	leader(NODE1)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE1)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    23s  is global clause? No
@    23s  Learning in F[6]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    23s  F[6] /\ T /\ C+ ?
@    23s  	Ans. UNSAT
@    23s  F[7] unsat core #2 	(ucsz: 7 -> 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	decided(n1, v0)
	leader(n0)
(clause)
	(~decided(n1, v0) | ~leader(n0))
(relations)
	leader
	decided
(cube: std)
	decided(NODE1, VALUE0)
	leader(NODE0)
(antecedent reduction)
@    23s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0)))
---------------------------
(original clause)
	(~decided(n1, v0) | ~leader(n0))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    23s  is global clause? No
@    23s  Learning in F[7]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    23s  F[7] /\ T /\ !P+ -> UNSAT
Frames: #8
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		~(phase_becomeLeader = curr_phase)
	F[3]: #2
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
	F[4]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
		(forall N0 . ~leader(N0))
	F[5]: #2
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
		(forall N0 . ((curr_phase = phase_decide) -> ~leader(N0)))
	F[6]: #2
		(forall V0, N0 . ~decided(N0, V0))
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
	F[7]: #8
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    23s  
Adding frame 8...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Trying forwarding F[7]
Forwarded #7 to F[8]
@    24s  Learning in F[8]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    24s  Learning in F[8]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    24s  Learning in F[8]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    24s  Learning in F[8]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    24s  Learning in F[8]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    24s  Learning in F[8]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    24s  Learning in F[8]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    24s  Learning in F[8]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    24s  Learning in F[8]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    24s  Learning in F[8]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    24s  Learning in F[8]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    24s  Learning in F[8]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    24s  Learning in F[8]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    24s  F[8] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[8])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    24s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    24s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    24s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    24s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    24s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    24s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = false
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    24s  F[4] /\ T /\ C+ ?
@    24s  	Ans. UNSAT
@    24s  F[5] unsat core #5 	(ucsz: 7 -> 5 -> 5)
(minimal unsat core)
	member(n0, q1)
	member(n0, q2)
	member(n0, q0)
	leader(n1)
	~votes(n1, n0)
(clause)
	(~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n1, n0))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	~votes(NODE1, NODE0)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
	leader(NODE1)
(antecedent reduction)
@    24s  antecedent: 5 -> 3 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM0, QUORUM1, ]
(partition) #1 quorum:e2: -> { QUORUM2, QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
(non-epr version)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
(epr-reduction) -> UNSAT
(boosted clause)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
---------------------------
(original clause)
	(~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n1, n0))
(learnt sym-boosted clause)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
---------------------------
(clause-type: epr)	(exists Q0 . (forall N1, N0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    24s  is global clause? No
@    24s  Learning in F[5]: (exists Q0 . (forall N1, N0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    24s  F[5] /\ T /\ C+ ?
@    24s  	Ans. UNSAT
@    24s  F[6] unsat core #5 	(ucsz: 9 -> 5 -> 5 -> 5)
(minimal unsat core)
	member(n0, q1)
	member(n0, q2)
	member(n0, q0)
	leader(n1)
	~votes(n1, n0)
(clause)
	(~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n1, n0))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	~votes(NODE1, NODE0)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
	leader(NODE1)
(antecedent reduction)
@    24s  antecedent: 5 -> 3 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM0, QUORUM1, ]
(partition) #1 quorum:e2: -> { QUORUM2, QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
(non-epr version)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
---------------------------
(original clause)
	(~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
---------------------------
(clause-type: non-epr)	(forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    24s  is global clause? Yes
@    24s  Learning in F[8]: (forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    24s  F[6] /\ T /\ C+ ?
@    24s  	Ans. UNSAT
@    25s  F[7] unsat core #5 	(ucsz: 15 -> 14 -> 12 -> 10 -> 8 -> 5 -> 5)
(minimal unsat core)
	member(n0, q1)
	member(n0, q2)
	member(n0, q0)
	leader(n1)
	~votes(n1, n0)
(clause)
	(~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n1, n0))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	~votes(NODE1, NODE0)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
	leader(NODE1)
(antecedent reduction)
@    25s  antecedent: 5 -> 3 (reduced)
	removed: NODE0
	removed: NODE1

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM0, QUORUM1, ]
(partition) #1 quorum:e2: -> { QUORUM2, QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
(non-epr version)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
---------------------------
(original clause)
	(~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2) | votes(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE1) | ~member(NODE0, QUORUM0) | votes(NODE1, NODE0))))
---------------------------
(clause-type: non-epr)	(forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    25s  is global clause? Yes
@    25s  Learning in F[8]: (forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    25s  F[7] /\ T /\ C+ ?
@    25s  	Ans. UNSAT
@    25s  F[8] unsat core #5 	(ucsz: 17 -> 13 -> 11 -> 10 -> 5 -> 5 -> 5)
(minimal unsat core)
	member(n0, q1)
	member(n0, q2)
	leader(n0)
	leader(n1)
	member(n0, q0)
(clause)
	(~leader(n0) | ~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2))
(relations)
	member
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
(cube: std)
	leader(NODE1)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM1)
	member(NODE0, QUORUM0)
	leader(NODE0)
(antecedent reduction)
@    25s  antecedent: 5 -> 5

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE0, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE0, V:quorum:e2:), ]
ucubes2qv #1
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM0, QUORUM1, ]
(partition) #1 quorum:e2: -> { QUORUM2, QUORUM0, QUORUM1, | }
	#0 singles, #1 multiples (out of #1 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE0 . (~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM0) | (NODE0 = NODE1))))
(non-epr version)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM0) | (NODE0 = NODE1))))
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM0) | (NODE0 = NODE1))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~member(n0, q0) | ~member(n0, q1) | ~member(n0, q2))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (exists QUORUM0 . (~leader(NODE0) | ~leader(NODE1) | ~member(NODE0, QUORUM0) | (NODE0 = NODE1))))
---------------------------
(clause-type: non-epr)	(forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
@    25s  is global clause? No
@    25s  Learning in F[8]: (forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
@    25s  F[8] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[8])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    25s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    25s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    25s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    25s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    25s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    25s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    25s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    25s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    25s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    26s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    26s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    26s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    26s  F[1] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[2] unsat core #1 	(ucsz: 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n1, n1)
(clause)
	~votes(n1, n1)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(original clause)
	~votes(n1, n1)
(learnt sym-boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~votes(N0, N0))
@    26s  is global clause? No
@    26s  Learning in F[2]: (forall N0 . ~votes(N0, N0))
@    26s  F[2] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[3] unsat core #1 	(ucsz: 5 -> 4 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n1, n1)
(clause)
	~votes(n1, n1)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)

(boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(original clause)
	~votes(n1, n1)
(learnt sym-boosted clause)
	(forall NODE0 . ~votes(NODE0, NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~votes(N0, N0))
@    26s  is global clause? No
@    26s  Learning in F[3]: (forall N0 . ~votes(N0, N0))
@    26s  F[3] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[4] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	votes(n1, n1)
	(phase_becomeLeader:e3 = Q:phase2)
	(curr_phase:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n1, n1)))
(relations)
	votes
	curr_phase:e3
	phase_becomeLeader:e3
(cube: std)
	votes(NODE0, NODE0)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	(phase_becomeLeader:e3 = curr_phase:e3)
	votes(NODE0, NODE0)
(qvars eq)
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~votes(NODE0, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n1, n1)))
(learnt sym-boosted clause)
	(forall NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~votes(NODE0, NODE0)))
---------------------------
(clause-type: univ)	(forall N0 . ((phase_becomeLeader = curr_phase) -> ~votes(N0, N0)))
@    26s  is global clause? No
@    26s  Learning in F[4]: (forall N0 . ((phase_becomeLeader = curr_phase) -> ~votes(N0, N0)))
@    26s  F[4] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[5] unsat core #2 	(ucsz: 12 -> 6 -> 6 -> 4 -> 2 -> 2)
(minimal unsat core)
	votes(n1, n1)
	leader(n0)
(clause)
	(~leader(n0) | ~votes(n1, n1))
(relations)
	votes
	leader
(cube: std)
	votes(NODE1, NODE1)
	leader(NODE0)
(antecedent reduction)
@    26s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE1, NODE1) | ~leader(NODE0)))
---------------------------
(original clause)
	(~leader(n0) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE1, NODE1) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N1, N1) -> ~leader(N0)))
@    26s  is global clause? No
@    26s  Learning in F[5]: (forall N1, N0 . (votes(N1, N1) -> ~leader(N0)))
@    26s  F[5] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[6] unsat core #3 	(ucsz: 7 -> 6 -> 3 -> 3)
(minimal unsat core)
	votes(n1, n1)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | ~votes(n1, n1))
(relations)
	votes
	leader
(cube: std)
	votes(NODE1, NODE1)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    26s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~votes(NODE1, NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~votes(NODE1, NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N1, N1) & leader(N0) & leader(N1)) -> (N0 = N1)))
@    26s  is global clause? No
@    26s  Learning in F[6]: (forall N1, N0 . ((votes(N1, N1) & leader(N0) & leader(N1)) -> (N0 = N1)))
@    26s  F[6] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[7] unsat core #6 	(ucsz: 13 -> 12 -> 8 -> 8 -> 6 -> 6)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase4)
	votes(n1, n1)
	~(Q:phase2 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~votes(n1, n1) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
(cube: std)
	~(phase:i1 = phase:i0)
	votes(NODE1, NODE1)
	leader(NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    26s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	votes(NODE1, NODE1)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~votes(NODE1, NODE1) | ~leader(NODE1) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~votes(n1, n1) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~votes(NODE1, NODE1) | ~leader(NODE1) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N1, N1) & leader(N1) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    26s  is global clause? No
@    26s  Learning in F[7]: (forall N1, N0 . ((votes(N1, N1) & leader(N1) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    26s  F[7] /\ T /\ C+ ?
@    26s  	Ans. UNSAT
@    26s  F[8] unsat core #6 	(ucsz: 8 -> 7 -> 6 -> 6)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase4)
	votes(n1, n1)
	decided(n1, v1)
	~(Q:phase0 = Q:phase4)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase4, Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n1, v1) | ~leader(n0) | ~votes(n1, n1) | (Q:phase0 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
	decided
(cube: std)
	~(phase:i1 = phase:i0)
	votes(NODE1, NODE1)
	leader(NODE0)
	decided(NODE1, VALUE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
(antecedent reduction)
@    26s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	votes(NODE1, NODE1)
	decided(NODE1, VALUE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~votes(NODE1, NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n1, v1) | ~leader(n0) | ~votes(n1, n1) | (Q:phase0 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~votes(NODE1, NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((votes(N1, N1) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    26s  is global clause? No
@    26s  Learning in F[8]: (forall N1, V0, N0 . ((votes(N1, N1) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    26s  F[8] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[8])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[7] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    27s  F[8] unsat core #5 	(ucsz: 14 -> 12 -> 10 -> 9 -> 7 -> 5 -> 5)
(minimal unsat core)
	votes(n0, n0)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
	decided(n1, v1)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~votes(n0, n0)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	votes
	decided
(cube: std)
	votes(NODE0, NODE0)
	decided(NODE1, VALUE0)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    27s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	votes(NODE0, NODE0)
	decided(NODE1, VALUE0)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~votes(NODE0, NODE0) | (NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~(curr_phase:e3 = phase_decide:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~votes(n0, n0)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~votes(NODE0, NODE0) | (NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~(curr_phase:e3 = phase_decide:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((votes(N0, N0) & decided(N1, V0) & (curr_phase = phase_decide) & leader(N0)) -> (N0 = N1)))
@    27s  is global clause? No
@    27s  Learning in F[8]: (forall N1, V0, N0 . ((votes(N0, N0) & decided(N1, V0) & (curr_phase = phase_decide) & leader(N0)) -> (N0 = N1)))
@    27s  F[8] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[8])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    27s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false			--> modified
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    27s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    27s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    27s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    27s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    27s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    27s  F[1] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    27s  F[2] unsat core #1 	(ucsz: 4 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n1)
(clause)
	~votes(n0, n1)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE1)
(antecedent reduction)
@    27s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(original clause)
	~votes(n0, n1)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~votes(N0, N1))
@    27s  is global clause? No
@    27s  Learning in F[2]: (forall N1, N0 . ~votes(N0, N1))
@    27s  F[2] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    27s  F[3] unsat core #1 	(ucsz: 5 -> 1 -> 1 -> 1)
(minimal unsat core)
	votes(n0, n1)
(clause)
	~votes(n0, n1)
(relations)
	votes
(cube: std)
	votes(NODE0, NODE1)
(antecedent reduction)
@    27s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(original clause)
	~votes(n0, n1)
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ~votes(NODE0, NODE1))
---------------------------
(clause-type: univ)	(forall N1, N0 . ~votes(N0, N1))
@    27s  is global clause? No
@    27s  Learning in F[3]: (forall N1, N0 . ~votes(N0, N1))
@    27s  F[3] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    27s  F[4] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase2)
	votes(n0, n1)
	(curr_phase:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n1)))
(relations)
	votes
	curr_phase:e3
	phase_becomeLeader:e3
(cube: std)
	votes(NODE0, NODE1)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    27s  antecedent: 2 -> 0 (reduced)
	removed: NODE0
	removed: NODE1

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE1)
	(phase_becomeLeader:e3 = curr_phase:e3)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~(phase_becomeLeader:e3 = curr_phase:e3)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | ~(phase_becomeLeader:e3 = curr_phase:e3)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (votes(N0, N1) -> ~(phase_becomeLeader = curr_phase)))
@    27s  is global clause? No
@    27s  Learning in F[4]: (forall N1, N0 . (votes(N0, N1) -> ~(phase_becomeLeader = curr_phase)))
@    27s  F[4] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    27s  F[5] unsat core #1 	(ucsz: 4 -> 2 -> 1 -> 1)
(minimal unsat core)
	leader(n2)
(clause)
	~leader(n2)
(relations)
	leader
(cube: std)
	leader(NODE0)

(boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(original clause)
	~leader(n2)
(learnt sym-boosted clause)
	(forall NODE0 . ~leader(NODE0))
---------------------------
(clause-type: univ)	(forall N0 . ~leader(N0))
@    27s  is global clause? No
@    27s  Learning in F[5]: (forall N0 . ~leader(N0))
@    27s  F[5] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    27s  F[6] unsat core #2 	(ucsz: 4 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n2)
(clause)
	(~leader(n0) | ~leader(n2))
(relations)
	leader
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    27s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    27s  is global clause? No
@    27s  Learning in F[6]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    27s  F[6] /\ T /\ C+ ?
@    27s  	Ans. UNSAT
@    28s  F[7] unsat core #5 	(ucsz: 6 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	~(Q:phase2 = Q:phase4)
	(phase_becomeLeader:e3 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	leader(n2)
(clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n2) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
(cube: std)
	~(phase:i0 = phase:i1)
	(phase_becomeLeader:e3 = phase:i1)
	leader(NODE1)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    28s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	leader(NODE1)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE1)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n2) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    28s  is global clause? No
@    28s  Learning in F[7]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    28s  F[7] /\ T /\ C+ ?
@    28s  	Ans. UNSAT
@    28s  F[8] unsat core #5 	(ucsz: 7 -> 6 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	~(Q:phase0 = Q:phase4)
	(curr_phase:e3 = Q:phase0)
	(phase_becomeLeader:e3 = Q:phase4)
	decided(n2, v0)
(clause)
	(forall Q:phase0, Q:phase4 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n2, v0) | ~leader(n0) | (Q:phase0 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	decided
(cube: std)
	~(phase:i0 = phase:i1)
	(phase_becomeLeader:e3 = phase:i1)
	decided(NODE1, VALUE0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    28s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	decided(NODE1, VALUE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase0, Q:phase4 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n2, v0) | ~leader(n0) | (Q:phase0 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    28s  is global clause? No
@    28s  Learning in F[8]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    28s  F[8] /\ T /\ !P+ -> UNSAT
Frames: #9
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		~(phase_becomeLeader = curr_phase)
	F[3]: #3
		~(curr_phase = phase_decide)
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
		(forall N1, N0 . ~votes(N0, N1))
	F[4]: #2
		(forall N1, N0 . (votes(N0, N1) -> ~(phase_becomeLeader = curr_phase)))
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
	F[5]: #1
		(forall N0 . ~leader(N0))
	F[6]: #2
		(forall V0, N0 . ~decided(N0, V0))
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
	F[7]: #2
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
	F[8]: #10
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
		(forall N1, V0, N0 . ((votes(N0, N0) & decided(N1, V0) & (curr_phase = phase_decide) & leader(N0)) -> (N0 = N1)))
@    28s  
Adding frame 9...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Trying forwarding F[7]
Trying forwarding F[8]
Forwarded #8 to F[9]
@    28s  Learning in F[9]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    28s  Learning in F[9]: (forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
@    28s  Learning in F[9]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    28s  Learning in F[9]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    28s  Learning in F[9]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    28s  Learning in F[9]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    28s  Learning in F[9]: (forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    28s  Learning in F[9]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    28s  Learning in F[9]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    28s  Learning in F[9]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    28s  Learning in F[9]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    28s  Learning in F[9]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    28s  Learning in F[9]: (forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    28s  Learning in F[9]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    28s  Learning in F[9]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    28s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[9])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    28s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    28s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    29s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[6] /\ T /\ C+ ?
@    29s  	Ans. UNSAT
@    29s  F[7] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase2)
	decided(n1, v1)
	(curr_phase:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~decided(n1, v1)))
(relations)
	curr_phase:e3
	phase_becomeLeader:e3
	decided
(cube: std)
	decided(NODE0, VALUE0)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	(phase_becomeLeader:e3 = curr_phase:e3)
	decided(NODE0, VALUE0)
(qvars eq)
	VALUE0
	NODE0
(antecedent eq)
(boosted clause)
	(forall VALUE0, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~decided(NODE0, VALUE0)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~decided(n1, v1)))
(learnt sym-boosted clause)
	(forall VALUE0, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~decided(NODE0, VALUE0)))
---------------------------
(clause-type: univ)	(forall V0, N0 . ((phase_becomeLeader = curr_phase) -> ~decided(N0, V0)))
@    29s  is global clause? No
@    29s  Learning in F[7]: (forall V0, N0 . ((phase_becomeLeader = curr_phase) -> ~decided(N0, V0)))
@    29s  F[7] /\ T /\ C+ ?
@    29s  	Ans. UNSAT
@    29s  F[8] unsat core #2 	(ucsz: 6 -> 4 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	decided(n1, v1)
(clause)
	(~decided(n1, v1) | ~leader(n0))
(relations)
	leader
	decided
(cube: std)
	decided(NODE1, VALUE0)
	leader(NODE0)
(antecedent reduction)
@    29s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0)))
---------------------------
(original clause)
	(~decided(n1, v1) | ~leader(n0))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    29s  is global clause? No
@    29s  Learning in F[8]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    29s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    29s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    29s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    29s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    29s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    29s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    29s  F[3] /\ T /\ C+ ?
@    29s  	Ans. UNSAT
@    29s  F[4] unsat core #2 	(ucsz: 10 -> 8 -> 2 -> 2 -> 2)
(minimal unsat core)
	votes(n1, n2)
	votes(n0, n2)
(clause)
	(~votes(n0, n2) | ~votes(n1, n2))
(relations)
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	votes(NODE1, NODE2)
(antecedent reduction)
@    29s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~votes(n0, n2) | ~votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    29s  is global clause? No
@    29s  Learning in F[4]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    29s  F[4] /\ T /\ C+ ?
@    29s  	Ans. UNSAT
@    29s  F[5] unsat core #4 	(ucsz: 6 -> 4 -> 4)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase2)
	votes(n1, n2)
	votes(n0, n2)
	(curr_phase:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n2) | ~votes(n1, n2)))
(relations)
	votes
	curr_phase:e3
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	votes(NODE1, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    29s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	votes(NODE1, NODE2)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), ]
ucubes2qv #2
	votes(V:node:e2:, NODE2) -> [ NODE1, NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #2 node:e2: -> { NODE1, NODE0, | NODE2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		votes(NODE0, NODE2)
		votes(NODE1, NODE2)
ucmulti:
	votes(NODE0, NODE2)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (exists NODE0 . (forall NODE2 . (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
(non-epr version)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (forall NODE2 . (exists NODE0 . (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (forall NODE2 . (exists NODE0 . (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n2) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (forall NODE2 . (exists NODE0 . (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
---------------------------
(clause-type: non-epr)	((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (~(N2 = N0) & ~votes(N0, N2)))))
@    29s  is global clause? No
@    29s  Learning in F[5]: ((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (~(N2 = N0) & ~votes(N0, N2)))))
@    29s  F[5] /\ T /\ C+ ?
@    29s  	Ans. UNSAT
@    29s  F[6] unsat core #3 	(ucsz: 5 -> 3 -> 3)
(minimal unsat core)
	votes(n1, n2)
	votes(n0, n2)
	leader(n1)
(clause)
	(~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2))
(relations)
	votes
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    29s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), ]
ucubes2qv #3
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	votes(V:node:e2:, NODE2) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE1, | NODE0, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N1) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    29s  is global clause? No
@    29s  Learning in F[6]: (forall N1, N2, N0 . ((leader(N1) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    29s  F[6] /\ T /\ C+ ?
@    29s  	Ans. UNSAT
@    30s  F[7] unsat core #4 	(ucsz: 14 -> 12 -> 10 -> 4 -> 4 -> 4)
(minimal unsat core)
	votes(n1, n2)
	votes(n0, n2)
	leader(n1)
	leader(n0)
(clause)
	(~leader(n0) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2))
(relations)
	votes
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	leader(NODE1)
	votes(NODE1, NODE2)
	leader(NODE0)
(antecedent reduction)
@    30s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #2
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE1, NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #2 node:e2: -> { NODE1, NODE0, | NODE2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		votes(NODE0, NODE2)
		votes(NODE1, NODE2)
ucmulti:
	votes(NODE0, NODE2)
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2)))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & ~votes(N0, N2)))))
@    30s  is global clause? No
@    30s  Learning in F[7]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & ~votes(N0, N2)))))
@    30s  F[7] /\ T /\ C+ ?
@    30s  	Ans. UNSAT
@    30s  F[8] unsat core #7 	(ucsz: 8 -> 7 -> 7)
(minimal unsat core)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	~(Q:phase2 = Q:phase4)
	leader(n0)
	leader(n1)
	(phase_becomeLeader:e3 = Q:phase4)
(clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = phase:i1)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	~(phase:i0 = phase:i1)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    30s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	votes(NODE1, NODE2)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #2
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE1, NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #2 node:e2: -> { NODE1, NODE0, | NODE2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		votes(NODE0, NODE2)
		votes(NODE1, NODE2)
ucmulti:
	votes(NODE0, NODE2)
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	((curr_phase:e3 = phase_becomeLeader:e3) | (exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
(non-epr version)
	((curr_phase:e3 = phase_becomeLeader:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	((curr_phase:e3 = phase_becomeLeader:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	((curr_phase:e3 = phase_becomeLeader:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
---------------------------
(clause-type: non-epr)	((exists N2 . (forall N0 . (((N2 = N0) | leader(N0)) & ((N2 = N0) | votes(N0, N2))))) -> (curr_phase = phase_becomeLeader))
@    30s  is global clause? No
@    30s  Learning in F[8]: ((exists N2 . (forall N0 . (((N2 = N0) | leader(N0)) & ((N2 = N0) | votes(N0, N2))))) -> (curr_phase = phase_becomeLeader))
@    30s  F[8] /\ T /\ C+ ?
@    30s  	Ans. UNSAT
@    30s  F[9] unsat core #6 	(ucsz: 11 -> 9 -> 8 -> 6 -> 6)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	votes(n0, n2)
	votes(n1, n2)
	decided(n1, v1)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	votes
	decided
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    31s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	votes(NODE0, NODE2)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE2)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ decided(NODE1, VALUE0), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), decided(V:node:e2:, VALUE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(decided(V:node:e2:, VALUE0) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    31s  is global clause? No
@    31s  Learning in F[9]: (forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    31s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[9])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    31s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    31s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    31s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    31s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = false
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    31s  F[6] /\ T /\ C+ ?
@    31s  	Ans. UNSAT
@    31s  F[7] unsat core #3 	(ucsz: 13 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 3)
(minimal unsat core)
	~voted(n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | voted(n2))
(relations)
	voted
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~voted(NODE2)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    32s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ leader(NODE1), ]
	NODE2 -> [ ~voted(NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ leader(V:node:e2:), ]
	NODE2 -> [ ~voted(V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #2
	~voted(V:node:e2:) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE1, NODE0, ]
(partition) #2 node:e2: -> { NODE2, | NODE1, NODE0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~voted(NODE2)
ucmulti:
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | voted(n2))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    32s  is global clause? No
@    32s  Learning in F[7]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    32s  F[7] /\ T /\ C+ ?
@    32s  	Ans. UNSAT
@    32s  F[8] unsat core #3 	(ucsz: 13 -> 10 -> 8 -> 6 -> 3 -> 3)
(minimal unsat core)
	~voted(n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | voted(n2))
(relations)
	voted
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~voted(NODE2)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    33s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ leader(NODE1), ]
	NODE2 -> [ ~voted(NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ leader(V:node:e2:), ]
	NODE2 -> [ ~voted(V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #2
	~voted(V:node:e2:) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE1, NODE0, ]
(partition) #2 node:e2: -> { NODE2, | NODE1, NODE0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~voted(NODE2)
ucmulti:
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | voted(n2))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    33s  is global clause? No
@    33s  Learning in F[8]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    33s  F[8] /\ T /\ C+ ?
@    33s  	Ans. UNSAT
@    33s  F[9] unsat core #3 	(ucsz: 14 -> 12 -> 9 -> 8 -> 3 -> 3 -> 3)
(minimal unsat core)
	~voted(n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | voted(n2))
(relations)
	voted
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~voted(NODE2)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    33s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ leader(NODE1), ]
	NODE2 -> [ ~voted(NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ leader(V:node:e2:), ]
	NODE2 -> [ ~voted(V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #2
	~voted(V:node:e2:) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE1, NODE0, ]
(partition) #2 node:e2: -> { NODE2, | NODE1, NODE0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~voted(NODE2)
ucmulti:
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | voted(n2))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | voted(NODE2))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    33s  is global clause? No
@    33s  Learning in F[9]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    33s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[9])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    33s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    33s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    33s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    33s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    33s  F[6] /\ T /\ C+ ?
@    33s  	Ans. UNSAT
@    34s  F[7] unsat core #4 	(ucsz: 14 -> 12 -> 10 -> 8 -> 7 -> 6 -> 5 -> 4 -> 4)
(minimal unsat core)
	~votes(n0, n2)
	~votes(n1, n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | votes(n0, n2) | votes(n1, n2))
(relations)
	votes
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	leader(NODE1)
	~votes(NODE1, NODE2)
	~votes(NODE0, NODE2)
	leader(NODE0)
(antecedent reduction)
@    35s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ ~votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~votes(NODE0, NODE2), ~votes(NODE1, NODE2), ]
	NODE0 -> [ ~votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~votes(NODE1, V:node:e2:), ~votes(NODE0, V:node:e2:), ]
	NODE0 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #2
	(~votes(NODE0, V:node:e2:) & ~votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE1, NODE0, ]
(partition) #2 node:e2: -> { NODE2, | NODE1, NODE0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~votes(NODE0, NODE2)
		~votes(NODE1, NODE2)
ucmulti:
	~votes(NODE0, NODE2)
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & votes(NODE0, NODE2)))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & votes(NODE0, NODE2)))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & votes(NODE0, NODE2)))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | votes(n0, n2) | votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & votes(NODE0, NODE2)))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & votes(N0, N2)))))
@    35s  is global clause? No
@    35s  Learning in F[7]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & votes(N0, N2)))))
@    35s  F[7] /\ T /\ C+ ?
@    35s  	Ans. UNSAT
@    35s  F[8] unsat core #4 	(ucsz: 10 -> 9 -> 7 -> 4 -> 4)
(minimal unsat core)
	~vote_msg(n2, n0)
	~vote_msg(n2, n1)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | vote_msg(n2, n0) | vote_msg(n2, n1))
(relations)
	leader
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_msg(NODE2, NODE1)
	~vote_msg(NODE2, NODE0)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    36s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~vote_msg(NODE2, NODE1), leader(NODE1), ]
	NODE2 -> [ ~vote_msg(NODE2, NODE1), ~vote_msg(NODE2, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE2, NODE0), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_msg(NODE2, V:node:e2:), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_msg(V:node:e2:, NODE1), ~vote_msg(V:node:e2:, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE2, V:node:e2:), leader(V:node:e2:), ]
ucubes2qv #2
	(leader(V:node:e2:) & ~vote_msg(NODE2, V:node:e2:)) -> [ NODE1, NODE0, ]
	(~vote_msg(V:node:e2:, NODE0) & ~vote_msg(V:node:e2:, NODE1)) -> [ NODE2, ]
(partition) #2 node:e2: -> { NODE1, NODE0, | NODE2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~vote_msg(NODE2, NODE1)
		~vote_msg(NODE2, NODE0)
ucmulti:
	~vote_msg(NODE2, NODE0)
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_msg(NODE2, NODE0)))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_msg(NODE2, NODE0)))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_msg(NODE2, NODE0)))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | vote_msg(n2, n0) | vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_msg(NODE2, NODE0)))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
@    36s  is global clause? No
@    36s  Learning in F[8]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
@    36s  F[8] /\ T /\ C+ ?
@    36s  	Ans. UNSAT
@    36s  F[9] unsat core #4 	(ucsz: 15 -> 13 -> 10 -> 5 -> 4 -> 4)
(minimal unsat core)
	~vote_msg(n2, n0)
	~vote_msg(n2, n1)
	leader(n0)
	decided(n1, v1)
(clause)
	(~decided(n1, v1) | ~leader(n0) | vote_msg(n2, n0) | vote_msg(n2, n1))
(relations)
	leader
	decided
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_msg(NODE2, NODE1)
	~vote_msg(NODE2, NODE0)
	decided(NODE1, VALUE0)
	leader(NODE0)
(antecedent reduction)
@    36s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~vote_msg(NODE2, NODE1), decided(NODE1, VALUE0), ]
	NODE2 -> [ ~vote_msg(NODE2, NODE1), ~vote_msg(NODE2, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE2, NODE0), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ decided(V:node:e2:, VALUE0), ~vote_msg(NODE2, V:node:e2:), ]
	NODE2 -> [ ~vote_msg(V:node:e2:, NODE1), ~vote_msg(V:node:e2:, NODE0), ]
	NODE0 -> [ ~vote_msg(NODE2, V:node:e2:), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~vote_msg(NODE2, V:node:e2:)) -> [ NODE0, ]
	(~vote_msg(V:node:e2:, NODE0) & ~vote_msg(V:node:e2:, NODE1)) -> [ NODE2, ]
	(decided(V:node:e2:, VALUE0) & ~vote_msg(NODE2, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_msg(NODE2, NODE0) | vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~decided(n1, v1) | ~leader(n0) | vote_msg(n2, n0) | vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_msg(NODE2, NODE0) | vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
@    36s  is global clause? No
@    36s  Learning in F[9]: (forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
@    36s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[9])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    36s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    37s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    37s  F[7] /\ T /\ C+ ?
@    37s  	Ans. UNSAT
@    37s  F[8] unsat core #4 	(ucsz: 10 -> 9 -> 7 -> 4 -> 4)
(minimal unsat core)
	~vote_msg(n2, n0)
	~votes(n1, n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | vote_msg(n2, n0) | votes(n1, n2))
(relations)
	votes
	leader
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_msg(NODE2, NODE0)
	leader(NODE1)
	~votes(NODE1, NODE2)
	leader(NODE0)
(antecedent reduction)
@    37s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~vote_msg(NODE2, NODE0), ~votes(NODE1, NODE2), ]
	NODE0 -> [ ~vote_msg(NODE2, NODE0), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_msg(V:node:e2:, NODE0), ~votes(NODE1, V:node:e2:), ]
	NODE0 -> [ ~vote_msg(NODE2, V:node:e2:), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~vote_msg(NODE2, V:node:e2:)) -> [ NODE0, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(~vote_msg(V:node:e2:, NODE0) & ~votes(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE0, | NODE1, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_msg(NODE2, NODE0) | votes(NODE1, NODE2)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | vote_msg(n2, n0) | votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_msg(NODE2, NODE0) | votes(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | votes(N1, N2))))
@    37s  is global clause? No
@    37s  Learning in F[8]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | votes(N1, N2))))
@    37s  F[8] /\ T /\ C+ ?
@    37s  	Ans. UNSAT
@    38s  F[9] unsat core #4 	(ucsz: 14 -> 12 -> 11 -> 9 -> 4 -> 4 -> 4)
(minimal unsat core)
	~vote_msg(n2, n0)
	~votes(n1, n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | vote_msg(n2, n0) | votes(n1, n2))
(relations)
	votes
	leader
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_msg(NODE2, NODE0)
	leader(NODE1)
	~votes(NODE1, NODE2)
	leader(NODE0)
(antecedent reduction)
@    38s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~vote_msg(NODE2, NODE0), ~votes(NODE1, NODE2), ]
	NODE0 -> [ ~vote_msg(NODE2, NODE0), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_msg(V:node:e2:, NODE0), ~votes(NODE1, V:node:e2:), ]
	NODE0 -> [ ~vote_msg(NODE2, V:node:e2:), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~vote_msg(NODE2, V:node:e2:)) -> [ NODE0, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(~vote_msg(V:node:e2:, NODE0) & ~votes(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE0, | NODE1, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_msg(NODE2, NODE0) | votes(NODE1, NODE2)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | vote_msg(n2, n0) | votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_msg(NODE2, NODE0) | votes(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | votes(N1, N2))))
@    38s  is global clause? No
@    38s  Learning in F[9]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | votes(N1, N2))))
@    38s  F[9] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[9])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    38s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    38s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false			--> modified
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    38s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    38s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    38s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    39s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = false			--> modified
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    39s  F[5] /\ T /\ C+ ?
@    39s  	Ans. UNSAT
@    39s  F[6] unsat core #6 	(ucsz: 17 -> 15 -> 12 -> 11 -> 9 -> 6 -> 6)
(minimal unsat core)
	member(n2, q2)
	~votes(n0, n1)
	member(n1, q0)
	~votes(n0, n2)
	member(n1, q1)
	leader(n0)
(clause)
	(~leader(n0) | ~member(n1, q0) | ~member(n1, q1) | ~member(n2, q2) | votes(n0, n1) | votes(n0, n2))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	member(NODE1, QUORUM1)
	leader(NODE0)
	~votes(NODE0, NODE1)
	member(NODE1, QUORUM0)
	~votes(NODE0, NODE2)
	member(NODE2, QUORUM2)
(antecedent reduction)
@    39s  antecedent: 6 -> 3 (reduced)
	removed: NODE0
	removed: NODE1
	removed: NODE2

qv2cubes #3
	QUORUM2 -> [ member(NODE2, QUORUM2), ]
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE1, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE2, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE1, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE1, V:quorum:e2:), ]
ucubes2qv #2
	member(NODE1, V:quorum:e2:) -> [ QUORUM0, QUORUM1, ]
	member(NODE2, V:quorum:e2:) -> [ QUORUM2, ]
(partition) #2 quorum:e2: -> { QUORUM0, QUORUM1, | QUORUM2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	QUORUM2:
		member(NODE2, QUORUM2)
ucmulti:
	member(NODE1, QUORUM0)
qv2cubes #3
	NODE1 -> [ ~votes(NODE0, NODE1), ((QUORUM2 = QUORUM0) | member(NODE1, QUORUM0)), ]
	NODE2 -> [ member(NODE2, QUORUM2), ~votes(NODE0, NODE2), ]
	NODE0 -> [ ~votes(NODE0, NODE1), ~votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(NODE0, V:node:e2:), ((QUORUM2 = QUORUM0) | member(V:node:e2:, QUORUM0)), ]
	NODE2 -> [ ~votes(NODE0, V:node:e2:), member(V:node:e2:, QUORUM2), ]
	NODE0 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ~votes(V:node:e2:, NODE1), ]
ucubes2qv #3
	(((QUORUM2 = QUORUM0) | member(V:node:e2:, QUORUM0)) & ~votes(NODE0, V:node:e2:)) -> [ NODE1, ]
	(member(V:node:e2:, QUORUM2) & ~votes(NODE0, V:node:e2:)) -> [ NODE2, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE1) & ~votes(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: quorum -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> quorum)? False
(epr reduced)
	(exists QUORUM0 . (forall NODE1, QUORUM2, NODE2, NODE0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE2, QUORUM2) | votes(NODE0, NODE1) | votes(NODE0, NODE2))))
(non-epr version)
	(forall NODE1, QUORUM2, NODE2, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE2, QUORUM2) | votes(NODE0, NODE1) | votes(NODE0, NODE2))))
	Both verions not allowed!
(epr-reduction) -> UNSAT
(boosted clause)
	(exists QUORUM0 . (forall NODE1, QUORUM2, NODE2, NODE0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE2, QUORUM2) | votes(NODE0, NODE1) | votes(NODE0, NODE2))))
---------------------------
(original clause)
	(~leader(n0) | ~member(n1, q0) | ~member(n1, q1) | ~member(n2, q2) | votes(n0, n1) | votes(n0, n2))
(learnt sym-boosted clause)
	(exists QUORUM0 . (forall NODE1, QUORUM2, NODE2, NODE0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE0) | ~member(NODE2, QUORUM2) | votes(NODE0, NODE1) | votes(NODE0, NODE2))))
---------------------------
(clause-type: epr)	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
@    39s  is global clause? No
@    39s  Learning in F[6]: (exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
@    39s  F[6] /\ T /\ C+ ?
@    39s  	Ans. UNSAT
@    40s  F[7] unsat core #2 	(ucsz: 14 -> 13 -> 9 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 2)
(minimal unsat core)
	leader(n0)
	leader(n2)
(clause)
	(~leader(n0) | ~leader(n2))
(relations)
	leader
(cube: std)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    40s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    40s  is global clause? No
@    40s  Learning in F[7]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    40s  F[7] /\ T /\ C+ ?
@    40s  	Ans. UNSAT
@    40s  F[8] unsat core #5 	(ucsz: 6 -> 5 -> 5)
(minimal unsat core)
	leader(n0)
	~(Q:phase2 = Q:phase4)
	(phase_becomeLeader:e3 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	leader(n2)
(clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n2) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
(cube: std)
	~(phase:i0 = phase:i1)
	(phase_becomeLeader:e3 = phase:i1)
	leader(NODE1)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    40s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	leader(NODE1)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE1)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n2) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    40s  is global clause? No
@    40s  Learning in F[8]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    40s  F[8] /\ T /\ C+ ?
@    40s  	Ans. UNSAT
@    41s  F[9] unsat core #5 	(ucsz: 7 -> 6 -> 5 -> 5)
(minimal unsat core)
	~(Q:phase0 = Q:phase4)
	decided(n2, v1)
	(curr_phase:e3 = Q:phase0)
	(phase_becomeLeader:e3 = Q:phase4)
	leader(n0)
(clause)
	(forall Q:phase0, Q:phase4 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n2, v1) | ~leader(n0) | (Q:phase0 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	decided
(cube: std)
	~(phase:i0 = phase:i1)
	(phase_becomeLeader:e3 = phase:i1)
	decided(NODE1, VALUE0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    41s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	decided(NODE1, VALUE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase0, Q:phase4 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n2, v1) | ~leader(n0) | (Q:phase0 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . ((NODE0 = NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    41s  is global clause? No
@    41s  Learning in F[9]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    41s  F[9] /\ T /\ !P+ -> UNSAT
Frames: #10
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #2
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		~(phase_becomeLeader = curr_phase)
	F[3]: #3
		~(curr_phase = phase_decide)
		(forall N1, N0 . ~votes(N0, N1))
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
	F[4]: #3
		(forall N1, N0 . (votes(N0, N1) -> ~(phase_becomeLeader = curr_phase)))
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
		(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
	F[5]: #2
		((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (~(N2 = N0) & ~votes(N0, N2)))))
		(forall N0 . ~leader(N0))
	F[6]: #3
		(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
		(forall V0, N0 . ~decided(N0, V0))
		(forall N1, N2, N0 . ((leader(N1) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
	F[7]: #2
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
		(forall V0, N0 . ((phase_becomeLeader = curr_phase) -> ~decided(N0, V0)))
	F[8]: #3
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
	F[9]: #14
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
		(forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
		(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
		(forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
		(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
		(forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | votes(N1, N2))))
@    41s  
Adding frame 10...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Trying forwarding F[5]
Trying forwarding F[6]
Forwarded #1 to F[7]
@    41s  Learning in F[7]: (exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
Trying forwarding F[7]
Trying forwarding F[8]
Forwarded #1 to F[9]
@    42s  Learning in F[9]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
Trying forwarding F[9]
Forwarded #13 to F[10]
@    42s  Learning in F[10]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    42s  Learning in F[10]: (forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
@    42s  Learning in F[10]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    42s  Learning in F[10]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    42s  Learning in F[10]: (forall N1, N0 . ((vote_msg(N1, N1) & vote_msg(N1, N0)) -> (N0 = N1)))
@    42s  Learning in F[10]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
@    42s  Learning in F[10]: (forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
@    42s  Learning in F[10]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    43s  Learning in F[10]: (forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    43s  Learning in F[10]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    43s  Learning in F[10]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    43s  Learning in F[10]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
@    43s  Learning in F[10]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | votes(N1, N2))))
@    43s  Learning in F[10]: (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
@    43s  Learning in F[10]: (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
@    43s  Learning in F[10]: (forall N1, Q0, N0 . (exists Q1 . ((((Q0 = Q1) | member(N0, Q1)) & leader(N0) & member(N1, Q0)) -> (votes(N0, N0) | votes(N0, N1)))))
@    43s  Learning in F[10]: (forall Q2, N1, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N0, Q2)) -> (votes(N0, N0) | votes(N0, N1)))))
@    43s  Learning in F[10]: (forall N1, N0 . (exists Q0 . ((leader(N1) & member(N0, Q0)) -> votes(N1, N0))))
@    43s  Learning in F[10]: (forall N0 . (exists Q0 . ((leader(N0) & member(N0, Q0)) -> votes(N0, N0))))
@    43s  Learning in F[10]: (forall V0, N0 . (decided(N0, V0) -> leader(N0)))
@    43s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    43s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    43s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    43s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    43s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    43s  F[7] /\ T /\ C+ ?
@    43s  	Ans. UNSAT
@    43s  F[8] unsat core #3 	(ucsz: 11 -> 9 -> 7 -> 6 -> 5 -> 4 -> 3 -> 3)
(minimal unsat core)
	~votes(n0, n2)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | votes(n0, n2))
(relations)
	votes
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	leader(NODE1)
	~votes(NODE0, NODE2)
	leader(NODE0)
(antecedent reduction)
@    44s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ leader(NODE1), ]
	NODE2 -> [ ~votes(NODE0, NODE2), ]
	NODE0 -> [ ~votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ leader(V:node:e2:), ]
	NODE2 -> [ ~votes(NODE0, V:node:e2:), ]
	NODE0 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	~votes(NODE0, V:node:e2:) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE2)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | votes(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
@    44s  is global clause? No
@    44s  Learning in F[8]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
@    44s  F[8] /\ T /\ C+ ?
@    44s  	Ans. UNSAT
@    44s  F[9] unsat core #6 	(ucsz: 9 -> 8 -> 6 -> 6)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase4)
	~(Q:phase2 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	~votes(n0, n2)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4) | votes(n0, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	~votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    44s  antecedent: 3 -> 3

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	~votes(NODE0, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ leader(NODE1), ]
	NODE2 -> [ ~votes(NODE0, NODE2), ]
	NODE0 -> [ ~votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ leader(V:node:e2:), ]
	NODE2 -> [ ~votes(NODE0, V:node:e2:), ]
	NODE0 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	~votes(NODE0, V:node:e2:) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | (curr_phase:e3 = phase_becomeLeader:e3) | votes(NODE0, NODE2)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4) | votes(n0, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | (curr_phase:e3 = phase_becomeLeader:e3) | votes(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | votes(N0, N2))))
@    44s  is global clause? No
@    44s  Learning in F[9]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | votes(N0, N2))))
@    44s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    44s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    44s  F[8] /\ T /\ C+ ?
@    45s  	Ans. UNSAT
@    45s  F[9] unsat core #3 	(ucsz: 18 -> 16 -> 14 -> 13 -> 10 -> 5 -> 5 -> 4 -> 3 -> 3)
(minimal unsat core)
	~votes(n0, n2)
	decided(n1, v0)
	leader(n0)
(clause)
	(~decided(n1, v0) | ~leader(n0) | votes(n0, n2))
(relations)
	votes
	leader
	decided
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE1, VALUE0)
	~votes(NODE0, NODE2)
	leader(NODE0)
(antecedent reduction)
@    45s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ decided(NODE1, VALUE0), ]
	NODE2 -> [ ~votes(NODE0, NODE2), ]
	NODE0 -> [ ~votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ decided(V:node:e2:, VALUE0), ]
	NODE2 -> [ ~votes(NODE0, V:node:e2:), ]
	NODE0 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #3
	decided(V:node:e2:, VALUE0) -> [ NODE1, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	~votes(NODE0, V:node:e2:) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE1, | NODE0, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE2)))
---------------------------
(original clause)
	(~decided(n1, v0) | ~leader(n0) | votes(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
@    45s  is global clause? No
@    45s  Learning in F[9]: (forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
@    45s  F[9] /\ T /\ C+ ?
@    45s  	Ans. UNSAT
@    46s  F[10] unsat core #3 	(ucsz: 14 -> 12 -> 10 -> 8 -> 4 -> 3 -> 3)
(minimal unsat core)
	~votes(n0, n2)
	decided(n1, v0)
	leader(n0)
(clause)
	(~decided(n1, v0) | ~leader(n0) | votes(n0, n2))
(relations)
	votes
	leader
	decided
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE1, VALUE0)
	~votes(NODE0, NODE2)
	leader(NODE0)
(antecedent reduction)
@    46s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ decided(NODE1, VALUE0), ]
	NODE2 -> [ ~votes(NODE0, NODE2), ]
	NODE0 -> [ ~votes(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ decided(V:node:e2:, VALUE0), ]
	NODE2 -> [ ~votes(NODE0, V:node:e2:), ]
	NODE0 -> [ ~votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #3
	decided(V:node:e2:, VALUE0) -> [ NODE1, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	~votes(NODE0, V:node:e2:) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE1, | NODE0, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE2)))
---------------------------
(original clause)
	(~decided(n1, v0) | ~leader(n0) | votes(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE1, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
@    46s  is global clause? No
@    46s  Learning in F[10]: (forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
@    46s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    46s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    46s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    46s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    46s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = false			--> modified
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    46s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    46s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = true
	leader(n0) = false
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    46s  F[6] /\ T /\ C+ ?
@    46s  	Ans. UNSAT
@    46s  F[7] unsat core #3 	(ucsz: 14 -> 12 -> 10 -> 4 -> 3 -> 3)
(minimal unsat core)
	decided(n2, v1)
	votes(n0, n1)
	votes(n2, n1)
(clause)
	(~decided(n2, v1) | ~votes(n0, n1) | ~votes(n2, n1))
(relations)
	votes
	decided
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE2, VALUE0)
	votes(NODE0, NODE1)
	votes(NODE2, NODE1)
(antecedent reduction)
@    46s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

qv2cubes #3
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE2, NODE1), ]
	NODE2 -> [ decided(NODE2, VALUE0), votes(NODE2, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(NODE2, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE2 -> [ decided(V:node:e2:, VALUE0), votes(V:node:e2:, NODE1), ]
	NODE0 -> [ votes(V:node:e2:, NODE1), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE2, V:node:e2:)) -> [ NODE1, ]
	(decided(V:node:e2:, VALUE0) & votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	votes(V:node:e2:, NODE1) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE2, VALUE0) | ~votes(NODE0, NODE1) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(~decided(n2, v1) | ~votes(n0, n1) | ~votes(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE2, VALUE0) | ~votes(NODE0, NODE1) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . ((decided(N2, V0) & votes(N0, N1) & votes(N2, N1)) -> (N0 = N2)))
@    46s  is global clause? No
@    46s  Learning in F[7]: (forall N1, V0, N2, N0 . ((decided(N2, V0) & votes(N0, N1) & votes(N2, N1)) -> (N0 = N2)))
@    46s  F[7] /\ T /\ C+ ?
@    47s  	Ans. UNSAT
@    47s  F[8] unsat core #5 	(ucsz: 7 -> 5 -> 5)
(minimal unsat core)
	decided(n2, v1)
	votes(n0, n1)
	votes(n2, n1)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~decided(n2, v1) | ~votes(n0, n1) | ~votes(n2, n1)))
(relations)
	votes
	curr_phase:e3
	decided
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE2, VALUE0)
	votes(NODE0, NODE1)
	votes(NODE2, NODE1)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    47s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	decided(NODE2, VALUE0)
	votes(NODE0, NODE1)
	votes(NODE2, NODE1)
	(phase_becomeLeader:e3 = curr_phase:e3)
(qvars eq)
	NODE1
	VALUE0
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE2, NODE1), ]
	NODE2 -> [ decided(NODE2, VALUE0), votes(NODE2, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(NODE2, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE2 -> [ decided(V:node:e2:, VALUE0), votes(V:node:e2:, NODE1), ]
	NODE0 -> [ votes(V:node:e2:, NODE1), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE2, V:node:e2:)) -> [ NODE1, ]
	(decided(V:node:e2:, VALUE0) & votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	votes(V:node:e2:, NODE1) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~decided(NODE2, VALUE0) | ~votes(NODE0, NODE1) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~decided(n2, v1) | ~votes(n0, n1) | ~votes(n2, n1)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~decided(NODE2, VALUE0) | ~votes(NODE0, NODE1) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . (((phase_becomeLeader = curr_phase) & decided(N2, V0) & votes(N0, N1) & votes(N2, N1)) -> (N0 = N2)))
@    47s  is global clause? No
@    47s  Learning in F[8]: (forall N1, V0, N2, N0 . (((phase_becomeLeader = curr_phase) & decided(N2, V0) & votes(N0, N1) & votes(N2, N1)) -> (N0 = N2)))
@    47s  F[8] /\ T /\ C+ ?
@    47s  	Ans. UNSAT
@    47s  F[9] unsat core #3 	(ucsz: 14 -> 12 -> 10 -> 9 -> 4 -> 3 -> 3)
(minimal unsat core)
	decided(n2, v1)
	leader(n0)
	votes(n2, n1)
(clause)
	(~decided(n2, v1) | ~leader(n0) | ~votes(n2, n1))
(relations)
	votes
	leader
	decided
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE2, VALUE0)
	votes(NODE2, NODE1)
	leader(NODE0)
(antecedent reduction)
@    47s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ votes(NODE2, NODE1), ]
	NODE2 -> [ decided(NODE2, VALUE0), votes(NODE2, NODE1), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(NODE2, V:node:e2:), ]
	NODE2 -> [ decided(V:node:e2:, VALUE0), votes(V:node:e2:, NODE1), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	votes(NODE2, V:node:e2:) -> [ NODE1, ]
	(decided(V:node:e2:, VALUE0) & votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE2, VALUE0) | ~leader(NODE0) | ~votes(NODE2, NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2)))
---------------------------
(original clause)
	(~decided(n2, v1) | ~leader(n0) | ~votes(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~decided(NODE2, VALUE0) | ~leader(NODE0) | ~votes(NODE2, NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . ((decided(N2, V0) & leader(N0) & votes(N2, N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2))))
@    47s  is global clause? No
@    47s  Learning in F[9]: (forall N1, V0, N2, N0 . ((decided(N2, V0) & leader(N0) & votes(N2, N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2))))
@    47s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    47s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false			--> modified
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    47s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    47s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    48s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    48s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = false			--> modified
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    48s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    48s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    48s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    48s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = true
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    48s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    48s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = true
	vote_msg(n0, n2) = true
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false			--> modified
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = true
	votes(n2, n1) = true
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = false
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    48s  F[3] /\ T /\ C+ ?
@    48s  	Ans. UNSAT
@    48s  F[4] unsat core #2 	(ucsz: 12 -> 9 -> 7 -> 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	votes(n2, n0)
	votes(n0, n2)
(clause)
	(~votes(n0, n2) | ~votes(n2, n0))
(relations)
	votes
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE0)
(antecedent reduction)
@    48s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (NODE0 = NODE1) | ~votes(NODE1, NODE0)))
---------------------------
(original clause)
	(~votes(n0, n2) | ~votes(n2, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (NODE0 = NODE1) | ~votes(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & votes(N1, N0)) -> (N0 = N1)))
@    48s  is global clause? No
@    48s  Learning in F[4]: (forall N1, N0 . ((votes(N0, N1) & votes(N1, N0)) -> (N0 = N1)))
@    48s  F[4] /\ T /\ C+ ?
@    48s  	Ans. UNSAT
@    48s  F[5] unsat core #4 	(ucsz: 10 -> 8 -> 4 -> 4 -> 4)
(minimal unsat core)
	votes(n2, n0)
	votes(n0, n1)
	votes(n0, n2)
	votes(n2, n1)
(clause)
	(~votes(n0, n1) | ~votes(n0, n2) | ~votes(n2, n0) | ~votes(n2, n1))
(relations)
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE0, NODE2)
	votes(NODE2, NODE0)
	votes(NODE2, NODE1)
(antecedent reduction)
@    48s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE0, NODE2) | (NODE0 = NODE2) | ~votes(NODE2, NODE0) | ~votes(NODE2, NODE1)))
---------------------------
(original clause)
	(~votes(n0, n1) | ~votes(n0, n2) | ~votes(n2, n0) | ~votes(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE1) | ~votes(NODE0, NODE2) | (NODE0 = NODE2) | ~votes(NODE2, NODE0) | ~votes(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
@    48s  is global clause? No
@    48s  Learning in F[5]: (forall N1, N2, N0 . ((votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
@    48s  F[5] /\ T /\ C+ ?
@    48s  	Ans. UNSAT
@    49s  F[6] unsat core #6 	(ucsz: 8 -> 6 -> 6)
(minimal unsat core)
	votes(n0, n1)
	votes(n0, n2)
	votes(n2, n0)
	votes(n2, n1)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n1) | ~votes(n0, n2) | ~votes(n2, n0) | ~votes(n2, n1)))
(relations)
	votes
	curr_phase:e3
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE2, NODE0)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	votes(NODE0, NODE1)
	votes(NODE2, NODE1)
(antecedent reduction)
@    49s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE2, NODE0)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	votes(NODE2, NODE1)
	votes(NODE0, NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE2, NODE1), ]
	NODE2 -> [ votes(NODE2, NODE0), votes(NODE0, NODE2), votes(NODE2, NODE1), ]
	NODE0 -> [ votes(NODE2, NODE0), votes(NODE0, NODE2), votes(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(NODE2, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(V:node:e2:, NODE0), votes(NODE0, V:node:e2:), votes(V:node:e2:, NODE1), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), votes(NODE2, V:node:e2:), votes(V:node:e2:, NODE1), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE2, V:node:e2:)) -> [ NODE1, ]
	(votes(NODE2, V:node:e2:) & votes(V:node:e2:, NODE1) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(V:node:e2:, NODE0) & votes(V:node:e2:, NODE1)) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE1, | NODE0, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~votes(NODE0, NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE2, NODE0) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n1) | ~votes(n0, n2) | ~votes(n2, n0) | ~votes(n2, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~votes(NODE0, NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE2, NODE0) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
@    49s  is global clause? No
@    49s  Learning in F[6]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
@    49s  F[6] /\ T /\ C+ ?
@    49s  	Ans. UNSAT
@    49s  F[7] unsat core #7 	(ucsz: 15 -> 13 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	votes(n0, n1)
	votes(n0, n2)
	votes(n2, n0)
	votes(n2, n1)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
	leader(n0)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n0) | ~votes(n0, n1) | ~votes(n0, n2) | ~votes(n2, n0) | ~votes(n2, n1)))
(relations)
	votes
	curr_phase:e3
	leader
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE2, NODE0)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	votes(NODE0, NODE1)
	votes(NODE2, NODE1)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    49s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE2, NODE0)
	votes(NODE0, NODE2)
	leader(NODE0)
	votes(NODE0, NODE1)
	(phase_becomeLeader:e3 = curr_phase:e3)
	votes(NODE2, NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE0, NODE1), votes(NODE2, NODE1), ]
	NODE2 -> [ votes(NODE2, NODE0), votes(NODE0, NODE2), votes(NODE2, NODE1), ]
	NODE0 -> [ votes(NODE2, NODE0), votes(NODE0, NODE2), votes(NODE0, NODE1), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(NODE2, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(V:node:e2:, NODE0), votes(NODE0, V:node:e2:), votes(V:node:e2:, NODE1), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), votes(NODE2, V:node:e2:), votes(V:node:e2:, NODE1), leader(V:node:e2:), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE2, V:node:e2:)) -> [ NODE1, ]
	(votes(NODE0, V:node:e2:) & votes(V:node:e2:, NODE0) & votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	(leader(V:node:e2:) & votes(NODE2, V:node:e2:) & votes(V:node:e2:, NODE1) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE2, NODE0) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n0) | ~votes(n0, n1) | ~votes(n0, n2) | ~votes(n2, n0) | ~votes(n2, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE0) | ~votes(NODE0, NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE2, NODE0) | ~votes(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N0) & votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
@    49s  is global clause? No
@    49s  Learning in F[7]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N0) & votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
@    49s  F[7] /\ T /\ C+ ?
@    49s  	Ans. UNSAT
@    49s  F[8] unsat core #4 	(ucsz: 10 -> 8 -> 6 -> 4 -> 4)
(minimal unsat core)
	leader(n0)
	votes(n2, n0)
	votes(n0, n2)
	leader(n2)
(clause)
	(~leader(n0) | ~leader(n2) | ~votes(n0, n2) | ~votes(n2, n0))
(relations)
	votes
	leader
(cube: std)
	votes(NODE0, NODE1)
	votes(NODE1, NODE0)
	leader(NODE1)
	leader(NODE0)
(antecedent reduction)
@    50s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (NODE0 = NODE1) | ~leader(NODE1) | ~leader(NODE0) | ~votes(NODE1, NODE0)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n2) | ~votes(n0, n2) | ~votes(n2, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE1) | (NODE0 = NODE1) | ~leader(NODE1) | ~leader(NODE0) | ~votes(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N1) & leader(N1) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
@    50s  is global clause? No
@    50s  Learning in F[8]: (forall N1, N0 . ((votes(N0, N1) & leader(N1) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
@    50s  F[8] /\ T /\ C+ ?
@    50s  	Ans. UNSAT
@    50s  F[9] unsat core #7 	(ucsz: 14 -> 13 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	votes(n0, n2)
	votes(n2, n0)
	(curr_phase:e3 = Q:phase2)
	~(Q:phase2 = Q:phase4)
	leader(n2)
	leader(n0)
	(phase_becomeLeader:e3 = Q:phase4)
(clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n2) | ~votes(n0, n2) | ~votes(n2, n0) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
(cube: std)
	(phase_becomeLeader:e3 = phase:i1)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	votes(NODE0, NODE1)
	~(phase:i0 = phase:i1)
	votes(NODE1, NODE0)
	leader(NODE1)
(antecedent reduction)
@    50s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> phase_becomeLeader:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE1)
	leader(NODE1)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	votes(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | (curr_phase:e3 = phase_becomeLeader:e3) | (NODE0 = NODE1) | ~votes(NODE0, NODE1) | ~leader(NODE0) | ~votes(NODE1, NODE0)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase4 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n2) | ~votes(n0, n2) | ~votes(n2, n0) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~leader(NODE1) | (curr_phase:e3 = phase_becomeLeader:e3) | (NODE0 = NODE1) | ~votes(NODE0, NODE1) | ~leader(NODE0) | ~votes(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & votes(N0, N1) & leader(N0) & votes(N1, N0)) -> ((curr_phase = phase_becomeLeader) | (N0 = N1))))
@    50s  is global clause? No
@    50s  Learning in F[9]: (forall N1, N0 . ((leader(N1) & votes(N0, N1) & leader(N0) & votes(N1, N0)) -> ((curr_phase = phase_becomeLeader) | (N0 = N1))))
@    50s  F[9] /\ T /\ C+ ?
@    50s  	Ans. UNSAT
@    50s  F[10] unsat core #6 	(ucsz: 17 -> 14 -> 12 -> 10 -> 9 -> 7 -> 6 -> 6)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	votes(n0, n2)
	votes(n2, n0)
	decided(n2, v1)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n2, v1) | ~leader(n0) | ~votes(n0, n2) | ~votes(n2, n0)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	votes
	decided
(cube: std)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	votes(NODE0, NODE1)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE0)
(antecedent reduction)
@    51s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	votes(NODE0, NODE1)
	leader(NODE0)
	decided(NODE1, VALUE0)
	(curr_phase:e3 = phase_decide:e3)
	votes(NODE1, NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | (NODE0 = NODE1) | ~votes(NODE0, NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE1, NODE0)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n2, v1) | ~leader(n0) | ~votes(n0, n2) | ~votes(n2, n0)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | (NODE0 = NODE1) | ~votes(NODE0, NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE1, NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . (((curr_phase = phase_decide) & votes(N0, N1) & decided(N1, V0) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
@    51s  is global clause? No
@    51s  Learning in F[10]: (forall N1, V0, N0 . (((curr_phase = phase_decide) & votes(N0, N1) & decided(N1, V0) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
@    51s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    51s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    51s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    51s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    51s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    51s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    51s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    51s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false			--> modified
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    51s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = false
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    51s  F[1] /\ T /\ C+ ?
@    51s  	Ans. UNSAT
@    51s  F[2] unsat core #2 	(ucsz: 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	~vote_request_msg(n0, n2)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | vote_request_msg(n0, n2))
(relations)
	vote_request_msg
	vote_msg
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    51s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | vote_request_msg(NODE0, NODE1) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | vote_request_msg(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | vote_request_msg(NODE0, NODE1) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (vote_msg(N1, N0) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    51s  is global clause? No
@    51s  Learning in F[2]: (forall N1, N0 . (vote_msg(N1, N0) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    51s  F[2] /\ T /\ C+ ?
@    51s  	Ans. UNSAT
@    52s  F[3] unsat core #4 	(ucsz: 10 -> 6 -> 4 -> 4)
(minimal unsat core)
	~vote_request_msg(n0, n2)
	(phase_recvVote:e3 = Q:phase2)
	(curr_phase:e3 = Q:phase2)
	vote_msg(n2, n0)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase2) | ~vote_msg(n2, n0) | vote_request_msg(n0, n2)))
(relations)
	curr_phase:e3
	vote_msg
	vote_request_msg
	phase_recvVote:e3
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
	(phase_recvVote:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
(antecedent reduction)
@    52s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_recvVote:e3
(cube eq)
	~vote_request_msg(NODE0, NODE1)
	(curr_phase:e3 = phase_recvVote:e3)
	vote_msg(NODE1, NODE0)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e3 = phase_recvVote:e3) | vote_request_msg(NODE0, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase2) | ~vote_msg(n2, n0) | vote_request_msg(n0, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~(curr_phase:e3 = phase_recvVote:e3) | vote_request_msg(NODE0, NODE1) | ~vote_msg(NODE1, NODE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    52s  is global clause? No
@    52s  Learning in F[3]: (forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    52s  F[3] /\ T /\ C+ ?
@    52s  	Ans. UNSAT
@    52s  F[4] unsat core #3 	(ucsz: 11 -> 5 -> 5 -> 3 -> 3)
(minimal unsat core)
	~vote_request_msg(n0, n2)
	votes(n1, n2)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~votes(n1, n2) | vote_request_msg(n0, n2))
(relations)
	votes
	vote_request_msg
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	~vote_request_msg(NODE0, NODE2)
	votes(NODE1, NODE2)
(antecedent reduction)
@    52s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), ]
	NODE2 -> [ vote_msg(NODE2, NODE0), ~vote_request_msg(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ vote_msg(NODE2, NODE0), ~vote_request_msg(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), ]
	NODE2 -> [ vote_msg(V:node:e2:, NODE0), votes(NODE1, V:node:e2:), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e2:, NODE2), vote_msg(NODE2, V:node:e2:), ]
ucubes2qv #3
	votes(V:node:e2:, NODE2) -> [ NODE1, ]
	(vote_msg(V:node:e2:, NODE0) & votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(NODE2, V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE2) | vote_request_msg(NODE0, NODE2)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~votes(n1, n2) | vote_request_msg(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE2) | vote_request_msg(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & votes(N1, N2)) -> ((N0 = N2) | vote_request_msg(N0, N2))))
@    52s  is global clause? No
@    52s  Learning in F[4]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & votes(N1, N2)) -> ((N0 = N2) | vote_request_msg(N0, N2))))
@    52s  F[4] /\ T /\ C+ ?
@    52s  	Ans. UNSAT
@    52s  F[5] unsat core #3 	(ucsz: 10 -> 8 -> 4 -> 4 -> 3 -> 3)
(minimal unsat core)
	~vote_request_msg(n0, n2)
	votes(n1, n2)
	votes(n0, n2)
(clause)
	(~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n2))
(relations)
	votes
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	~vote_request_msg(NODE0, NODE2)
	votes(NODE1, NODE2)
(antecedent reduction)
@    52s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), ~vote_request_msg(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), ~vote_request_msg(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), ~vote_request_msg(V:node:e2:, NODE2), ]
ucubes2qv #3
	votes(V:node:e2:, NODE2) -> [ NODE1, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE2, ]
	(votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE2)))
---------------------------
(original clause)
	(~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N2))))
@    52s  is global clause? No
@    52s  Learning in F[5]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N2))))
@    52s  F[5] /\ T /\ C+ ?
@    52s  	Ans. UNSAT
@    52s  F[6] unsat core #5 	(ucsz: 11 -> 9 -> 7 -> 5 -> 5)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n1, n2)
	votes(n0, n2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n1, n2)))
(relations)
	votes
	curr_phase:e3
	phase_becomeLeader:e3
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	~vote_request_msg(NODE1, NODE2)
	votes(NODE1, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    52s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	~vote_request_msg(NODE1, NODE2)
	votes(NODE1, NODE2)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), ~vote_request_msg(NODE1, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), votes(V:node:e2:, NODE2), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE1, V:node:e2:)) -> [ NODE2, ]
	votes(V:node:e2:, NODE2) -> [ NODE0, ]
	(votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE2, | NODE0, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE1, NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N1, N2))))
@    52s  is global clause? No
@    52s  Learning in F[6]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N1, N2))))
@    52s  F[6] /\ T /\ C+ ?
@    52s  	Ans. UNSAT
@    52s  F[7] unsat core #6 	(ucsz: 14 -> 12 -> 10 -> 8 -> 6 -> 6)
(minimal unsat core)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n0, n2)
	(phase_becomeLeader:e3 = Q:phase2)
	leader(n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	~vote_request_msg(NODE0, NODE2)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    53s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	~vote_request_msg(NODE0, NODE2)
	votes(NODE1, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), ~vote_request_msg(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), ~vote_request_msg(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), ~vote_request_msg(V:node:e2:, NODE2), ]
ucubes2qv #3
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE2, ]
	(votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N2))))
@    53s  is global clause? No
@    53s  Learning in F[7]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N2))))
@    53s  F[7] /\ T /\ C+ ?
@    53s  	Ans. UNSAT
@    53s  F[8] unsat core #4 	(ucsz: 10 -> 6 -> 5 -> 4 -> 4)
(minimal unsat core)
	~vote_request_msg(n0, n2)
	~vote_request_msg(n1, n2)
	leader(n1)
	leader(n0)
(clause)
	(~leader(n0) | ~leader(n1) | vote_request_msg(n0, n2) | vote_request_msg(n1, n2))
(relations)
	leader
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE0, NODE2)
	leader(NODE1)
	~vote_request_msg(NODE1, NODE2)
	leader(NODE0)
(antecedent reduction)
@    53s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~vote_request_msg(NODE0, NODE2), ~vote_request_msg(NODE1, NODE2), ]
	NODE0 -> [ ~vote_request_msg(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_request_msg(NODE0, V:node:e2:), ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #2
	(leader(V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, NODE0, ]
	(~vote_request_msg(NODE0, V:node:e2:) & ~vote_request_msg(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #2 node:e2: -> { NODE1, NODE0, | NODE2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~vote_request_msg(NODE0, NODE2)
		~vote_request_msg(NODE1, NODE2)
ucmulti:
	~vote_request_msg(NODE0, NODE2)
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2)))))
(non-epr version)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2)))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2)))))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | vote_request_msg(n0, n2) | vote_request_msg(n1, n2))
(learnt sym-boosted clause)
	(forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2)))))
---------------------------
(clause-type: non-epr)	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_request_msg(N0, N2)))))
@    53s  is global clause? No
@    53s  Learning in F[8]: (forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_request_msg(N0, N2)))))
@    53s  F[8] /\ T /\ C+ ?
@    53s  	Ans. UNSAT
@    54s  F[9] unsat core #7 	(ucsz: 14 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n0, n2)
	~(Q:phase2 = Q:phase4)
	~vote_request_msg(n1, n2)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4) | vote_request_msg(n0, n2) | vote_request_msg(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE1, NODE2)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	~vote_request_msg(NODE0, NODE2)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    54s  antecedent: 3 -> 3

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	~vote_request_msg(NODE0, NODE2)
	~vote_request_msg(NODE1, NODE2)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~vote_request_msg(NODE0, NODE2), ~vote_request_msg(NODE1, NODE2), ]
	NODE0 -> [ ~vote_request_msg(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_request_msg(NODE0, V:node:e2:), ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #2
	(leader(V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, NODE0, ]
	(~vote_request_msg(NODE0, V:node:e2:) & ~vote_request_msg(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #2 node:e2: -> { NODE1, NODE0, | NODE2, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		~vote_request_msg(NODE0, NODE2)
		~vote_request_msg(NODE1, NODE2)
ucmulti:
	~vote_request_msg(NODE0, NODE2)
	leader(NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	((curr_phase:e3 = phase_becomeLeader:e3) | (exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2))))))
(non-epr version)
	((curr_phase:e3 = phase_becomeLeader:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2))))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	((curr_phase:e3 = phase_becomeLeader:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2))))))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4) | vote_request_msg(n0, n2) | vote_request_msg(n1, n2)))
(learnt sym-boosted clause)
	((curr_phase:e3 = phase_becomeLeader:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~leader(NODE0)) | (~(NODE2 = NODE0) & vote_request_msg(NODE0, NODE2))))))
---------------------------
(clause-type: non-epr)	((exists N2 . (forall N0 . (((N2 = N0) | leader(N0)) & (vote_request_msg(N0, N2) -> (N2 = N0))))) -> (curr_phase = phase_becomeLeader))
@    54s  is global clause? No
@    54s  Learning in F[9]: ((exists N2 . (forall N0 . (((N2 = N0) | leader(N0)) & (vote_request_msg(N0, N2) -> (N2 = N0))))) -> (curr_phase = phase_becomeLeader))
@    54s  F[9] /\ T /\ C+ ?
@    54s  	Ans. UNSAT
@    54s  F[10] unsat core #7 	(ucsz: 16 -> 14 -> 12 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	votes(n1, n2)
	~vote_request_msg(n0, n2)
	decided(n1, v0)
	~vote_request_msg(n1, n2)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v0) | ~leader(n0) | ~votes(n1, n2) | vote_request_msg(n0, n2) | vote_request_msg(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	votes
	decided
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE1, NODE2)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	~vote_request_msg(NODE0, NODE2)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    54s  antecedent: 3 -> 3

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	~vote_request_msg(NODE1, NODE2)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
	~vote_request_msg(NODE0, NODE2)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE2)
(qvars eq)
	NODE1
	VALUE0
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), decided(NODE1, VALUE0), votes(NODE1, NODE2), ]
	NODE2 -> [ ~vote_request_msg(NODE0, NODE2), ~vote_request_msg(NODE1, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ ~vote_request_msg(NODE0, NODE2), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), votes(V:node:e2:, NODE2), decided(V:node:e2:, VALUE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), ~vote_request_msg(NODE0, V:node:e2:), ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE0, ]
	(decided(V:node:e2:, VALUE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, ]
	(votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE0, V:node:e2:) & ~vote_request_msg(NODE1, V:node:e2:)) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE0, | NODE1, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE0, NODE2) | vote_request_msg(NODE1, NODE2)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v0) | ~leader(n0) | ~votes(n1, n2) | vote_request_msg(n0, n2) | vote_request_msg(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE0, NODE2) | vote_request_msg(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N2) | vote_request_msg(N1, N2))))
@    54s  is global clause? No
@    54s  Learning in F[10]: (forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N2) | vote_request_msg(N1, N2))))
@    54s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    54s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    55s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    55s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    55s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    55s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    55s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = true
	member(n1, q1) = false
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    55s  F[6] /\ T /\ C+ ?
@    55s  	Ans. UNSAT
@    55s  F[7] unsat core #6 	(ucsz: 14 -> 12 -> 10 -> 8 -> 6 -> 6)
(minimal unsat core)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n1, n2)
	(phase_becomeLeader:e3 = Q:phase2)
	leader(n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE1, NODE2)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    55s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	~vote_request_msg(NODE1, NODE2)
	votes(NODE1, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), ~vote_request_msg(NODE1, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), votes(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE1, V:node:e2:)) -> [ NODE2, ]
	votes(V:node:e2:, NODE2) -> [ NODE0, ]
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE2, | NODE0, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE1, NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N1, N2))))
@    55s  is global clause? No
@    55s  Learning in F[7]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N1, N2))))
@    55s  F[7] /\ T /\ C+ ?
@    55s  	Ans. UNSAT
@    55s  F[8] unsat core #3 	(ucsz: 7 -> 5 -> 4 -> 3 -> 3)
(minimal unsat core)
	leader(n1)
	~vote_request_msg(n1, n2)
	leader(n0)
(clause)
	(~leader(n0) | ~leader(n1) | vote_request_msg(n1, n2))
(relations)
	leader
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	leader(NODE1)
	~vote_request_msg(NODE1, NODE2)
	leader(NODE0)
(antecedent reduction)
@    56s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~vote_request_msg(NODE1, NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, ]
	leader(V:node:e2:) -> [ NODE0, ]
	~vote_request_msg(NODE1, V:node:e2:) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE1, | NODE0, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE1, NODE2)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | vote_request_msg(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
@    56s  is global clause? No
@    56s  Learning in F[8]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
@    56s  F[8] /\ T /\ C+ ?
@    56s  	Ans. UNSAT
@    56s  F[9] unsat core #6 	(ucsz: 7 -> 6 -> 6)
(minimal unsat core)
	(phase_becomeLeader:e3 = Q:phase4)
	~(Q:phase2 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n1, n2)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4) | vote_request_msg(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE1, NODE2)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    56s  antecedent: 3 -> 3

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	~vote_request_msg(NODE1, NODE2)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ ~vote_request_msg(NODE1, NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), leader(V:node:e2:), ]
	NODE2 -> [ ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, ]
	leader(V:node:e2:) -> [ NODE0, ]
	~vote_request_msg(NODE1, V:node:e2:) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE1, | NODE0, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | (curr_phase:e3 = phase_becomeLeader:e3) | vote_request_msg(NODE1, NODE2)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | (Q:phase2 = Q:phase4) | vote_request_msg(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE1) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | (curr_phase:e3 = phase_becomeLeader:e3) | vote_request_msg(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | vote_request_msg(N1, N2))))
@    56s  is global clause? No
@    56s  Learning in F[9]: (forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | vote_request_msg(N1, N2))))
@    56s  F[9] /\ T /\ C+ ?
@    56s  	Ans. UNSAT
@    57s  F[10] unsat core #6 	(ucsz: 15 -> 13 -> 11 -> 9 -> 8 -> 6 -> 6)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	votes(n1, n2)
	decided(n1, v0)
	~vote_request_msg(n1, n2)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v0) | ~leader(n0) | ~votes(n1, n2) | vote_request_msg(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	votes
	decided
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE1, NODE2)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    57s  antecedent: 3 -> 3

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	~vote_request_msg(NODE1, NODE2)
	decided(NODE1, VALUE0)
	votes(NODE1, NODE2)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE1, NODE2), decided(NODE1, VALUE0), votes(NODE1, NODE2), ]
	NODE2 -> [ ~vote_request_msg(NODE1, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(V:node:e2:, NODE2), votes(V:node:e2:, NODE2), decided(V:node:e2:, VALUE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), ~vote_request_msg(NODE1, V:node:e2:), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	(votes(NODE1, V:node:e2:) & ~vote_request_msg(NODE1, V:node:e2:)) -> [ NODE2, ]
	(decided(V:node:e2:, VALUE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE2)) -> [ NODE1, ]
	leader(V:node:e2:) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE1, NODE2)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v0) | ~leader(n0) | ~votes(n1, n2) | vote_request_msg(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE1, VALUE0) | ~leader(NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE1, NODE2)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
@    57s  is global clause? No
@    57s  Learning in F[10]: (forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
@    57s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    57s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    57s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    57s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    57s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = true
	member(n1, q1) = true
	member(n1, q2) = false
	member(n2, q0) = false
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    57s  F[7] /\ T /\ C+ ?
@    57s  	Ans. UNSAT
@    58s  F[8] unsat core #6 	(ucsz: 17 -> 15 -> 14 -> 12 -> 10 -> 6 -> 6 -> 6)
(minimal unsat core)
	~votes(n2, n0)
	~votes(n2, n1)
	member(n0, q0)
	member(n0, q2)
	member(n1, q1)
	leader(n2)
(clause)
	(~leader(n2) | ~member(n0, q0) | ~member(n0, q2) | ~member(n1, q1) | votes(n2, n0) | votes(n2, n1))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	member(NODE1, QUORUM1)
	~votes(NODE2, NODE1)
	leader(NODE2)
	member(NODE0, QUORUM2)
	member(NODE0, QUORUM0)
	~votes(NODE2, NODE0)
(antecedent reduction)
@    58s  antecedent: 6 -> 3 (reduced)
	removed: NODE0
	removed: NODE1
	removed: NODE2

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE0, QUORUM0), ]
	QUORUM1 -> [ member(NODE1, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE1, V:quorum:e2:), ]
ucubes2qv #2
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, QUORUM0, ]
	member(NODE1, V:quorum:e2:) -> [ QUORUM1, ]
(partition) #2 quorum:e2: -> { QUORUM2, QUORUM0, | QUORUM1, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	QUORUM1:
		member(NODE1, QUORUM1)
ucmulti:
	member(NODE0, QUORUM0)
qv2cubes #3
	NODE1 -> [ member(NODE1, QUORUM1), ~votes(NODE2, NODE1), ]
	NODE2 -> [ ~votes(NODE2, NODE1), leader(NODE2), ~votes(NODE2, NODE0), ]
	NODE0 -> [ ((QUORUM1 = QUORUM0) | member(NODE0, QUORUM0)), ~votes(NODE2, NODE0), ]
qv2ucubes #3
	NODE1 -> [ member(V:node:e2:, QUORUM1), ~votes(NODE2, V:node:e2:), ]
	NODE2 -> [ leader(V:node:e2:), ~votes(V:node:e2:, NODE0), ~votes(V:node:e2:, NODE1), ]
	NODE0 -> [ ((QUORUM1 = QUORUM0) | member(V:node:e2:, QUORUM0)), ~votes(NODE2, V:node:e2:), ]
ucubes2qv #3
	(member(V:node:e2:, QUORUM1) & ~votes(NODE2, V:node:e2:)) -> [ NODE1, ]
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE0) & ~votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	(((QUORUM1 = QUORUM0) | member(V:node:e2:, QUORUM0)) & ~votes(NODE2, V:node:e2:)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE1, | NODE2, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: quorum -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> quorum)? False
(epr reduced)
	(exists QUORUM0 . (forall NODE1, NODE2, QUORUM1, NODE0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE0, QUORUM0)) | ~leader(NODE2) | ~member(NODE1, QUORUM1) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
(non-epr version)
	(forall NODE1, NODE2, QUORUM1, NODE0 . (exists QUORUM0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE0, QUORUM0)) | ~leader(NODE2) | ~member(NODE1, QUORUM1) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE1, NODE2, QUORUM1, NODE0 . (exists QUORUM0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE0, QUORUM0)) | ~leader(NODE2) | ~member(NODE1, QUORUM1) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
---------------------------
(original clause)
	(~leader(n2) | ~member(n0, q0) | ~member(n0, q2) | ~member(n1, q1) | votes(n2, n0) | votes(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, QUORUM1, NODE0 . (exists QUORUM0 . ((~(QUORUM1 = QUORUM0) & ~member(NODE0, QUORUM0)) | ~leader(NODE2) | ~member(NODE1, QUORUM1) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
---------------------------
(clause-type: non-epr)	(forall N1, N2, Q1, N0 . (exists Q0 . ((((Q1 = Q0) | member(N0, Q0)) & leader(N2) & member(N1, Q1)) -> (votes(N2, N0) | votes(N2, N1)))))
@    58s  is global clause? Yes
@    58s  Learning in F[10]: (forall N1, N2, Q1, N0 . (exists Q0 . ((((Q1 = Q0) | member(N0, Q0)) & leader(N2) & member(N1, Q1)) -> (votes(N2, N0) | votes(N2, N1)))))
@    58s  F[8] /\ T /\ C+ ?
@    58s  	Ans. UNSAT
@    58s  F[9] unsat core #6 	(ucsz: 17 -> 15 -> 13 -> 7 -> 6 -> 6)
(minimal unsat core)
	~votes(n2, n0)
	~votes(n2, n1)
	member(n0, q2)
	member(n1, q0)
	member(n1, q1)
	leader(n2)
(clause)
	(~leader(n2) | ~member(n0, q2) | ~member(n1, q0) | ~member(n1, q1) | votes(n2, n0) | votes(n2, n1))
(relations)
	member
	votes
	leader
(fullsorts)
	quorum:e2: -> [ QUORUM0, QUORUM1, QUORUM2, ]
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	member(NODE1, QUORUM1)
	~votes(NODE2, NODE1)
	leader(NODE2)
	member(NODE0, QUORUM2)
	member(NODE1, QUORUM0)
	~votes(NODE2, NODE0)
(antecedent reduction)
@    59s  antecedent: 6 -> 3 (reduced)
	removed: NODE0
	removed: NODE1
	removed: NODE2

qv2cubes #3
	QUORUM2 -> [ member(NODE0, QUORUM2), ]
	QUORUM0 -> [ member(NODE1, QUORUM0), ]
	QUORUM1 -> [ member(NODE1, QUORUM1), ]
qv2ucubes #3
	QUORUM2 -> [ member(NODE0, V:quorum:e2:), ]
	QUORUM0 -> [ member(NODE1, V:quorum:e2:), ]
	QUORUM1 -> [ member(NODE1, V:quorum:e2:), ]
ucubes2qv #2
	member(NODE0, V:quorum:e2:) -> [ QUORUM2, ]
	member(NODE1, V:quorum:e2:) -> [ QUORUM0, QUORUM1, ]
(partition) #2 quorum:e2: -> { QUORUM2, | QUORUM0, QUORUM1, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	QUORUM2:
		member(NODE0, QUORUM2)
ucmulti:
	member(NODE1, QUORUM0)
qv2cubes #3
	NODE1 -> [ ~votes(NODE2, NODE1), ((QUORUM2 = QUORUM0) | member(NODE1, QUORUM0)), ]
	NODE2 -> [ ~votes(NODE2, NODE1), leader(NODE2), ~votes(NODE2, NODE0), ]
	NODE0 -> [ member(NODE0, QUORUM2), ~votes(NODE2, NODE0), ]
qv2ucubes #3
	NODE1 -> [ ((QUORUM2 = QUORUM0) | member(V:node:e2:, QUORUM0)), ~votes(NODE2, V:node:e2:), ]
	NODE2 -> [ leader(V:node:e2:), ~votes(V:node:e2:, NODE0), ~votes(V:node:e2:, NODE1), ]
	NODE0 -> [ member(V:node:e2:, QUORUM2), ~votes(NODE2, V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE0) & ~votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	(((QUORUM2 = QUORUM0) | member(V:node:e2:, QUORUM0)) & ~votes(NODE2, V:node:e2:)) -> [ NODE1, ]
	(member(V:node:e2:, QUORUM2) & ~votes(NODE2, V:node:e2:)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: node -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> node)? True
	(epr check: forward)	allowed(arc: quorum -> quorum)? False
	(epr check: reverse)	allowed(arc: quorum -> quorum)? False
(epr reduced)
	(exists QUORUM0 . (forall NODE1, QUORUM2, NODE2, NODE0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE2) | ~member(NODE0, QUORUM2) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
(non-epr version)
	(forall NODE1, QUORUM2, NODE2, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE2) | ~member(NODE0, QUORUM2) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(forall NODE1, QUORUM2, NODE2, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE2) | ~member(NODE0, QUORUM2) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
---------------------------
(original clause)
	(~leader(n2) | ~member(n0, q2) | ~member(n1, q0) | ~member(n1, q1) | votes(n2, n0) | votes(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, QUORUM2, NODE2, NODE0 . (exists QUORUM0 . ((~(QUORUM2 = QUORUM0) & ~member(NODE1, QUORUM0)) | ~leader(NODE2) | ~member(NODE0, QUORUM2) | votes(NODE2, NODE0) | votes(NODE2, NODE1))))
---------------------------
(clause-type: non-epr)	(forall N1, Q2, N2, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N2) & member(N0, Q2)) -> (votes(N2, N0) | votes(N2, N1)))))
@    59s  is global clause? Yes
@    59s  Learning in F[10]: (forall N1, Q2, N2, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N2) & member(N0, Q2)) -> (votes(N2, N0) | votes(N2, N1)))))
@    59s  F[9] /\ T /\ C+ ?
@    59s  	Ans. UNSAT
@    61s  F[10] unsat core #3 	(ucsz: 18 -> 16 -> 15 -> 7 -> 6 -> 6 -> 5 -> 3 -> 3)
(minimal unsat core)
	leader(n0)
	~votes(n2, n1)
	leader(n2)
(clause)
	(~leader(n0) | ~leader(n2) | votes(n2, n1))
(relations)
	votes
	leader
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~votes(NODE2, NODE1)
	leader(NODE2)
	leader(NODE0)
(antecedent reduction)
@    62s  antecedent: 3 -> 3

qv2cubes #3
	NODE1 -> [ ~votes(NODE2, NODE1), ]
	NODE2 -> [ ~votes(NODE2, NODE1), leader(NODE2), ]
	NODE0 -> [ leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~votes(NODE2, V:node:e2:), ]
	NODE2 -> [ leader(V:node:e2:), ~votes(V:node:e2:, NODE1), ]
	NODE0 -> [ leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & ~votes(V:node:e2:, NODE1)) -> [ NODE2, ]
	leader(V:node:e2:) -> [ NODE0, ]
	~votes(NODE2, V:node:e2:) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE2, | NODE0, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE2) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE2, NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n2) | votes(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~leader(NODE2) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | votes(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & leader(N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N2, N1))))
@    62s  is global clause? No
@    62s  Learning in F[10]: (forall N1, N2, N0 . ((leader(N0) & leader(N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N2, N1))))
@    62s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = true
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = false
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = true
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false
	leader(n2) = true
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = true
	vote_msg(n2, n0) = false
	vote_msg(n2, n1) = false
	vote_msg(n2, n2) = true
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = false
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = false
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = true
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = true
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = true
	votes(n2, n2) = true
	member(n0, q0) = true
	member(n0, q1) = true
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = true
	member(n1, q2) = true
	member(n2, q0) = true
	member(n2, q1) = false
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    62s  F[9] /\ T /\ C+ ?
@    62s  	Ans. UNSAT
@    62s  F[10] unsat core #5 	(ucsz: 15 -> 13 -> 12 -> 10 -> 8 -> 5 -> 5 -> 5)
(minimal unsat core)
	(phase_decide:e3 = Q:phase0)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
	~vote_request_msg(n0, n1)
	decided(n2, v0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n2, v0) | ~leader(n0) | vote_request_msg(n0, n1)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	decided
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	decided(NODE2, VALUE0)
	~vote_request_msg(NODE0, NODE1)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
(antecedent reduction)
@    62s  antecedent: 3 -> 3

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	decided(NODE2, VALUE0)
	~vote_request_msg(NODE0, NODE1)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
	-> ~(NODE0 = NODE2)
	-> ~(NODE1 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ ~vote_request_msg(NODE0, NODE1), ]
	NODE2 -> [ decided(NODE2, VALUE0), ]
	NODE0 -> [ ~vote_request_msg(NODE0, NODE1), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE2 -> [ decided(V:node:e2:, VALUE0), ]
	NODE0 -> [ ~vote_request_msg(V:node:e2:, NODE1), leader(V:node:e2:), ]
ucubes2qv #3
	decided(V:node:e2:, VALUE0) -> [ NODE2, ]
	~vote_request_msg(NODE0, V:node:e2:) -> [ NODE1, ]
	(leader(V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE2, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n2, v0) | ~leader(n0) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE2, NODE0 . (~(curr_phase:e3 = phase_decide:e3) | ~decided(NODE2, VALUE0) | ~leader(NODE0) | (NODE0 = NODE1) | (NODE0 = NODE2) | (NODE1 = NODE2) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N1))))
@    62s  is global clause? No
@    62s  Learning in F[10]: (forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N1))))
@    62s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    62s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    62s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    62s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    63s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    63s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    63s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    63s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    63s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    63s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    63s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    63s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    63s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = true
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = true
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = true
	votes(n0, n1) = false
	votes(n0, n2) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = true
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = true
	member(n0, q1) = false
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    63s  F[3] /\ T /\ C+ ?
@    63s  	Ans. UNSAT
@    63s  F[4] unsat core #2 	(ucsz: 9 -> 5 -> 5 -> 3 -> 2 -> 2)
(minimal unsat core)
	votes(n1, n1)
	votes(n0, n0)
(clause)
	(~votes(n0, n0) | ~votes(n1, n1))
(relations)
	votes
(cube: std)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
(antecedent reduction)
@    64s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~votes(n0, n0) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N0) & votes(N1, N1)) -> (N0 = N1)))
@    64s  is global clause? No
@    64s  Learning in F[4]: (forall N1, N0 . ((votes(N0, N0) & votes(N1, N1)) -> (N0 = N1)))
@    64s  F[4] /\ T /\ C+ ?
@    64s  	Ans. UNSAT
@    64s  F[5] unsat core #4 	(ucsz: 13 -> 12 -> 11 -> 4 -> 4 -> 4)
(minimal unsat core)
	votes(n1, n1)
	votes(n0, n0)
	votes(n1, n2)
	votes(n0, n2)
(clause)
	(~votes(n0, n0) | ~votes(n0, n2) | ~votes(n1, n1) | ~votes(n1, n2))
(relations)
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	votes(NODE1, NODE2)
(antecedent reduction)
@    64s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE2) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~votes(n0, n0) | ~votes(n0, n2) | ~votes(n1, n1) | ~votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~votes(NODE0, NODE2) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((votes(N0, N2) & votes(N0, N0) & votes(N1, N1) & votes(N1, N2)) -> (N0 = N1)))
@    64s  is global clause? No
@    64s  Learning in F[5]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N0, N0) & votes(N1, N1) & votes(N1, N2)) -> (N0 = N1)))
@    64s  F[5] /\ T /\ C+ ?
@    64s  	Ans. UNSAT
@    64s  F[6] unsat core #6 	(ucsz: 8 -> 6 -> 6)
(minimal unsat core)
	votes(n0, n0)
	votes(n0, n2)
	votes(n1, n1)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n0) | ~votes(n0, n2) | ~votes(n1, n1) | ~votes(n1, n2)))
(relations)
	votes
	curr_phase:e3
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    64s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	votes(NODE1, NODE2)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE1), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), votes(NODE0, NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), votes(V:node:e2:, V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), votes(V:node:e2:, V:node:e2:), ]
ucubes2qv #2
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(votes(V:node:e2:, NODE2) & votes(V:node:e2:, V:node:e2:)) -> [ NODE1, NODE0, ]
(partition) #2 node:e2: -> { NODE2, | NODE1, NODE0, | }
	#1 singles, #1 multiples (out of #2 cells)
ucsingle:
	NODE2:
		votes(NODE0, NODE2)
		votes(NODE1, NODE2)
ucmulti:
	votes(NODE0, NODE2)
	votes(NODE0, NODE0)
	(epr check: forward)	allowed(arc: node -> node)? False
	(epr check: reverse)	allowed(arc: node -> node)? False
(epr reduced)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (exists NODE0 . (forall NODE2 . ((~(NODE2 = NODE0) & ~votes(NODE0, NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
(non-epr version)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~votes(NODE0, NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
	Both verions not allowed!
(epr-reduction) -> SAT
	EPR-reduction is not allowed!
	Learning non-epr version instead.
(boosted clause)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~votes(NODE0, NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~votes(n0, n0) | ~votes(n0, n2) | ~votes(n1, n1) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(~(phase_becomeLeader:e3 = curr_phase:e3) | (forall NODE2 . (exists NODE0 . ((~(NODE2 = NODE0) & ~votes(NODE0, NODE0)) | (~(NODE2 = NODE0) & ~votes(NODE0, NODE2))))))
---------------------------
(clause-type: non-epr)	((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (((N2 = N0) | votes(N0, N0)) -> (~(N2 = N0) & ~votes(N0, N2))))))
@    65s  is global clause? No
@    65s  Learning in F[6]: ((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (((N2 = N0) | votes(N0, N0)) -> (~(N2 = N0) & ~votes(N0, N2))))))
@    65s  F[6] /\ T /\ C+ ?
@    65s  	Ans. UNSAT
@    65s  F[7] unsat core #7 	(ucsz: 15 -> 13 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	votes(n0, n0)
	votes(n0, n2)
	votes(n1, n1)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
	leader(n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~votes(n0, n0) | ~votes(n0, n2) | ~votes(n1, n1) | ~votes(n1, n2)))
(relations)
	votes
	curr_phase:e3
	leader
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    65s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	(phase_becomeLeader:e3 = curr_phase:e3)
	votes(NODE1, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ votes(NODE1, NODE1), votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), votes(NODE0, NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), votes(V:node:e2:, V:node:e2:), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), votes(V:node:e2:, V:node:e2:), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(leader(V:node:e2:) & votes(V:node:e2:, NODE2) & votes(V:node:e2:, V:node:e2:)) -> [ NODE1, ]
	(votes(V:node:e2:, NODE2) & votes(V:node:e2:, V:node:e2:)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~votes(NODE0, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE1) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~votes(n0, n0) | ~votes(n0, n2) | ~votes(n1, n1) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~votes(NODE0, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE1) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N0) & votes(N0, N2) & votes(N1, N1) & votes(N1, N2)) -> (N0 = N1)))
@    65s  is global clause? No
@    65s  Learning in F[7]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N0) & votes(N0, N2) & votes(N1, N1) & votes(N1, N2)) -> (N0 = N1)))
@    65s  F[7] /\ T /\ C+ ?
@    65s  	Ans. UNSAT
@    66s  F[8] unsat core #4 	(ucsz: 16 -> 10 -> 6 -> 5 -> 4 -> 4)
(minimal unsat core)
	votes(n1, n1)
	votes(n0, n0)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | ~votes(n0, n0) | ~votes(n1, n1))
(relations)
	votes
	leader
(cube: std)
	votes(NODE0, NODE0)
	leader(NODE1)
	votes(NODE1, NODE1)
	leader(NODE0)
(antecedent reduction)
@    66s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~votes(n0, n0) | ~votes(n1, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N0) & votes(N1, N1) & leader(N0) & leader(N1)) -> (N0 = N1)))
@    66s  is global clause? No
@    66s  Learning in F[8]: (forall N1, N0 . ((votes(N0, N0) & votes(N1, N1) & leader(N0) & leader(N1)) -> (N0 = N1)))
@    66s  F[8] /\ T /\ C+ ?
@    66s  	Ans. UNSAT
@    67s  F[9] unsat core #7 	(ucsz: 14 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	votes(n0, n0)
	(phase_becomeLeader:e3 = Q:phase4)
	votes(n1, n1)
	~(Q:phase2 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~votes(n0, n0) | ~votes(n1, n1) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	votes
(cube: std)
	~(phase:i1 = phase:i0)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	leader(NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    67s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	leader(NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . ((curr_phase:e3 = phase_becomeLeader:e3) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~votes(n0, n0) | ~votes(n1, n1) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((curr_phase:e3 = phase_becomeLeader:e3) | ~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | (NODE0 = NODE1) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((votes(N0, N0) & votes(N1, N1) & leader(N0) & leader(N1)) -> ((curr_phase = phase_becomeLeader) | (N0 = N1))))
@    67s  is global clause? No
@    67s  Learning in F[9]: (forall N1, N0 . ((votes(N0, N0) & votes(N1, N1) & leader(N0) & leader(N1)) -> ((curr_phase = phase_becomeLeader) | (N0 = N1))))
@    67s  F[9] /\ T /\ C+ ?
@    67s  	Ans. UNSAT
@    67s  F[10] unsat core #6 	(ucsz: 16 -> 14 -> 12 -> 10 -> 9 -> 6 -> 6)
(minimal unsat core)
	votes(n0, n0)
	(phase_decide:e3 = Q:phase0)
	votes(n1, n1)
	decided(n1, v1)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~votes(n0, n0) | ~votes(n1, n1)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	votes
	decided
(cube: std)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	decided(NODE1, VALUE0)
(antecedent reduction)
@    68s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	votes(NODE0, NODE0)
	votes(NODE1, NODE1)
	decided(NODE1, VALUE0)
	(curr_phase:e3 = phase_decide:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | ~(curr_phase:e3 = phase_decide:e3) | (NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~votes(n0, n0) | ~votes(n1, n1)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~votes(NODE0, NODE0) | ~votes(NODE1, NODE1) | ~(curr_phase:e3 = phase_decide:e3) | (NODE0 = NODE1) | ~decided(NODE1, VALUE0) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((votes(N0, N0) & votes(N1, N1) & (curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    68s  is global clause? No
@    68s  Learning in F[10]: (forall N1, V0, N0 . ((votes(N0, N0) & votes(N1, N1) & (curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    68s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    68s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    68s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    68s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    68s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    68s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    68s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false			--> modified
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    68s  F[3] /\ T /\ C+ ?
@    68s  	Ans. UNSAT
@    69s  F[4] unsat core #3 	(ucsz: 11 -> 5 -> 5 -> 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n0, n2)
	~vote_request_msg(n0, n1)
(clause)
	(~vote_msg(n1, n0) | ~votes(n0, n2) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
(antecedent reduction)
@    69s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ vote_msg(V:node:e2:, NODE0), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ~vote_request_msg(V:node:e2:, NODE1), ]
ucubes2qv #3
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
	votes(NODE0, V:node:e2:) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~votes(n0, n2) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    69s  is global clause? No
@    69s  Learning in F[4]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    69s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    69s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    69s  F[3] /\ T /\ C+ ?
@    69s  	Ans. UNSAT
@    69s  F[4] unsat core #3 	(ucsz: 9 -> 5 -> 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n1, n2)
	~vote_request_msg(n0, n1)
(clause)
	(~vote_msg(n1, n0) | ~votes(n1, n2) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    69s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE1, NODE2), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e2:), ~vote_request_msg(V:node:e2:, NODE1), ]
ucubes2qv #3
	(vote_msg(NODE1, V:node:e2:) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
	votes(NODE1, V:node:e2:) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~votes(n1, n2) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    69s  is global clause? No
@    69s  Learning in F[4]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    69s  F[4] /\ T /\ C+ ?
@    69s  	Ans. UNSAT
@    69s  F[5] unsat core #4 	(ucsz: 14 -> 12 -> 10 -> 4 -> 4 -> 4)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n1, n2)
	votes(n0, n2)
	~vote_request_msg(n0, n1)
(clause)
	(~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n1))
(relations)
	votes
	vote_request_msg
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    70s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ~vote_request_msg(V:node:e2:, NODE1), ]
ucubes2qv #3
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    70s  is global clause? No
@    70s  Learning in F[5]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    70s  F[5] /\ T /\ C+ ?
@    70s  	Ans. UNSAT
@    70s  F[6] unsat core #6 	(ucsz: 14 -> 12 -> 10 -> 8 -> 6 -> 6)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n0, n2)
	votes(n1, n2)
	~vote_request_msg(n0, n1)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n1)))
(relations)
	curr_phase:e3
	phase_becomeLeader:e3
	vote_msg
	votes
	vote_request_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    70s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ~vote_request_msg(V:node:e2:, NODE1), ]
ucubes2qv #3
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    70s  is global clause? No
@    70s  Learning in F[6]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
@    70s  F[6] /\ T /\ C+ ?
@    70s  	Ans. UNSAT
@    71s  F[7] unsat core #8 	(ucsz: 15 -> 13 -> 11 -> 10 -> 8 -> 8)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n0, n1)
	~(Q:phase0 = Q:phase2)
	leader(n0)
	(phase_recvVote:e3 = Q:phase0)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase0) | ~leader(n0) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(relations)
	vote_msg
	vote_request_msg
	phase_recvVote:e3
	leader
	votes
	curr_phase:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	~(phase:i1 = phase:i0)
	votes(NODE0, NODE2)
	(phase_recvVote:e3 = phase:i1)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    71s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i1 -> phase_recvVote:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	~vote_request_msg(NODE0, NODE1)
	votes(NODE0, NODE2)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	~(phase_recvVote:e3 = curr_phase:e3)
	votes(NODE1, NODE2)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ~vote_request_msg(NODE0, V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ~vote_request_msg(V:node:e2:, NODE1), leader(V:node:e2:), ]
ucubes2qv #3
	(leader(V:node:e2:) & vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (phase_recvVote:e3 = curr_phase:e3) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase0) | ~leader(n0) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (phase_recvVote:e3 = curr_phase:e3) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N0) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    71s  is global clause? No
@    71s  Learning in F[7]: (forall N1, N2, N0 . ((leader(N0) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    71s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    71s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = false
	member(n0, q2) = false
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    72s  F[6] /\ T /\ C+ ?
@    72s  	Ans. UNSAT
@    72s  F[7] unsat core #8 	(ucsz: 15 -> 13 -> 11 -> 10 -> 8 -> 8)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n0, n1)
	~(Q:phase0 = Q:phase2)
	leader(n1)
	(phase_recvVote:e3 = Q:phase0)
(clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase0) | ~leader(n1) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(relations)
	vote_msg
	vote_request_msg
	phase_recvVote:e3
	leader
	votes
	curr_phase:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	~(phase:i1 = phase:i0)
	votes(NODE0, NODE2)
	(phase_recvVote:e3 = phase:i1)
	(curr_phase:e3 = phase:i0)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    72s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i1 -> phase_recvVote:e3
	phase:i0 -> curr_phase:e3
(cube eq)
	~vote_request_msg(NODE0, NODE1)
	votes(NODE0, NODE2)
	vote_msg(NODE1, NODE0)
	~(phase_recvVote:e3 = curr_phase:e3)
	votes(NODE1, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ~vote_request_msg(NODE0, NODE1), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ~vote_request_msg(NODE0, V:node:e2:), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ~vote_request_msg(V:node:e2:, NODE1), ]
ucubes2qv #3
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2) & ~vote_request_msg(V:node:e2:, NODE1)) -> [ NODE0, ]
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(leader(V:node:e2:) & vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2) & ~vote_request_msg(NODE0, V:node:e2:)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE1) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (phase_recvVote:e3 = curr_phase:e3) | vote_request_msg(NODE0, NODE1)))
---------------------------
(original clause)
	(forall Q:phase2, Q:phase0 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase0) | ~leader(n1) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2) | (Q:phase0 = Q:phase2) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~leader(NODE1) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1) | (phase_recvVote:e3 = curr_phase:e3) | vote_request_msg(NODE0, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((leader(N1) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    72s  is global clause? No
@    72s  Learning in F[7]: (forall N1, N2, N0 . ((leader(N1) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
@    72s  F[7] /\ T /\ C+ ?
@    72s  	Ans. UNSAT
@    73s  F[8] unsat core #4 	(ucsz: 10 -> 9 -> 8 -> 5 -> 4 -> 4)
(minimal unsat core)
	vote_msg(n1, n0)
	leader(n1)
	~vote_request_msg(n0, n1)
	leader(n0)
(clause)
	(~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1))
(relations)
	leader
	vote_request_msg
	vote_msg
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	leader(NODE1)
	vote_msg(NODE1, NODE0)
	leader(NODE0)
(antecedent reduction)
@    73s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~leader(NODE0) | vote_request_msg(NODE0, NODE1) | (NODE0 = NODE1) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (~vote_msg(NODE1, NODE0) | ~leader(NODE0) | vote_request_msg(NODE0, NODE1) | (NODE0 = NODE1) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N0) & leader(N0) & leader(N1)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    73s  is global clause? No
@    73s  Learning in F[8]: (forall N1, N0 . ((vote_msg(N1, N0) & leader(N0) & leader(N1)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    73s  F[8] /\ T /\ C+ ?
@    73s  	Ans. UNSAT
@    74s  F[9] unsat core #7 	(ucsz: 14 -> 11 -> 9 -> 7 -> 7)
(minimal unsat core)
	vote_msg(n1, n0)
	(phase_becomeLeader:e3 = Q:phase4)
	~(Q:phase2 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	~vote_request_msg(n0, n1)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0) | (Q:phase2 = Q:phase4) | vote_request_msg(n0, n1)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_msg
	vote_request_msg
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    75s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	~vote_request_msg(NODE0, NODE1)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . (vote_request_msg(NODE0, NODE1) | (curr_phase:e3 = phase_becomeLeader:e3) | (NODE0 = NODE1) | ~vote_msg(NODE1, NODE0) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0) | (Q:phase2 = Q:phase4) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . (vote_request_msg(NODE0, NODE1) | (curr_phase:e3 = phase_becomeLeader:e3) | (NODE0 = NODE1) | ~vote_msg(NODE1, NODE0) | ~leader(NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((vote_msg(N1, N0) & leader(N0) & leader(N1)) -> (vote_request_msg(N0, N1) | (curr_phase = phase_becomeLeader) | (N0 = N1))))
@    75s  is global clause? No
@    75s  Learning in F[9]: (forall N1, N0 . ((vote_msg(N1, N0) & leader(N0) & leader(N1)) -> (vote_request_msg(N0, N1) | (curr_phase = phase_becomeLeader) | (N0 = N1))))
@    75s  F[9] /\ T /\ C+ ?
@    75s  	Ans. UNSAT
@    75s  F[10] unsat core #6 	(ucsz: 16 -> 14 -> 13 -> 11 -> 9 -> 8 -> 6 -> 6)
(minimal unsat core)
	vote_msg(n1, n0)
	(phase_decide:e3 = Q:phase0)
	~vote_request_msg(n0, n1)
	decided(n1, v1)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1)))
(relations)
	curr_phase:e3
	leader
	phase_decide:e3
	vote_msg
	decided
	vote_request_msg
(cube: std)
	~vote_request_msg(NODE0, NODE1)
	(phase_decide:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	decided(NODE1, VALUE0)
(antecedent reduction)
@    75s  antecedent: 2 -> 2

(eq map)
	phase:i0 -> phase_decide:e3
(cube eq)
	~vote_request_msg(NODE0, NODE1)
	vote_msg(NODE1, NODE0)
	(curr_phase:e3 = phase_decide:e3)
	decided(NODE1, VALUE0)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (vote_request_msg(NODE0, NODE1) | ~(curr_phase:e3 = phase_decide:e3) | ~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~decided(NODE1, VALUE0) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_decide:e3 = Q:phase0) | ~decided(n1, v1) | ~leader(n0) | ~vote_msg(n1, n0) | vote_request_msg(n0, n1)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (vote_request_msg(NODE0, NODE1) | ~(curr_phase:e3 = phase_decide:e3) | ~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~decided(NODE1, VALUE0) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . (((curr_phase = phase_decide) & leader(N0) & vote_msg(N1, N0) & decided(N1, V0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    75s  is global clause? No
@    75s  Learning in F[10]: (forall N1, V0, N0 . (((curr_phase = phase_decide) & leader(N0) & vote_msg(N1, N0) & decided(N1, V0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
@    75s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = true
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false			--> modified
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = true
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    75s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    76s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false			--> modified
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    76s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    76s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    76s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    76s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    76s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    76s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false			--> modified
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    76s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    76s  F[1] /\ T /\ C+ ?
@    76s  	Ans. UNSAT
@    76s  F[2] unsat core #2 	(ucsz: 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n1, n0)
(clause)
	(~vote_msg(n1, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    77s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

(boosted clause)
	(forall NODE1, NODE2, NODE0 . ((NODE0 = NODE2) | ~vote_msg(NODE1, NODE0) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . ((NODE0 = NODE2) | ~vote_msg(NODE1, NODE0) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & vote_msg(N2, N1)) -> (N0 = N2)))
@    77s  is global clause? No
@    77s  Learning in F[2]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & vote_msg(N2, N1)) -> (N0 = N2)))
@    77s  F[2] /\ T /\ C+ ?
@    77s  	Ans. UNSAT
@    77s  F[3] unsat core #4 	(ucsz: 8 -> 4 -> 4 -> 4)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n1, n0)
	(phase_recvVote:e3 = Q:phase2)
	(curr_phase:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase2) | ~vote_msg(n1, n0) | ~vote_msg(n2, n1)))
(relations)
	curr_phase:e3
	vote_msg
	phase_recvVote:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	(phase_recvVote:e3 = phase:i0)
	(curr_phase:e3 = phase:i0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    77s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

(eq map)
	phase:i0 -> phase_recvVote:e3
(cube eq)
	(curr_phase:e3 = phase_recvVote:e3)
	vote_msg(NODE1, NODE0)
	vote_msg(NODE2, NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE2)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), vote_msg(NODE2, NODE1), ]
	NODE2 -> [ vote_msg(NODE2, NODE1), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #3
	NODE1 -> [ vote_msg(V:node:e2:, NODE0), vote_msg(NODE2, V:node:e2:), ]
	NODE2 -> [ vote_msg(V:node:e2:, NODE1), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e2:), ]
ucubes2qv #3
	vote_msg(NODE1, V:node:e2:) -> [ NODE0, ]
	(vote_msg(NODE2, V:node:e2:) & vote_msg(V:node:e2:, NODE0)) -> [ NODE1, ]
	vote_msg(V:node:e2:, NODE1) -> [ NODE2, ]
(partition) #3 node:e2: -> { NODE0, | NODE1, | NODE2, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(curr_phase:e3 = phase_recvVote:e3) | ~vote_msg(NODE1, NODE0) | ~vote_msg(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_recvVote:e3 = Q:phase2) | ~vote_msg(n1, n0) | ~vote_msg(n2, n1)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(curr_phase:e3 = phase_recvVote:e3) | ~vote_msg(NODE1, NODE0) | ~vote_msg(NODE2, NODE1) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0) & vote_msg(N2, N1)) -> (N0 = N2)))
@    77s  is global clause? No
@    77s  Learning in F[3]: (forall N1, N2, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0) & vote_msg(N2, N1)) -> (N0 = N2)))
@    77s  F[3] /\ T /\ C+ ?
@    77s  	Ans. UNSAT
@    77s  F[4] unsat core #2 	(ucsz: 11 -> 9 -> 8 -> 6 -> 3 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n1, n2)
(clause)
	(~vote_msg(n1, n0) | ~votes(n1, n2))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    77s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE1, NODE2), ]
	NODE0 -> [ vote_msg(NODE1, NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), ]
	NODE0 -> [ vote_msg(NODE1, V:node:e2:), ]
ucubes2qv #3
	votes(NODE1, V:node:e2:) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	vote_msg(NODE1, V:node:e2:) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE1, NODE2) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N1, N2)) -> (N0 = N2)))
@    77s  is global clause? No
@    77s  Learning in F[4]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N1, N2)) -> (N0 = N2)))
@    77s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    77s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false			--> modified
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    77s  F[3] /\ T /\ C+ ?
@    77s  	Ans. UNSAT
@    77s  F[4] unsat core #3 	(ucsz: 9 -> 8 -> 6 -> 3 -> 3 -> 3)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n1, n0)
	votes(n0, n2)
(clause)
	(~vote_msg(n1, n0) | ~vote_msg(n2, n1) | ~votes(n0, n2))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	vote_msg(NODE1, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    78s  antecedent: 3 -> 2 (reduced)
	removed: NODE1

qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), vote_msg(NODE2, NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), vote_msg(NODE2, NODE1), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ]
qv2ucubes #3
	NODE1 -> [ vote_msg(V:node:e2:, NODE0), vote_msg(NODE2, V:node:e2:), ]
	NODE2 -> [ votes(NODE0, V:node:e2:), vote_msg(V:node:e2:, NODE1), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ]
ucubes2qv #3
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
	(vote_msg(V:node:e2:, NODE1) & votes(NODE0, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(NODE2, V:node:e2:) & vote_msg(V:node:e2:, NODE0)) -> [ NODE1, ]
(partition) #3 node:e2: -> { NODE0, | NODE2, | NODE1, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~vote_msg(NODE2, NODE1) | ~votes(NODE0, NODE2) | (NODE0 = NODE2)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~vote_msg(n2, n1) | ~votes(n0, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~vote_msg(NODE2, NODE1) | ~votes(NODE0, NODE2) | (NODE0 = NODE2)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & vote_msg(N2, N1) & votes(N0, N2)) -> (N0 = N2)))
@    78s  is global clause? No
@    78s  Learning in F[4]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & vote_msg(N2, N1) & votes(N0, N2)) -> (N0 = N2)))
@    78s  F[4] /\ T /\ C+ ?
@    78s  	Ans. UNSAT
@    78s  F[5] unsat core #3 	(ucsz: 12 -> 10 -> 9 -> 3 -> 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n1, n2)
	votes(n0, n2)
(clause)
	(~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2))
(relations)
	votes
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    78s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    78s  is global clause? No
@    78s  Learning in F[5]: (forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    78s  F[5] /\ T /\ C+ ?
@    78s  	Ans. UNSAT
@    78s  F[6] unsat core #5 	(ucsz: 13 -> 11 -> 9 -> 7 -> 5 -> 5)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n1, n2)
	votes(n0, n2)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(relations)
	votes
	curr_phase:e3
	vote_msg
	phase_becomeLeader:e3
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
(antecedent reduction)
@    78s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    78s  is global clause? No
@    78s  Learning in F[6]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    78s  F[6] /\ T /\ C+ ?
@    78s  	Ans. UNSAT
@    79s  F[7] unsat core #6 	(ucsz: 14 -> 12 -> 10 -> 8 -> 6 -> 6)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
	leader(n1)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_msg
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	(phase_becomeLeader:e3 = phase:i0)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
	leader(NODE1)
(antecedent reduction)
@    79s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), votes(NODE1, NODE2), leader(NODE1), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), leader(V:node:e2:), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(leader(V:node:e2:) & vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n1) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE1) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    79s  is global clause? No
@    79s  Learning in F[7]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    79s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    79s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = true
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = true
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = false
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    79s  F[6] /\ T /\ C+ ?
@    79s  	Ans. UNSAT
@    79s  F[7] unsat core #6 	(ucsz: 14 -> 12 -> 10 -> 8 -> 6 -> 6)
(minimal unsat core)
	vote_msg(n1, n0)
	votes(n0, n2)
	votes(n1, n2)
	(curr_phase:e3 = Q:phase2)
	(phase_becomeLeader:e3 = Q:phase2)
	leader(n0)
(clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n0) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_msg
	votes
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	votes(NODE0, NODE2)
	(curr_phase:e3 = phase:i0)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	votes(NODE1, NODE2)
(antecedent reduction)
@    80s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(eq map)
	phase:i0 -> curr_phase:e3
(cube eq)
	votes(NODE0, NODE2)
	(phase_becomeLeader:e3 = curr_phase:e3)
	vote_msg(NODE1, NODE0)
	votes(NODE1, NODE2)
	leader(NODE0)
(qvars eq)
	NODE1
	NODE2
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
qv2cubes #3
	NODE1 -> [ vote_msg(NODE1, NODE0), votes(NODE1, NODE2), ]
	NODE2 -> [ votes(NODE0, NODE2), votes(NODE1, NODE2), ]
	NODE0 -> [ votes(NODE0, NODE2), vote_msg(NODE1, NODE0), leader(NODE0), ]
qv2ucubes #3
	NODE1 -> [ votes(V:node:e2:, NODE2), vote_msg(V:node:e2:, NODE0), ]
	NODE2 -> [ votes(NODE1, V:node:e2:), votes(NODE0, V:node:e2:), ]
	NODE0 -> [ votes(V:node:e2:, NODE2), vote_msg(NODE1, V:node:e2:), leader(V:node:e2:), ]
ucubes2qv #3
	(votes(NODE0, V:node:e2:) & votes(NODE1, V:node:e2:)) -> [ NODE2, ]
	(vote_msg(V:node:e2:, NODE0) & votes(V:node:e2:, NODE2)) -> [ NODE1, ]
	(leader(V:node:e2:) & vote_msg(NODE1, V:node:e2:) & votes(V:node:e2:, NODE2)) -> [ NODE0, ]
(partition) #3 node:e2: -> { NODE2, | NODE1, | NODE0, | }
	#3 singles, #0 multiples (out of #3 cells)
(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(original clause)
	(forall Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase2) | ~leader(n0) | ~vote_msg(n1, n0) | ~votes(n0, n2) | ~votes(n1, n2)))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~(phase_becomeLeader:e3 = curr_phase:e3) | ~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~votes(NODE0, NODE2) | ~votes(NODE1, NODE2) | (NODE0 = NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N0) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    80s  is global clause? No
@    80s  Learning in F[7]: (forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N0) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    80s  F[7] /\ T /\ C+ ?
@    80s  	Ans. UNSAT
@    81s  F[8] unsat core #3 	(ucsz: 9 -> 7 -> 5 -> 4 -> 3 -> 3)
(minimal unsat core)
	vote_msg(n1, n0)
	leader(n0)
	leader(n1)
(clause)
	(~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0))
(relations)
	leader
	vote_msg
(cube: std)
	leader(NODE1)
	vote_msg(NODE1, NODE0)
	leader(NODE0)
(antecedent reduction)
@    81s  antecedent: 2 -> 2

(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~leader(NODE1)))
---------------------------
(original clause)
	(~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE0) | ~vote_msg(NODE1, NODE0) | ~leader(NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N0) & vote_msg(N1, N0) & leader(N1)) -> (N0 = N1)))
@    81s  is global clause? No
@    81s  Learning in F[8]: (forall N1, N0 . ((leader(N0) & vote_msg(N1, N0) & leader(N1)) -> (N0 = N1)))
@    81s  F[8] /\ T /\ C+ ?
@    81s  	Ans. UNSAT
@    81s  F[9] unsat core #6 	(ucsz: 13 -> 12 -> 8 -> 6 -> 6)
(minimal unsat core)
	vote_msg(n1, n0)
	(phase_becomeLeader:e3 = Q:phase4)
	~(Q:phase2 = Q:phase4)
	(curr_phase:e3 = Q:phase2)
	leader(n0)
	leader(n1)
(clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0) | (Q:phase2 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_msg
(cube: std)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
	leader(NODE1)
(antecedent reduction)
@    82s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	leader(NODE0)
	vote_msg(NODE1, NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE1)
(qvars eq)
	NODE1
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE1) | ~vote_msg(NODE1, NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase2 . (~(curr_phase:e3 = Q:phase2) | ~(phase_becomeLeader:e3 = Q:phase4) | ~leader(n0) | ~leader(n1) | ~vote_msg(n1, n0) | (Q:phase2 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, NODE0 . ((NODE0 = NODE1) | ~leader(NODE1) | ~vote_msg(NODE1, NODE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, N0 . ((leader(N1) & vote_msg(N1, N0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    82s  is global clause? No
@    82s  Learning in F[9]: (forall N1, N0 . ((leader(N1) & vote_msg(N1, N0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    82s  F[9] /\ T /\ C+ ?
@    82s  	Ans. UNSAT
@    82s  F[10] unsat core #6 	(ucsz: 15 -> 13 -> 12 -> 11 -> 10 -> 8 -> 6 -> 6)
(minimal unsat core)
	vote_msg(n1, n0)
	(phase_becomeLeader:e3 = Q:phase4)
	decided(n1, v1)
	~(Q:phase0 = Q:phase4)
	(curr_phase:e3 = Q:phase0)
	leader(n0)
(clause)
	(forall Q:phase4, Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n1, v1) | ~leader(n0) | ~vote_msg(n1, n0) | (Q:phase0 = Q:phase4)))
(relations)
	curr_phase:e3
	leader
	phase_becomeLeader:e3
	vote_msg
	decided
(cube: std)
	~(phase:i1 = phase:i0)
	leader(NODE0)
	decided(NODE1, VALUE0)
	vote_msg(NODE1, NODE0)
	(phase_becomeLeader:e3 = phase:i0)
	(curr_phase:e3 = phase:i1)
(antecedent reduction)
@    82s  antecedent: 2 -> 2

(eq map)
	phase:i1 -> curr_phase:e3
	phase:i0 -> phase_becomeLeader:e3
(cube eq)
	decided(NODE1, VALUE0)
	vote_msg(NODE1, NODE0)
	~(curr_phase:e3 = phase_becomeLeader:e3)
	leader(NODE0)
(qvars eq)
	NODE1
	VALUE0
	NODE0
(antecedent eq)
	node:e2:
	-> ~(NODE0 = NODE1)
(boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~vote_msg(NODE1, NODE0) | (NODE0 = NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(original clause)
	(forall Q:phase4, Q:phase0 . (~(curr_phase:e3 = Q:phase0) | ~(phase_becomeLeader:e3 = Q:phase4) | ~decided(n1, v1) | ~leader(n0) | ~vote_msg(n1, n0) | (Q:phase0 = Q:phase4)))
(learnt sym-boosted clause)
	(forall NODE1, VALUE0, NODE0 . (~vote_msg(NODE1, NODE0) | (NODE0 = NODE1) | ~decided(NODE1, VALUE0) | (curr_phase:e3 = phase_becomeLeader:e3) | ~leader(NODE0)))
---------------------------
(clause-type: univ)	(forall N1, V0, N0 . ((vote_msg(N1, N0) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    82s  is global clause? No
@    82s  Learning in F[10]: (forall N1, V0, N0 . ((vote_msg(N1, N0) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
@    82s  F[10] /\ T /\ !P+ -> SAT
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
(cube in !P)
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = true
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

(cube in F[10])
	curr_phase = Q:phase0
	decided(n0, v0) = false
	decided(n0, v1) = false			--> modified
	decided(n1, v0) = true
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    82s  F[9] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:decide
	en: en_ext:decide:e3 with value True
	inputs:
actionName ext:decide
		V__fml:v:e1 -> v0
		V__fml:n:e1 -> n0
@    83s  	Ans. SAT
(cube in F[9])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false			--> modified
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase2 versus Q:phase0
	phase_decide = Q:phase2
	Conflicting assignment in global condition for phase_recvVote: Q:phase0 versus Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[8] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase4
	en: en_ext:next_phase4:e3 with value True
	inputs:
actionName ext:next_phase4
@    83s  	Ans. SAT
(cube in F[8])
	curr_phase = Q:phase4			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = true
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase2
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[7] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    83s  	Ans. SAT
(cube in F[7])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false			--> modified
	leader(n1) = true
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase2 versus Q:phase4
	phase_becomeLeader = Q:phase2
	Conflicting assignment in global condition for phase_decide: Q:phase4 versus Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[6] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:become_leader
	en: en_ext:become_leader:e3 with value True
	inputs:
actionName ext:become_leader
		V__fml:n:e1 -> n0
		V__fml:q:e1 -> q0
@    83s  	Ans. SAT
(cube in F[6])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false			--> modified
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[5] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase3
	en: en_ext:next_phase3:e3 with value True
	inputs:
actionName ext:next_phase3
@    83s  	Ans. SAT
(cube in F[5])
	curr_phase = Q:phase0			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = true
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase2
	phase_decide = Q:phase4
	phase_recvVote = Q:phase0
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[4] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    83s  	Ans. SAT
(cube in F[4])
	curr_phase = Q:phase2			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = true
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false			--> modified
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	Conflicting assignment in global condition for phase_becomeLeader: Q:phase4 versus Q:phase2
	phase_becomeLeader = Q:phase4
	Conflicting assignment in global condition for phase_decide: Q:phase0 versus Q:phase4
	phase_decide = Q:phase0
	Conflicting assignment in global condition for phase_recvVote: Q:phase2 versus Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[3] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:recv_vote
	en: en_ext:recv_vote:e3 with value True
	inputs:
actionName ext:recv_vote
		V__fml:n:e1 -> n0
		V__fml:sender:e1 -> n0
@    83s  	Ans. SAT
(cube in F[3])
	curr_phase = Q:phase2
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false			--> modified
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    83s  F[2] /\ T /\ C+ ?
####################MODEL PRINT: ####################
####################END PRINT MODEL:####################
(action info)
	action: ext:next_phase2
	en: en_ext:next_phase2:e3 with value True
	inputs:
actionName ext:next_phase2
@    84s  	Ans. SAT
(cube in F[2])
	curr_phase = Q:phase3			--> modified
	decided(n0, v0) = false
	decided(n0, v1) = false
	decided(n1, v0) = false
	decided(n1, v1) = false
	decided(n2, v0) = false
	decided(n2, v1) = false
	leader(n0) = false
	leader(n1) = false
	leader(n2) = false
	vote_msg(n0, n0) = false
	vote_msg(n0, n1) = false
	vote_msg(n0, n2) = false
	vote_msg(n1, n0) = false
	vote_msg(n1, n1) = false
	vote_msg(n1, n2) = false
	vote_msg(n2, n0) = true
	vote_msg(n2, n1) = true
	vote_msg(n2, n2) = false
	vote_request_msg(n0, n0) = false
	vote_request_msg(n0, n1) = false
	vote_request_msg(n0, n2) = true
	vote_request_msg(n1, n0) = false
	vote_request_msg(n1, n1) = false
	vote_request_msg(n1, n2) = true
	vote_request_msg(n2, n0) = false
	vote_request_msg(n2, n1) = false
	vote_request_msg(n2, n2) = false
	voted(n0) = true
	voted(n1) = true
	voted(n2) = true
	votes(n0, n0) = false
	votes(n0, n1) = false
	votes(n0, n2) = false
	votes(n1, n0) = false
	votes(n1, n1) = false
	votes(n1, n2) = false
	votes(n2, n0) = false
	votes(n2, n1) = false
	votes(n2, n2) = false
	member(n0, q0) = false
	member(n0, q1) = true
	member(n0, q2) = true
	member(n1, q0) = false
	member(n1, q1) = false
	member(n1, q2) = false
	member(n2, q0) = true
	member(n2, q1) = true
	member(n2, q2) = true
	phase_becomeLeader = Q:phase4
	phase_decide = Q:phase0
	phase_recvVote = Q:phase2
	phase_sendRequestVote = Q:phase1
	phase_sendVote = Q:phase3

@    84s  F[1] /\ T /\ C+ ?
@    84s  	Ans. UNSAT
@    84s  F[2] unsat core #2 	(ucsz: 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    84s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  is global clause? No
@    84s  Learning in F[2]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  F[2] /\ T /\ C+ ?
@    84s  	Ans. UNSAT
@    84s  F[3] unsat core #2 	(ucsz: 8 -> 4 -> 4 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    84s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  is global clause? No
@    84s  Learning in F[3]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  F[3] /\ T /\ C+ ?
@    84s  	Ans. UNSAT
@    84s  F[4] unsat core #2 	(ucsz: 10 -> 8 -> 7 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    84s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  is global clause? No
@    84s  Learning in F[4]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  F[4] /\ T /\ C+ ?
@    84s  	Ans. UNSAT
@    84s  F[5] unsat core #2 	(ucsz: 10 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    84s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  is global clause? No
@    84s  Learning in F[5]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    84s  F[5] /\ T /\ C+ ?
@    84s  	Ans. UNSAT
@    84s  F[6] unsat core #2 	(ucsz: 6 -> 4 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    85s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  is global clause? No
@    85s  Learning in F[6]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  F[6] /\ T /\ C+ ?
@    85s  	Ans. UNSAT
@    85s  F[7] unsat core #2 	(ucsz: 6 -> 4 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    85s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  is global clause? No
@    85s  Learning in F[7]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  F[7] /\ T /\ C+ ?
@    85s  	Ans. UNSAT
@    85s  F[8] unsat core #2 	(ucsz: 6 -> 4 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    85s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  is global clause? No
@    85s  Learning in F[8]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  F[8] /\ T /\ C+ ?
@    85s  	Ans. UNSAT
@    85s  F[9] unsat core #2 	(ucsz: 8 -> 7 -> 5 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    85s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  is global clause? No
@    85s  Learning in F[9]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  F[9] /\ T /\ C+ ?
@    85s  	Ans. UNSAT
@    85s  F[10] unsat core #2 	(ucsz: 8 -> 6 -> 2 -> 2 -> 2)
(minimal unsat core)
	vote_msg(n2, n1)
	vote_msg(n2, n0)
(clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(relations)
	vote_msg
(fullsorts)
	node:e2: -> [ NODE0, NODE1, NODE2, ]
(cube: std)
	vote_msg(NODE2, NODE0)
	vote_msg(NODE2, NODE1)
(antecedent reduction)
@    85s  antecedent: 3 -> 2 (reduced)
	removed: NODE2

(boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(original clause)
	(~vote_msg(n2, n0) | ~vote_msg(n2, n1))
(learnt sym-boosted clause)
	(forall NODE1, NODE2, NODE0 . (~vote_msg(NODE2, NODE0) | (NODE0 = NODE1) | ~vote_msg(NODE2, NODE1)))
---------------------------
(clause-type: univ)	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  is global clause? No
@    85s  Learning in F[10]: (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
@    85s  F[10] /\ T /\ !P+ -> UNSAT
Frames: #11
	F[0]: #1
		((forall N3, N3_3 . ~vote_request_msg(N3, N3_3)) & (forall N3 . ~voted(N3)) & (forall N3, N3_2 . ~vote_msg(N3, N3_2)) & (forall N3_1, N3 . ~votes(N3, N3_1)) & (forall N3 . ~leader(N3)) & (forall V3, N3 . ~decided(N3, V3)) & (curr_phase = phase_sendRequestVote))
	F[1]: #2
		~(curr_phase = phase_recvVote)
		(forall N1, N0 . ~vote_msg(N1, N0))
	F[2]: #4
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_recvVote)))
		(forall N1, N2, N0 . ((vote_msg(N1, N0) & vote_msg(N2, N1)) -> (N0 = N2)))
		~(phase_becomeLeader = curr_phase)
		(forall N1, N0 . (vote_msg(N1, N0) -> (vote_request_msg(N0, N1) | (N0 = N1))))
	F[3]: #5
		(forall N1, N2, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0) & vote_msg(N2, N1)) -> (N0 = N2)))
		~(curr_phase = phase_decide)
		(forall N1, N0 . (((curr_phase = phase_recvVote) & vote_msg(N1, N0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
		(forall N1, N0 . ~votes(N0, N1))
		(forall N1, N0 . ((phase_becomeLeader = curr_phase) -> ~vote_msg(N1, N0)))
	F[4]: #10
		(forall N1, N0 . (votes(N0, N1) -> ~(phase_becomeLeader = curr_phase)))
		(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
		(forall N1, N0 . ((votes(N0, N0) & votes(N1, N1)) -> (N0 = N1)))
		(forall N1, N0 . (vote_msg(N1, N0) -> ~(curr_phase = phase_decide)))
		(forall N1, N0 . ((votes(N0, N1) & votes(N1, N0)) -> (N0 = N1)))
		(forall N1, N2, N0 . ((vote_msg(N2, N0) & votes(N1, N2)) -> ((N0 = N2) | vote_request_msg(N0, N2))))
		(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N1, N2)) -> (N0 = N2)))
		(forall N1, N2, N0 . ((vote_msg(N1, N0) & vote_msg(N2, N1) & votes(N0, N2)) -> (N0 = N2)))
		(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N1))))
		(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
	F[5]: #6
		(forall N1, N2, N0 . ((votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
		(forall N0 . ~leader(N0))
		(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N2))))
		(forall N1, N2, N0 . ((vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, N2, N0 . ((votes(N0, N2) & votes(N0, N0) & votes(N1, N1) & votes(N1, N2)) -> (N0 = N1)))
		((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (~(N2 = N0) & ~votes(N0, N2)))))
	F[6]: #6
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
		(forall N1, N2, N0 . ((leader(N1) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		((phase_becomeLeader = curr_phase) -> (forall N2 . (exists N0 . (((N2 = N0) | votes(N0, N0)) -> (~(N2 = N0) & ~votes(N0, N2))))))
		(forall V0, N0 . ~decided(N0, V0))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N1, N2))))
	F[7]: #12
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N0, N2))))
		(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
		(forall N1, N2, N0 . ((leader(N0) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N0) & votes(N0, N2) & votes(N1, N1) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, V0, N2, N0 . ((decided(N2, V0) & votes(N0, N1) & votes(N2, N1)) -> (N0 = N2)))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N0) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N0) & votes(N0, N1) & votes(N0, N2) & votes(N2, N0) & votes(N2, N1)) -> (N0 = N2)))
		(forall V0, N0 . ((phase_becomeLeader = curr_phase) -> ~decided(N0, V0)))
		(forall N1, N2, N0 . ((leader(N1) & vote_msg(N1, N0) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | (phase_recvVote = curr_phase) | vote_request_msg(N0, N1))))
		(forall N1, N2, N0 . (((phase_becomeLeader = curr_phase) & leader(N1) & votes(N0, N2) & votes(N1, N2)) -> ((N0 = N1) | vote_request_msg(N1, N2))))
	F[8]: #7
		(forall N1, N0 . ((leader(N0) & vote_msg(N1, N0) & leader(N1)) -> (N0 = N1)))
		(forall N1, V0, N2, N0 . (((phase_becomeLeader = curr_phase) & decided(N2, V0) & votes(N0, N1) & votes(N2, N1)) -> (N0 = N2)))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(forall N1, N0 . ((votes(N0, N1) & leader(N1) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
		(forall N1, N0 . ((votes(N0, N0) & votes(N1, N1) & leader(N0) & leader(N1)) -> (N0 = N1)))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
		(forall N1, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
	F[9]: #7
		(forall N1, N0 . ((votes(N0, N0) & votes(N1, N1) & leader(N0) & leader(N1)) -> ((curr_phase = phase_becomeLeader) | (N0 = N1))))
		(forall N1, N2, N0 . ((leader(N0) & leader(N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | (curr_phase = phase_becomeLeader) | vote_request_msg(N1, N2))))
		(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
		(forall N1, V0, N2, N0 . ((decided(N2, V0) & leader(N0) & votes(N2, N1)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2))))
		(forall N1, N0 . ((leader(N1) & vote_msg(N1, N0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall N1, N0 . ((leader(N1) & votes(N0, N1) & leader(N0) & votes(N1, N0)) -> ((curr_phase = phase_becomeLeader) | (N0 = N1))))
	F[10]: #17
		(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
		(forall N1, V0, N0 . ((vote_msg(N1, N0) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
		(forall N1, V0, N0 . (((curr_phase = phase_decide) & leader(N0) & vote_msg(N1, N0) & decided(N1, V0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
		(forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
		(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
		(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
		(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N1))))
		(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
		(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
		(forall N1, V0, N0 . ((votes(N0, N0) & votes(N1, N1) & (curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
		(forall N1, V0, N0 . (((curr_phase = phase_decide) & votes(N0, N1) & decided(N1, V0) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
		(forall N1, Q2, N2, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N2) & member(N0, Q2)) -> (votes(N2, N0) | votes(N2, N1)))))
		(forall N1, N2, N0 . ((leader(N0) & leader(N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N2, N1))))
		(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
		(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
		(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
		(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
@    85s  
Adding frame 11...
Trying forwarding F[1]
Trying forwarding F[2]
Trying forwarding F[3]
Trying forwarding F[4]
Forwarded #1 to F[5]
@    86s  Learning in F[5]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
Trying forwarding F[5]
Forwarded #1 to F[6]
@    87s  Learning in F[6]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
Trying forwarding F[6]
Forwarded #1 to F[7]
@    87s  Learning in F[7]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
Trying forwarding F[7]
Forwarded #3 to F[8]
@    87s  Learning in F[8]: (exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
@    87s  Learning in F[8]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    87s  Learning in F[8]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
Trying forwarding F[8]
Forwarded #4 to F[9]
@    88s  Learning in F[9]: (exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
@    88s  Learning in F[9]: (forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
@    88s  Learning in F[9]: (forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
@    88s  Learning in F[9]: (forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
@    88s  F[8] converged!
Explored 12 frames
@    88s  -------------------------------------------------
### Invariant: #22
invariant [other5]	(forall N1, V0, N0 . (((curr_phase = phase_decide) & leader(N0) & vote_msg(N1, N0) & decided(N1, V0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [other12]	(forall N1, V0, N0 . (((curr_phase = phase_decide) & votes(N0, N1) & decided(N1, V0) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
invariant [other6]	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
invariant [other9]	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N1))))
invariant [other17]	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
invariant [other8]	(forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
invariant [other15]	(forall N1, N2, N0 . ((leader(N0) & leader(N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N2, N1))))
invariant [other16]	(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
invariant [other4]	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
invariant [other7]	(forall N1, V0, N0 . ((vote_msg(N1, N0) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
invariant [global9]	(forall N1, Q2, N2, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N2) & member(N0, Q2)) -> (votes(N2, N0) | votes(N2, N1)))))
invariant [other3]	(forall N1, V0, N0 . ((votes(N0, N0) & votes(N1, N1) & (curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [prop1]	(forall V3, V3_2, N3_1, N3 . ((decided(N3_1, V3) & decided(N3, V3_2)) -> (V3 = V3_2)))
invariant [other14]	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
invariant [other10]	(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
invariant [other2]	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
invariant [other13]	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
###


Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> UNSAT
Checking Init /\ !Inv:
	#1 other5 -> UNSAT
	#2 global5_1 -> UNSAT
	#3 other12 -> UNSAT
	#4 other6 -> UNSAT
	#5 other9 -> UNSAT
	#6 other17 -> UNSAT
	#7 other8 -> UNSAT
	#8 other15 -> UNSAT
	#9 other16 -> UNSAT
	#10 other4 -> UNSAT
	#11 other7 -> UNSAT
	#12 global9 -> UNSAT
	#13 other3 -> UNSAT
	#14 other11 -> UNSAT
	#15 global5 -> UNSAT
	#16 prop1  (property) -> UNSAT
	#17 other14 -> UNSAT
	#18 other10 -> UNSAT
	#19 other2 -> UNSAT
	#20 global4 -> UNSAT
	#21 other1 -> UNSAT
	#22 other13 -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 other5 -> UNSAT
	#2 global5_1 -> UNSAT
	#3 other12 -> UNSAT
	#4 other6 -> UNSAT
	#5 other9 -> UNSAT
	#6 other17 -> UNSAT
	#7 other8 -> UNSAT
	#8 other15 -> UNSAT
	#9 other16 -> UNSAT
	#10 other4 -> UNSAT
	#11 other7 -> UNSAT
	#12 global9 -> UNSAT
	#13 other3 -> UNSAT
	#14 other11 -> UNSAT
	#15 global5 -> UNSAT
	#16 prop1  (property) -> UNSAT
	#17 other14 -> UNSAT
	#18 other10 -> UNSAT
	#19 other2 -> UNSAT
	#20 global4 -> UNSAT
	#21 other1 -> UNSAT
	#22 other13 -> UNSAT
	Inv_all /\ T /\ !Inv+: passed

Finite sorts: #3
	node -> node:e2: -> [`node:e2:0`, `node:e2:1`, `node:e2:2`]
	quorum -> quorum:e2: -> [`quorum:e2:0`, `quorum:e2:1`, `quorum:e2:2`]
	value -> value:e2: -> [`value:e2:0`, `value:e2:1`]

Invariant is a proof certificate
@    89s  -------------------------------------------------
--> The system is safe!
raw invariant [prop1] (cost: 4, 4F, 0E) 	(forall V1:e3, V2:e3, N1:e3, N2:e3 . ((__decided:e3(N1:e3, V1:e3) & __decided:e3(N2:e3, V2:e3)) -> (V1:e3 = V2:e3)))
raw invariant [other5] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:0 . (~...(..., ...) & (__curr_phase:e3 = phase_decide:e3) & __leader:e3(Q:node:e2:0) & __vote_msg:e3(Q:node:e2:1, Q:node:e2:0) & __decided:e3(Q:node:e2:1, Q:value:e2:0) & ~(... = ...)))
raw invariant [global5_1] (cost: 2, 2F, 0E) 	~(exists Q:node:e3:1, Q:node:e3:0 . (__vote_msg:e3(Q:node:e3:1, Q:node:e3:0) & ~...(...)))
raw invariant [other12] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:0 . ((__curr_phase:e3 = phase_decide:e3) & ~(... = ...) & __votes:e3(Q:node:e2:0, Q:node:e2:1) & __decided:e3(Q:node:e2:1, Q:value:e2:0) & __leader:e3(Q:node:e2:0) & __votes:e3(Q:node:e2:1, Q:node:e2:0)))
raw invariant [other6] (cost: 101, 1F, 1E) 	~(exists Q:node:e2:2 . (forall Q:node:e2:0 . ((... | ...) & ~...)))
raw invariant [other9] (cost: 4, 4F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:2, Q:node:e2:0 . ((__curr_phase:e3 = phase_decide:e3) & __decided:e3(Q:node:e2:2, Q:value:e2:0) & __leader:e3(Q:node:e2:0) & ~(... = ...) & ~(... = ...) & ~(... = ...) & ~...(..., ...)))
raw invariant [other17] (cost: 101, 1F, 1E) 	~(exists Q:node:e2:2 . (forall Q:node:e2:0 . ((... | ...) & (... | ...))))
raw invariant [other8] (cost: 102, 2F, 1E) 	~(exists Q:node:e2:1, Q:node:e2:0 . (forall Q:quorum:e2:0 . (...(...) & ...(...) & ...(..., ...) & ~...)))
raw invariant [other15] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:node:e2:2, Q:node:e2:0 . (__leader:e3(Q:node:e2:0) & __leader:e3(Q:node:e2:2) & ~(... = ...) & ~(... = ...) & ~(... = ...) & ~...(..., ...)))
raw invariant [other16] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:node:e2:2, Q:node:e2:0 . (__votes:e3(Q:node:e2:0, Q:node:e2:2) & __votes:e3(Q:node:e2:1, Q:node:e2:2) & ~(... = ...)))
raw invariant [other4] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:0 . (~(... = ...) & __decided:e3(Q:node:e2:1, Q:value:e2:0) & __leader:e3(Q:node:e2:0)))
raw invariant [other7] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:0 . (__vote_msg:e3(Q:node:e2:1, Q:node:e2:0) & ~(... = ...) & __decided:e3(Q:node:e2:1, Q:value:e2:0) & ~(... = ...) & __leader:e3(Q:node:e2:0)))
raw invariant [global9] (cost: 104, 4F, 1E) 	~(exists Q:node:e2:1, Q:quorum:e2:2, Q:node:e2:2, Q:node:e2:0 . (forall Q:quorum:e2:0 . ((... | ...) & ...(...) & ...(..., ...) & ~... & ~...)))
raw invariant [other3] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:0 . (__votes:e3(Q:node:e2:0, Q:node:e2:0) & __votes:e3(Q:node:e2:1, Q:node:e2:1) & (__curr_phase:e3 = phase_decide:e3) & ~(... = ...) & __decided:e3(Q:node:e2:1, Q:value:e2:0) & __leader:e3(Q:node:e2:0)))
raw invariant [other11] (cost: 3, 3F, 0E) 	~(exists Q:node:e2:1, Q:node:e2:2, Q:node:e2:0 . (__vote_msg:e3(Q:node:e2:2, Q:node:e2:0) & ~(... = ...) & __vote_msg:e3(Q:node:e2:2, Q:node:e2:1)))
raw invariant [global5] (cost: 2, 2F, 0E) 	~(exists Q:value:e3:0, Q:node:e3:0 . (~...(...) & __decided:e3(Q:node:e3:0, Q:value:e3:0)))
raw invariant [other14] (cost: 4, 4F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:2, Q:node:e2:0 . (__decided:e3(Q:node:e2:1, Q:value:e2:0) & __leader:e3(Q:node:e2:0) & ~(... = ...) & ~(... = ...) & ~(... = ...) & ~...(..., ...) & ~...(..., ...)))
raw invariant [other10] (cost: 2, 2F, 0E) 	~(exists Q:node:e2:1, Q:node:e2:0 . (~(... = ...) & __leader:e3(Q:node:e2:0) & __leader:e3(Q:node:e2:1)))
raw invariant [other2] (cost: 4, 4F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:2, Q:node:e2:0 . ((__curr_phase:e3 = phase_decide:e3) & __decided:e3(Q:node:e2:1, Q:value:e2:0) & __leader:e3(Q:node:e2:0) & __votes:e3(Q:node:e2:1, Q:node:e2:2) & ~(... = ...) & ~(... = ...) & ~(... = ...) & ~...(..., ...)))
raw invariant [global4] (cost: 2, 2F, 0E) 	~(exists Q:node:e3:1, Q:node:e3:0 . (__votes:e3(Q:node:e3:0, Q:node:e3:1) & ~...(..., ...)))
raw invariant [other1] (cost: 5, 4F, 1E) 	~(forall Q:quorum:e2:0 . (exists Q:node:e2:1, Q:quorum:e2:2, Q:node:e2:2, Q:node:e2:0 . ((... | ...) & ...(...) & ...(..., ...) & ~... & ~...)))
raw invariant [other13] (cost: 4, 4F, 0E) 	~(exists Q:node:e2:1, Q:value:e2:0, Q:node:e2:2, Q:node:e2:0 . (__decided:e3(Q:node:e2:1, Q:value:e2:0) & __leader:e3(Q:node:e2:0) & ~(... = ...) & ~(... = ...) & ~(... = ...) & ~...(..., ...)))
@    89s  Minimizing certificate of size 22
@    89s  	global9	(cost: 104) -> remove
@    89s  	other8	(cost: 102) -> remove
@    89s  	other6	(cost: 101) -> remove
@    90s  	other17	(cost: 101) -> remove
@    90s  	other1	(cost: 5) -> add
@    90s  	prop1	(cost: 4) -> property
@    90s  	other9	(cost: 4) -> remove
@    90s  	other14	(cost: 4) -> remove
@    91s  	other2	(cost: 4) -> remove
@    91s  	other13	(cost: 4) -> remove
@    91s  	other5	(cost: 3) -> remove
@    91s  	other12	(cost: 3) -> remove
@    91s  	other15	(cost: 3) -> remove
@    92s  	other16	(cost: 3) -> remove
@    92s  	other4	(cost: 3) -> remove
@    92s  	other7	(cost: 3) -> remove
@    92s  	other3	(cost: 3) -> remove
@    92s  	other11	(cost: 3) -> add
@    92s  	global5_1	(cost: 2) -> add
@    92s  	global5	(cost: 2) -> add
@    92s  	other10	(cost: 2) -> remove
@    92s  	global4	(cost: 2) -> add
	Minimized certificate: 22 -> 6
@    92s  -------------------------------------------------
### Proof certificate (required): #6
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
invariant [prop1]	(forall V3, V3_2, N3_1, N3 . ((decided(N3_1, V3) & decided(N3, V3_2)) -> (V3 = V3_2)))
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
###

### Optional invariants: #16
invariant [global9_optional]	(forall N1, Q2, N2, N0 . (exists Q0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N2) & member(N0, Q2)) -> (votes(N2, N0) | votes(N2, N1)))))
invariant [other8_optional]	(forall N1, N0 . (exists Q0 . ((leader(N0) & leader(N1) & member(N0, Q0)) -> (N0 = N1))))
invariant [other6_optional]	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> voted(N2))))
invariant [other17_optional]	(forall N2 . (exists N0 . (((N2 = N0) | leader(N0)) -> (~(N2 = N0) & vote_msg(N2, N0)))))
invariant [other9_optional]	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N2, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N0, N1))))
invariant [other14_optional]	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_msg(N2, N0) | vote_msg(N2, N1))))
invariant [other2_optional]	(forall N1, V0, N2, N0 . (((curr_phase = phase_decide) & decided(N1, V0) & leader(N0) & votes(N1, N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | vote_request_msg(N1, N2))))
invariant [other13_optional]	(forall N1, V0, N2, N0 . ((decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N0, N2))))
invariant [other5_optional]	(forall N1, V0, N0 . (((curr_phase = phase_decide) & leader(N0) & vote_msg(N1, N0) & decided(N1, V0)) -> (vote_request_msg(N0, N1) | (N0 = N1))))
invariant [other12_optional]	(forall N1, V0, N0 . (((curr_phase = phase_decide) & votes(N0, N1) & decided(N1, V0) & leader(N0) & votes(N1, N0)) -> (N0 = N1)))
invariant [other15_optional]	(forall N1, N2, N0 . ((leader(N0) & leader(N2)) -> ((N0 = N1) | (N0 = N2) | (N1 = N2) | votes(N2, N1))))
invariant [other16_optional]	(forall N1, N2, N0 . ((votes(N0, N2) & votes(N1, N2)) -> (N0 = N1)))
invariant [other4_optional]	(forall N1, V0, N0 . ((decided(N1, V0) & leader(N0)) -> (N0 = N1)))
invariant [other7_optional]	(forall N1, V0, N0 . ((vote_msg(N1, N0) & decided(N1, V0) & leader(N0)) -> ((N0 = N1) | (curr_phase = phase_becomeLeader))))
invariant [other3_optional]	(forall N1, V0, N0 . ((votes(N0, N0) & votes(N1, N1) & (curr_phase = phase_decide) & decided(N1, V0) & leader(N0)) -> (N0 = N1)))
invariant [other10_optional]	(forall N1, N0 . ((leader(N0) & leader(N1)) -> (N0 = N1)))
###

	random:	0
	scalls:	2542
	scalls-finite:	2532
	scalls-infinite:	10
	scalls-finite-full:	0
	cti:	250
	cubes:	252
	subsumed-calls:	4217
	subsumed-subset:	68
	subsumed-varintersect-c:	3837
	subsumed-varintersect-e:	0
	subsumed-query-sat:	267
	subsumed-query-unsat:	45
	subsumed-eq:	220
	unsat-core:	436
	sz-unsat-core-avg:	5.99
	sz-unsat-min-avg:	2.66
	sz-cube-avg:	52.67
	antecedent-reduction-sum:	143
	antecedent-total-sum:	476
	antecedent-reduction-avg:	0.30
	antecedent-calls:	186
	antecedent-calls-reduced:	92
	antecedent-scalls:	650
	time-q-max-finite-ms:	579
	time-q-max-finite-core-ms:	0
	time-q-max-infinite-ms:	5
	time-q-max-infinite-core-ms:	0
	time-cti-bad-sat:	2
	time-cti-bad-unsat:	0
	time-cti-sat:	12
	time-cti-unsat:	37
	time-forward:	4
	time-antecedent:	17
	time-subsume:	2
	time-subsume-query:	2
	time-inv-check-finite:	1
	time-inv-check-infinite:	0
	time-inv-reuse:	0
	time-minimize:	5
	time-qf:	0
	time-sum:	79
@    92s  -------------------------------------------------
@    92s  -------------------------------------------------
sort: node <-> unbounded
sort: quorum <-> unbounded
sort: value <-> unbounded
(use_wires: False)
@    93s  (finite convergence checks)
@    93s  (performing finite convergence checks for value)
(enumsort) node <-> node:e4:
	[ NODE0, NODE1, NODE2, ] <-> [ n0, n1, n2, ]
(enumsort) quorum <-> quorum:e4:
	[ QUORUM0, QUORUM1, QUORUM2, ] <-> [ q0, q1, q2, ]
(enumsort) value <-> value:e4:
	[ VALUE0, VALUE1, VALUE2, ] <-> [ v0, v1, v2, ]
	dep_height[q0] = 0
	dep_height[q1] = 1
	dep_height[q2] = 2
	dep_height[n0] = 100
	dep_height[n1] = 101
	dep_height[n2] = 102
	dep_height[v0] = 200
	dep_height[v1] = 201
	dep_height[v2] = 202
(use_wires: False)
@    93s  -------------------------------------------------
### Invariant: #6
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [prop1]	(forall V4, V4_2, N4_1, N4 . ((decided(N4_1, V4) & decided(N4, V4_2)) -> (V4 = V4_2)))
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
###


Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> UNSAT
Checking Init /\ !Inv:
	#1 other1 -> UNSAT
	#2 global5_1 -> UNSAT
	#3 prop1  (property) -> UNSAT
	#4 other11 -> UNSAT
	#5 global4 -> UNSAT
	#6 global5 -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 other1 -> UNSAT
	#2 global5_1 -> UNSAT
	#3 prop1  (property) -> UNSAT
	#4 other11 -> UNSAT
	#5 global4 -> UNSAT
	#6 global5 -> UNSAT
	Inv_all /\ T /\ !Inv+: passed

Finite sorts: #3
	node -> node:e4: -> [`node:e4:0`, `node:e4:1`, `node:e4:2`]
	quorum -> quorum:e4: -> [`quorum:e4:0`, `quorum:e4:1`, `quorum:e4:2`]
	value -> value:e4: -> [`value:e4:0`, `value:e4:1`, `value:e4:2`]

Invariant is a proof certificate
@    93s  -------------------------------------------------
@    93s  (performing finite convergence checks for node)
(enumsort) node <-> node:e5:
	[ NODE0, NODE1, NODE2, NODE3, ] <-> [ n0, n1, n2, n3, ]
(enumsort) quorum <-> quorum:e5:
	[ QUORUM0, QUORUM1, QUORUM2, QUORUM3, ] <-> [ q0, q1, q2, q3, ]
(enumsort) value <-> value:e5:
	[ VALUE0, VALUE1, VALUE2, ] <-> [ v0, v1, v2, ]
	dep_height[n0] = 0
	dep_height[n1] = 1
	dep_height[n2] = 2
	dep_height[n3] = 3
	dep_height[q0] = 100
	dep_height[q1] = 101
	dep_height[q2] = 102
	dep_height[q3] = 103
	dep_height[v0] = 200
	dep_height[v1] = 201
	dep_height[v2] = 202
(use_wires: False)
@    93s  -------------------------------------------------
### Invariant: #6
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
invariant [prop1]	(forall V5_1, V5, N5_2, N5 . ((decided(N5_2, V5_1) & decided(N5, V5)) -> (V5_1 = V5)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
###


Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> UNSAT
Checking Init /\ !Inv:
	#1 other1 -> UNSAT
	#2 prop1  (property) -> UNSAT
	#3 global4 -> UNSAT
	#4 global5 -> UNSAT
	#5 other11 -> UNSAT
	#6 global5_1 -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 other1 -> UNSAT
	#2 prop1  (property) -> UNSAT
	#3 global4 -> UNSAT
	#4 global5 -> UNSAT
	#5 other11 -> UNSAT
	#6 global5_1 -> UNSAT
	Inv_all /\ T /\ !Inv+: passed

Finite sorts: #3
	node -> node:e5: -> [`node:e5:0`, `node:e5:1`, `node:e5:2`, `node:e5:3`]
	quorum -> quorum:e5: -> [`quorum:e5:0`, `quorum:e5:1`, `quorum:e5:2`, `quorum:e5:3`]
	value -> value:e5: -> [`value:e5:0`, `value:e5:1`, `value:e5:2`]

Invariant is a proof certificate
@    93s  -------------------------------------------------
@    93s  (performing finite convergence checks for quorum)
(enumsort) node <-> node:e6:
	[ NODE0, NODE1, NODE2, NODE3, ] <-> [ n0, n1, n2, n3, ]
(enumsort) quorum <-> quorum:e6:
	[ QUORUM0, QUORUM1, QUORUM2, QUORUM3, ] <-> [ q0, q1, q2, q3, ]
(enumsort) value <-> value:e6:
	[ VALUE0, VALUE1, VALUE2, ] <-> [ v0, v1, v2, ]
	dep_height[q0] = 0
	dep_height[q1] = 1
	dep_height[q2] = 2
	dep_height[q3] = 3
	dep_height[n0] = 100
	dep_height[n1] = 101
	dep_height[n2] = 102
	dep_height[n3] = 103
	dep_height[v0] = 200
	dep_height[v1] = 201
	dep_height[v2] = 202
(use_wires: False)
@    93s  -------------------------------------------------
### Invariant: #6
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
invariant [prop1]	(forall V6_1, V6, N6, N6_2 . ((decided(N6, V6_1) & decided(N6_2, V6)) -> (V6_1 = V6)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
###


Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> UNSAT
Checking Init /\ !Inv:
	#1 other11 -> UNSAT
	#2 global5 -> UNSAT
	#3 other1 -> UNSAT
	#4 prop1  (property) -> UNSAT
	#5 global4 -> UNSAT
	#6 global5_1 -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 other11 -> UNSAT
	#2 global5 -> UNSAT
	#3 other1 -> UNSAT
	#4 prop1  (property) -> UNSAT
	#5 global4 -> UNSAT
	#6 global5_1 -> UNSAT
	Inv_all /\ T /\ !Inv+: passed

Finite sorts: #3
	node -> node:e6: -> [`node:e6:0`, `node:e6:1`, `node:e6:2`, `node:e6:3`]
	quorum -> quorum:e6: -> [`quorum:e6:0`, `quorum:e6:1`, `quorum:e6:2`, `quorum:e6:3`]
	value -> value:e6: -> [`value:e6:0`, `value:e6:1`, `value:e6:2`]

Invariant is a proof certificate
@    93s  -------------------------------------------------
@    93s  (all finite convergence checks passed)
(enumsort) node <-> node:e7:
	[ NODE0, NODE1, NODE2, ] <-> [ n0, n1, n2, ]
(enumsort) quorum <-> quorum:e7:
	[ QUORUM0, QUORUM1, QUORUM2, ] <-> [ q0, q1, q2, ]
(enumsort) value <-> value:e7:
	[ VALUE0, VALUE1, ] <-> [ v0, v1, ]
	dep_height[v0] = 0
	dep_height[v1] = 1
	dep_height[n0] = 100
	dep_height[n1] = 101
	dep_height[n2] = 102
	dep_height[q0] = 200
	dep_height[q1] = 201
	dep_height[q2] = 202
(use_wires: False)
sort: node <-> unbounded
sort: quorum <-> unbounded
sort: value <-> unbounded
(use_wires: False)
@    93s  -------------------------------------------------
### Invariant: #6
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [prop1]	(forall V1, V2, N1, N2 . ((decided(N1, V1) & decided(N2, V2)) -> (V1 = V2)))
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
###

Printing Init /\ !Inv:
Printing Inv /\ T /\ !Inv+:
Checking Init /\ !Inv:
	#1 global4 -> UNSAT
	#2 prop1  (property) -> UNSAT
	#3 other11 -> UNSAT
	#4 other1 -> UNSAT
	#5 global5 -> UNSAT
	#6 global5_1 -> UNSAT
	Init /\ !Inv: passed
Checking Inv_all /\ T /\ !Inv+:
	#1 global4 -> UNSAT
	#2 prop1  (property) -> UNSAT
	#3 other11 -> UNSAT
	#4 other1 -> UNSAT
	#5 global5 -> UNSAT
	#6 global5_1 -> UNSAT
	Inv_all /\ T /\ !Inv+: passed

Finite sorts: #0

Generalized: 6 -> 6
All generalizable clauses

Inv_all /\ !P -> UNSAT
Inv_all /\ T /\ !P+ -> UNSAT

Invariant is a proof certificate
@    93s  -------------------------------------------------
@    93s  (unbounded induction checks passed)
	random:	0
	scalls:	2598
	scalls-finite:	2574
	scalls-infinite:	24
	scalls-finite-full:	0
	cti:	250
	cubes:	252
	subsumed-calls:	4217
	subsumed-subset:	68
	subsumed-varintersect-c:	3837
	subsumed-varintersect-e:	0
	subsumed-query-sat:	267
	subsumed-query-unsat:	45
	subsumed-eq:	220
	unsat-core:	436
	sz-unsat-core-avg:	5.99
	sz-unsat-min-avg:	2.66
	sz-cube-avg:	52.67
	antecedent-reduction-sum:	143
	antecedent-total-sum:	476
	antecedent-reduction-avg:	0.30
	antecedent-calls:	186
	antecedent-calls-reduced:	92
	antecedent-scalls:	650
	time-q-max-finite-ms:	579
	time-q-max-finite-core-ms:	0
	time-q-max-infinite-ms:	119
	time-q-max-infinite-core-ms:	0
	time-cti-bad-sat:	2
	time-cti-bad-unsat:	0
	time-cti-sat:	12
	time-cti-unsat:	37
	time-forward:	4
	time-antecedent:	17
	time-subsume:	2
	time-subsume-query:	2
	time-inv-check-finite:	1
	time-inv-check-infinite:	0
	time-inv-reuse:	0
	time-minimize:	5
	time-qf:	0
	time-sum:	80
@    93s  -------------------------------------------------
@    93s  -------------------------------------------------
### Proof certificate: #6
invariant [prop1]	(forall V1, V2, N1, N2 . ((decided(N1, V1) & decided(N2, V2)) -> (V1 = V2)))
invariant [global4]	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [other11]	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global5_1]	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [global5]	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [other1]	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
###

	(invariant file: results/consensus_epr_seq/consensus_epr_seq.inv)
### Final proof certificate (stats): #6
invariant [prop1] (4F, 0E, 3A, 1C) 	(forall V1, V2, N1, N2 . ((decided(N1, V1) & decided(N2, V2)) -> (V1 = V2)))
invariant [global4] (2F, 0E, 2A, 1C) 	(forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0)))
invariant [other11] (3F, 0E, 3A, 1C) 	(forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1)))
invariant [global5_1] (2F, 0E, 2A, 1C) 	(forall N1, N0 . (vote_msg(N1, N0) -> voted(N1)))
invariant [global5] (2F, 0E, 2A, 1C) 	(forall V0, N0 . (decided(N0, V0) -> leader(N0)))
invariant [other1] (4F, 1E, 6A, 1C) 	(exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))
###


stratifying inductive invariant:
  prop1:
    pos:
    neg:
  global4:
    pos:
    neg:
  other11:
    pos:
    neg:
  global5_1:
    pos:
    neg:
  global5:
    pos:
    neg:
  other1:
    pos:
    neg:
	skolem arc: quorum -> node
	skolem arc: quorum -> quorum
	cycle detected
	(with inv: epr: False)

Arcs:
	quorum -> node quorum

EPR: False
-----------------------------------------------------------------
	random:	0
@    93s  -------------------------------------------------
@    93s  -------------------------------------------------

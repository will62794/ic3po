#lang ivy1.7

type node
type value
type quorum

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N0:node, N1:node)
relation voted(N:node)
relation vote_msg(N0:node, N1:node)
relation votes(N0:node, N1:node)
relation leader(N:node)
relation decided(N:node, V:value)

after init  {
	vote_request_msg(N1, N2) := false;
	voted(N) := false;
	vote_msg(N1, N2) := false;
	votes(N1, N2) := false;
	leader(N1) := false;
	decided(N, V) := false;
}

action send_request_vote(src: node, dst: node) = {
	vote_request_msg(src, dst) := true;
}

action send_vote(src: node, dst: node) = {
  require ~voted(src);
  require vote_request_msg(dst, src);
  
  vote_msg(src, dst) := true;
  voted(src) := true;
  vote_request_msg(src, dst) := *;
}

action recv_vote(n: node, sender: node) = {
  require vote_msg(sender, n);
  
  votes(n, sender) := true;
}

action become_leader(n: node, q: quorum) = {
  require member(N, q) -> votes(n, N);
  
  leader(n) := true;
}

action decide(n: node, v: value) = {
  require leader(n);
  require ~decided(n, V);
  
  decided(n,v) := true;
}

export send_request_vote
export send_vote
export recv_vote
export become_leader
export decide


# Invariant discovered via ic3po on the sequential version of this protocol.
invariant [ic3po_prop1]	(forall V1, V2, N1, N2 . ((decided(N1, V1) & decided(N2, V2)) -> (V1 = V2))) & (forall N1, N0 . (votes(N0, N1) -> vote_msg(N1, N0))) & (forall N1, N2, N0 . ((vote_msg(N2, N0) & vote_msg(N2, N1)) -> (N0 = N1))) & (forall N1, N0 . (vote_msg(N1, N0) -> voted(N1))) & (forall V0, N0 . (decided(N0, V0) -> leader(N0))) & (exists Q0 . (forall N1, Q2, N2, N0 . ((((Q2 = Q0) | member(N1, Q0)) & leader(N0) & member(N2, Q2)) -> (votes(N0, N1) | votes(N0, N2)))))


# safety property:
# invariant [safety] (decided(N1, V1) & decided(N2, V2) -> V1 = V2)
# invariant [safety] (leader(N1) & leader(N2) -> N1 = N2) & (decided(N1, V1) & decided(N2, V2) -> V1 = V2)
# invariant [safety] (vote_msg(N0,N1) & vote_msg(N0,N2) -> N1 = N2) & (leader(N1) & leader(N2) -> N1 = N2) & (decided(N1, V1) & decided(N2, V2) -> V1 = V2)


# unique leader.
# invariant [safety] leader(N1) & leader(N2) -> N1 = N2

# nodes only vote once.
# invariant [safety] vote_msg(N0,N1) & vote_msg(N0,N2) -> N1 = N2


#invariant [manual_1] leader(N1) & leader(N2) -> N1 = N2
#invariant [manual_2] votes(N, N1) -> vote_msg(N1, N)
#invariant [manual_3] vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
#invariant [manual_4] vote_msg(N, N1) -> voted(N)
#invariant [manual_5] exists Q. forall N, M. leader(N) & member(M, Q) -> votes(N, M)
#invariant [manual_6] decided(N, V) -> leader(N)

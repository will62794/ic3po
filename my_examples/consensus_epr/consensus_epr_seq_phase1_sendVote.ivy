#lang ivy1.7

type node
type value
type quorum
type phase

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N0:node, N1:node)
relation voted(N:node)
relation vote_msg(N0:node, N1:node)
relation votes(N0:node, N1:node)
relation leader(N:node)
relation decided(N:node, V:value)

after init  {
	vote_request_msg(N1, N2) := true;
  
	voted(N) := false;
	vote_msg(N1, N2) := false;

	votes(N1, N2) := false;
	leader(N1) := false;
	decided(N, V) := false;
}

action send_vote(src: node, dst: node) = {
  require ~voted(src);
  require vote_request_msg(dst, src);
  
  vote_msg(src, dst) := true;
  voted(src) := true;
}

export send_vote

# (Phase invariant) 
# Nodes cannot vote twice.
invariant [safety] (vote_msg(S,I) & vote_msg(S,J)) -> (I=J)
